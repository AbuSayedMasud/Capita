%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1604.i105.003.P.m005.c23.stock market exchange trading finance set.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Agor
%%CreationDate: 4/7/2016
%%BoundingBox: 0 0 412 399
%%HiResBoundingBox: 0 0 411.1725 398.6933
%%CropBox: 0 0 411.1725 398.6933
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-04-07T16:20:37+05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-04-07T16:20:37+05:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-04-07T16:20:37+05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>248</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A7rqXnP6t+aeleWg/7i5sZmlXt6znnHX3CQMB/rYqzTFXYq7FXYqlupeZfL+m&#xA;VF/qFvbuP91vIvP6EB5H7spyajHD6pAOTh0WbL9EZH4fpQlj5vs9QuoobCyvbmCRqG9+rvHbqPEv&#xA;L6df9iDlcNUJmoiRHfW32t2Xs+WOJM5QBH8PFcvkLT3MpwHYq7FXYqwb84PMOvaL5Xj/AEGxTUL+&#xA;5jsopEUtIDLWgT9lSeNOR+jfcV5JULbMUbLxWz8ifmfeRvrLXNxDqUbqYRPcut0/Gvxhy3w8e3Jh&#xA;/XCOqiDzc0YDXJ7R+UGq+YLrQ76w16ZrnUdJvHtHuHYSF14K61elWpy6nfMzDPijbh5ocMqZ3lrU&#xA;7FXYq7FWJaT5u1GXXl0fU4orW45zVARzyVVQxopDOob4+TMx6cdvjGXSxjhsOpwa+Zy+HMCJ3/RX&#xA;f8b8tvUxz8/vPGveV/LNsmis0FzqMjRyXyiphjQDlxJ2V3LgA9t6b75S7Z8uQX2vXV+15DNdXGpI&#xA;GlN0jyvOqp8TPzB5UHUnIkgJAt9b/kz5m1/W/KMa+YUddWtOCmWQUae3kQPBOafzKSpPiu++MZA8&#xA;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&#xA;PjjyiB8Ar5FtdirsVdir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:f7c3cee5-1ab7-e245-b907-ce84af6bae82</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:f7c3cee5-1ab7-e245-b907-ce84af6bae82</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:d37a6454-fd9d-4f10-ad73-8ad0aa07448e</stRef:instanceID>
            <stRef:documentID>xmp.did:c9fe8f45-9d4a-594a-b790-e874bca9bc0f</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c9fe8f45-9d4a-594a-b790-e874bca9bc0f</stEvt:instanceID>
                  <stEvt:when>2016-04-06T10:43:05+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f7c3cee5-1ab7-e245-b907-ce84af6bae82</stEvt:instanceID>
                  <stEvt:when>2016-04-07T16:20:37+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -398.693 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 398.693 li
411.172 398.693 li
411.172 0 li
cp
clp
60.2926 16.0032 mo
60.2823 16.0945 60.2418 16.2288 60.0821 16.5316 cv
60.1861 16.4007 60.2745 16.221 60.2926 16.0032 cv
cp
7.93125 60.8519 mo
6.32774 59.6566 li
21.1666 39.7449 li
46.1896 33.5408 li
50.6334 27.138 57.5401 17.0794 58.3121 15.6751 cv
58.4903 14.7903 60.6617 14.077 87.0699 7.94659 cv
87.5221 9.89484 li
77.8063 12.1502 62.1559 15.8909 60.003 16.6776 cv
59.2677 18.0032 56.6852 21.9334 47.6173 34.991 cv
47.4024 35.3006 li
22.3424 41.5135 li
7.93125 60.8519 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.913725 .305882 .105882 rgb
f
84.2701 61.2542 mo
6.1295 61.2542 li
6.1295 10.6136 li
8.1295 10.6136 li
8.1295 59.2542 li
84.2701 59.2542 li
84.2701 61.2542 li
cp
.341176 .341176 .337255 rgb
f
82.2887 57.3489 mo
93.1295 60.2542 li
82.2887 63.1595 li
82.2887 57.3489 li
cp
f
10.0348 12.595 mo
7.1295 1.75421 li
4.22423 12.595 li
10.0348 12.595 li
cp
f
23.572 52.7959 mo
14.6295 52.7959 li
14.6295 59.4209 li
23.572 59.4209 li
23.572 52.7959 li
cp
0 .631373 .603922 rgb
f
34.7502 41.8375 mo
25.8077 41.8375 li
25.8077 59.4209 li
34.7502 59.4209 li
34.7502 41.8375 li
cp
f
45.9283 39.2542 mo
36.9858 39.2542 li
36.9858 59.4209 li
45.9283 59.4209 li
45.9283 39.2542 li
cp
f
57.1065 36.5875 mo
48.164 36.5875 li
48.164 59.4209 li
57.1065 59.4209 li
57.1065 36.5875 li
cp
f
68.2847 20.2542 mo
59.3421 20.2542 li
59.3421 59.4209 li
68.2847 59.4209 li
68.2847 20.2542 li
cp
f
79.4628 15.2542 mo
70.5203 15.2542 li
70.5203 59.4209 li
79.4628 59.4209 li
79.4628 15.2542 li
cp
.913725 .305882 .105882 rgb
f
348.616 64.442 mo
328.376 64.442 li
328.376 60.8702 li
348.616 60.8702 li
348.616 64.442 li
cp
1 .870588 .509804 rgb
f
348.616 64.442 mo
328.376 64.442 li
328.376 61.4283 li
348.616 61.4283 li
348.616 64.442 li
cp
1 .733333 0 rgb
f
346.87 60.8702 mo
326.63 60.8702 li
326.63 57.2984 li
346.87 57.2984 li
346.87 60.8702 li
cp
1 .870588 .509804 rgb
f
346.87 60.8702 mo
326.63 60.8702 li
326.63 57.8565 li
346.87 57.8565 li
346.87 60.8702 li
cp
1 .733333 0 rgb
f
349.41 57.2984 mo
329.17 57.2984 li
329.17 53.7267 li
349.41 53.7267 li
349.41 57.2984 li
cp
1 .870588 .509804 rgb
f
349.41 57.2984 mo
329.17 57.2984 li
329.17 54.2848 li
349.41 54.2848 li
349.41 57.2984 li
cp
1 .733333 0 rgb
f
349.41 53.7267 mo
329.17 53.7267 li
329.17 50.1549 li
349.41 50.1549 li
349.41 53.7267 li
cp
1 .870588 .509804 rgb
f
349.41 53.7267 mo
329.17 53.7267 li
329.17 50.713 li
349.41 50.713 li
349.41 53.7267 li
cp
1 .733333 0 rgb
f
348.299 50.1549 mo
328.059 50.1549 li
328.059 46.5831 li
348.299 46.5831 li
348.299 50.1549 li
cp
1 .870588 .509804 rgb
f
348.299 50.1549 mo
328.059 50.1549 li
328.059 47.1412 li
348.299 47.1412 li
348.299 50.1549 li
cp
1 .733333 0 rgb
f
373.063 64.442 mo
352.823 64.442 li
352.823 60.8702 li
373.063 60.8702 li
373.063 64.442 li
cp
1 .870588 .509804 rgb
f
373.063 64.442 mo
352.823 64.442 li
352.823 61.4283 li
373.063 61.4283 li
373.063 64.442 li
cp
1 .733333 0 rgb
f
373.857 60.8702 mo
353.617 60.8702 li
353.617 57.2984 li
373.857 57.2984 li
373.857 60.8702 li
cp
1 .870588 .509804 rgb
f
373.857 60.8702 mo
353.617 60.8702 li
353.617 57.8565 li
373.857 57.8565 li
373.857 60.8702 li
cp
1 .733333 0 rgb
f
372.746 57.2984 mo
352.506 57.2984 li
352.506 53.7267 li
372.746 53.7267 li
372.746 57.2984 li
cp
1 .870588 .509804 rgb
f
372.746 57.2984 mo
352.506 57.2984 li
352.506 54.2848 li
372.746 54.2848 li
372.746 57.2984 li
cp
1 .733333 0 rgb
f
373.857 53.7267 mo
353.617 53.7267 li
353.617 50.1549 li
373.857 50.1549 li
373.857 53.7267 li
cp
1 .870588 .509804 rgb
f
373.857 53.7267 mo
353.617 53.7267 li
353.617 50.713 li
373.857 50.713 li
373.857 53.7267 li
cp
1 .733333 0 rgb
f
372.746 50.1549 mo
352.506 50.1549 li
352.506 46.5831 li
372.746 46.5831 li
372.746 50.1549 li
cp
1 .870588 .509804 rgb
f
372.746 50.1549 mo
352.506 50.1549 li
352.506 47.1412 li
372.746 47.1412 li
372.746 50.1549 li
cp
1 .733333 0 rgb
f
371.992 46.5831 mo
351.751 46.5831 li
351.751 43.0113 li
371.992 43.0113 li
371.992 46.5831 li
cp
1 .870588 .509804 rgb
f
371.992 46.5831 mo
351.751 46.5831 li
351.751 43.5694 li
371.992 43.5694 li
371.992 46.5831 li
cp
1 .733333 0 rgb
f
374.73 43.0113 mo
354.49 43.0113 li
354.49 39.4395 li
374.73 39.4395 li
374.73 43.0113 li
cp
1 .870588 .509804 rgb
f
374.73 43.0113 mo
354.49 43.0113 li
354.49 39.9976 li
374.73 39.9976 li
374.73 43.0113 li
cp
1 .733333 0 rgb
f
373.857 39.4395 mo
353.617 39.4395 li
353.617 35.8678 li
373.857 35.8678 li
373.857 39.4395 li
cp
1 .870588 .509804 rgb
f
373.857 39.4395 mo
353.617 39.4395 li
353.617 36.4258 li
373.857 36.4258 li
373.857 39.4395 li
cp
1 .733333 0 rgb
f
398.621 64.442 mo
378.381 64.442 li
378.381 60.8702 li
398.621 60.8702 li
398.621 64.442 li
cp
1 .870588 .509804 rgb
f
398.621 64.442 mo
378.381 64.442 li
378.381 61.4283 li
398.621 61.4283 li
398.621 64.442 li
cp
1 .733333 0 rgb
f
398.026 60.8702 mo
377.786 60.8702 li
377.786 57.2984 li
398.026 57.2984 li
398.026 60.8702 li
cp
1 .870588 .509804 rgb
f
398.026 60.8702 mo
377.786 60.8702 li
377.786 57.8565 li
398.026 57.8565 li
398.026 60.8702 li
cp
1 .733333 0 rgb
f
398.304 57.2984 mo
378.064 57.2984 li
378.064 53.7267 li
398.304 53.7267 li
398.304 57.2984 li
cp
1 .870588 .509804 rgb
f
398.304 57.2984 mo
378.064 57.2984 li
378.064 54.2848 li
398.304 54.2848 li
398.304 57.2984 li
cp
1 .733333 0 rgb
f
399.415 53.7267 mo
379.175 53.7267 li
379.175 50.1549 li
399.415 50.1549 li
399.415 53.7267 li
cp
1 .870588 .509804 rgb
f
399.415 53.7267 mo
379.175 53.7267 li
379.175 50.713 li
399.415 50.713 li
399.415 53.7267 li
cp
1 .733333 0 rgb
f
400.288 50.1549 mo
380.048 50.1549 li
380.048 46.5831 li
400.288 46.5831 li
400.288 50.1549 li
cp
1 .870588 .509804 rgb
f
400.288 50.1549 mo
380.048 50.1549 li
380.048 47.1412 li
400.288 47.1412 li
400.288 50.1549 li
cp
1 .733333 0 rgb
f
399.693 46.5831 mo
379.453 46.5831 li
379.453 43.0113 li
399.693 43.0113 li
399.693 46.5831 li
cp
1 .870588 .509804 rgb
f
399.693 46.5831 mo
379.453 46.5831 li
379.453 43.5694 li
399.693 43.5694 li
399.693 46.5831 li
cp
1 .733333 0 rgb
f
400.288 43.0113 mo
380.048 43.0113 li
380.048 39.4395 li
400.288 39.4395 li
400.288 43.0113 li
cp
1 .870588 .509804 rgb
f
400.288 43.0113 mo
380.048 43.0113 li
380.048 39.9976 li
400.288 39.9976 li
400.288 43.0113 li
cp
1 .733333 0 rgb
f
399.415 39.4395 mo
379.175 39.4395 li
379.175 35.8678 li
399.415 35.8678 li
399.415 39.4395 li
cp
1 .870588 .509804 rgb
f
399.415 39.4395 mo
379.175 39.4395 li
379.175 36.4258 li
399.415 36.4258 li
399.415 39.4395 li
cp
1 .733333 0 rgb
f
398.621 35.8678 mo
378.381 35.8678 li
378.381 32.296 li
398.621 32.296 li
398.621 35.8678 li
cp
1 .870588 .509804 rgb
f
398.621 35.8678 mo
378.381 35.8678 li
378.381 32.8541 li
398.621 32.8541 li
398.621 35.8678 li
cp
1 .733333 0 rgb
f
396.498 32.296 mo
376.258 32.296 li
376.258 28.7242 li
396.498 28.7242 li
396.498 32.296 li
cp
1 .870588 .509804 rgb
f
396.498 32.296 mo
376.258 32.296 li
376.258 29.2823 li
396.498 29.2823 li
396.498 32.296 li
cp
1 .733333 0 rgb
f
399.554 28.7242 mo
379.314 28.7242 li
379.314 25.1524 li
399.554 25.1524 li
399.554 28.7242 li
cp
1 .870588 .509804 rgb
f
399.554 28.7242 mo
379.314 28.7242 li
379.314 25.7105 li
399.554 25.7105 li
399.554 28.7242 li
cp
1 .733333 0 rgb
f
400.288 25.1524 mo
380.048 25.1524 li
380.048 21.5806 li
400.288 21.5806 li
400.288 25.1524 li
cp
1 .870588 .509804 rgb
f
400.288 25.1524 mo
380.048 25.1524 li
380.048 22.1387 li
400.288 22.1387 li
400.288 25.1524 li
cp
1 .733333 0 rgb
f
401.905 11.4606 mo
401.905 5.87144 397.374 1.34054 391.785 1.34054 cv
386.196 1.34054 381.665 5.87144 381.665 11.4606 cv
381.665 17.0497 386.196 21.5806 391.785 21.5806 cv
397.374 21.5806 401.905 17.0497 401.905 11.4606 cv
cp
f
399.693 11.4606 mo
399.693 7.09344 396.152 3.55318 391.785 3.55318 cv
387.418 3.55318 383.878 7.09344 383.878 11.4606 cv
383.878 15.8277 387.418 19.368 391.785 19.368 cv
396.152 19.368 399.693 15.8277 399.693 11.4606 cv
cp
1 .870588 .509804 rgb
f
392.192 15.8826 mo
392.192 12.8241 li
392.705 13.3124 393.066 13.8609 393.066 14.5846 cv
393.066 15.0935 392.891 15.6748 392.192 15.8826 cv
cp
390.33 8.36114 mo
390.33 7.85579 390.493 7.27966 391.141 7.05921 cv
391.141 10.0589 li
390.662 9.58599 390.33 9.05417 390.33 8.36114 cv
cp
394.854 14.4696 mo
394.854 12.823 393.619 11.9386 392.424 11.0835 cv
392.192 10.9154 li
392.192 7.00881 li
392.984 7.1786 393.17 7.81341 393.17 8.36114 cv
393.17 8.57607 li
394.832 8.57607 li
394.832 8.47656 li
394.832 6.54924 393.494 5.97138 392.192 5.86346 cv
392.192 4.70978 li
391.141 4.70978 li
391.141 5.86532 li
389.852 5.98247 388.541 6.57053 388.541 8.47656 cv
388.541 10.1227 389.776 11.0071 390.971 11.8622 cv
391.141 11.9851 li
391.141 15.9184 li
390.332 15.7475 390.142 15.1235 390.142 14.5846 cv
390.142 14.0239 li
388.479 14.0239 li
388.479 14.4696 li
388.479 16.3889 389.825 16.9703 391.141 17.0816 cv
391.141 17.9733 li
392.192 17.9733 li
392.192 17.0817 li
393.507 16.9708 394.854 16.3898 394.854 14.4696 cv
cp
1 .733333 0 rgb
f
327.761 42.7937 mo
325.598 39.6572 li
344.196 26.8309 li
361.626 26.4816 li
371.493 12.5326 li
374.604 14.7324 li
363.626 30.2524 li
345.417 30.6175 li
327.761 42.7937 li
cp
.913725 .305882 .105882 rgb
f
376.739 18.2852 mo
379.314 4.70978 li
367.433 11.7025 li
376.739 18.2852 li
cp
f
62.6254 103.924 mo
69.3643 103.924 li
69.3643 98.9465 li
70.7143 97.7863 71.271 96.4186 71.0483 93.09 cv
70.682 88.6675 li
67.3198 88.5313 64.7899 88.4136 61.1206 88.5621 cv
61.1206 92.454 li
59.3931 92.4087 li
59.3931 92.4128 li
59.422 92.5777 59.9786 96.1316 60.0487 96.4079 cv
60.3167 97.4592 61.0546 98.3374 62.04 98.8651 cv
62.6254 99.1248 li
62.6254 103.924 li
cp
.94902 .780392 .6 rgb
f
63.1558 92.4523 mo
63.1693 93.2052 62.5185 93.9175 61.7656 93.931 cv
61.5148 93.9355 li
61.1532 93.9419 60.8039 93.8045 60.5437 93.5534 cv
60.2834 93.3024 60.1336 92.9582 60.1271 92.5966 cv
60.0778 83.3806 li
60.0652 82.6776 60.6249 82.0975 61.3279 82.0849 cv
61.5063 82.0757 li
62.1626 82.0639 62.7042 82.5864 62.7159 83.2428 cv
63.1558 92.4523 li
cp
f
65.7738 90.4704 mo
65.7842 90.8354 65.6614 91.1902 65.4329 91.4554 cv
65.2044 91.7206 64.8893 91.8739 64.5582 91.8811 cv
64.3312 91.886 li
63.656 91.9006 63.0971 91.3148 63.0759 90.5704 cv
62.977 87.0932 li
62.9673 86.7524 63.082 86.4211 63.2954 86.1735 cv
63.5088 85.9259 63.803 85.7827 64.1121 85.776 cv
64.5784 85.766 li
65.167 85.7533 65.6542 86.2639 65.6727 86.9128 cv
65.7738 90.4704 li
cp
1 .823529 .631373 rgb
f
68.4117 90.7257 mo
68.4228 91.4785 67.8766 92.1007 67.1919 92.1155 cv
66.9639 92.1204 li
66.635 92.1274 66.3175 91.9906 66.0813 91.74 cv
65.845 91.4893 65.7093 91.1454 65.704 90.7838 cv
65.6635 88.0262 li
65.6532 87.3233 66.1632 86.7423 66.8025 86.7286 cv
67.2718 86.7185 li
67.5585 86.7123 67.8352 86.8316 68.0412 87.0501 cv
68.2471 87.2686 68.3654 87.5684 68.3701 87.8836 cv
68.4117 90.7257 li
cp
f
70.7141 90.6493 mo
70.7235 91.2275 70.2506 91.7057 69.6579 91.7174 cv
69.4605 91.7213 li
68.8679 91.733 68.3798 91.2737 68.3704 90.6956 cv
68.336 88.5777 li
68.3273 88.0379 68.7689 87.5914 69.3223 87.5805 cv
69.7284 87.5726 li
70.2451 87.5623 70.6706 87.9627 70.6788 88.4667 cv
70.7141 90.6493 li
cp
f
67.0755 92.1228 mo
59.6988 94.598 li
56.9452 87.4338 li
51.7105 79.4767 li
60.1228 75.7972 li
67.0755 92.1228 li
cp
.929412 .929412 .929412 rgb
f
66.2247 101.582 mo
66.1958 98.7661 li
66.6535 94.5114 62.745 93.7734 62.745 93.7734 cv
62.6626 93.3033 li
62.6254 93.0725 62.6914 92.8375 62.844 92.6643 cv
63.7675 91.5965 li
64.089 91.2254 64.2457 90.7431 64.2086 90.2525 cv
64.1715 89.766 63.9406 89.3124 63.5655 88.995 cv
63.3469 88.8094 li
62.9841 88.5003 62.4358 88.5415 62.1225 88.9043 cv
61.1206 90.0504 li
59.6322 91.7573 li
59.4715 91.9387 59.389 92.1737 59.3931 92.4087 cv
59.3931 92.4128 li
59.422 92.5777 59.9786 96.1316 60.0487 96.4079 cv
60.3167 97.4592 61.0546 98.3374 62.04 98.8651 cv
62.6254 99.1248 li
62.6048 100.551 li
62.6254 100.555 li
66.2247 101.582 li
cp
1 .823529 .631373 rgb
f
62.1039 141.629 mo
61.9838 141.783 li
61.9501 141.826 li
59.5766 144.897 59.6727 149.192 59.8937 153.089 cv
60.3501 161.199 60.8066 169.305 61.2679 177.415 cv
27.3605 177.415 li
26.5917 171.28 25.8229 165.144 25.059 159.003 cv
23.1996 165.144 21.3448 171.28 19.4902 177.415 cv
7.73291 177.415 li
9.52986 171.323 11.3221 165.226 13.1143 159.128 cv
14.3395 154.972 15.632 150.682 18.438 147.376 cv
20.7299 144.68 25.4146 143.45 27.1203 140.582 cv
32.4391 138.91 37.7821 137.886 42.2217 134.514 cv
46.3922 134.456 49.8565 133.543 52.5616 130.891 cv
55.1081 133.697 57.7172 136.719 60.2829 139.602 cv
60.8931 140.289 61.5033 140.966 62.1039 141.629 cv
.835294 .92549 .960784 rgb
f
44.0331 141.621 mo
31.5406 145.465 li
27.857 133.373 li
41.0701 130.01 li
44.0331 141.621 li
cp
.94902 .780392 .6 rgb
f
37.4018 174.287 mo
36.0593 172.13 35.4921 170.198 34.4299 168.418 cv
36.9943 165.326 37.965 163.067 39.1261 159.288 cv
40.2871 155.509 40.5679 151.305 38.6277 147.547 cv
39.4206 147.155 40.0792 147.139 40.872 146.746 cv
44.2447 151.511 45.7571 156.573 45.4495 162.348 cv
45.297 165.212 44.1674 168.122 43.1128 171.032 cv
41.0152 172.034 39.4994 173.284 37.4018 174.287 cv
.760784 .843137 .87451 rgb
f
71.5068 121.132 mo
71.5068 121.79 71.5021 122.449 71.4733 123.107 cv
71.4252 124.366 71.3051 125.62 71.0072 126.84 cv
70.4498 129.142 69.2918 131.256 68.0378 133.264 cv
66.1591 136.272 64.3285 139.126 61.9838 141.783 cv
61.9501 141.826 li
61.2871 141.192 60.624 140.529 59.9657 139.852 cv
57.2463 137.06 54.6132 133.961 52.5616 130.891 cv
56.0499 127.551 58.6109 125.125 59.7784 120.44 cv
60.4559 117.735 60.7538 115.395 61.0901 112.632 cv
61.4505 109.692 61.3831 106.554 62.1039 103.926 cv
69.7964 103.926 li
70.1471 105.051 70.2432 106.319 70.3393 107.227 cv
70.8486 111.941 71.5117 116.395 71.5068 121.132 cv
.835294 .92549 .960784 rgb
f
69.7988 99.8397 mo
62.1042 99.8397 li
62.1042 103.924 li
69.7988 103.924 li
69.7988 99.8397 li
cp
.870588 .964706 1 rgb
f
69.0981 101.702 mo
69.0981 102.078 68.7933 102.382 68.4174 102.382 cv
68.0415 102.382 67.7367 102.078 67.7367 101.702 cv
67.7367 101.326 68.0415 101.021 68.4174 101.021 cv
68.7933 101.021 69.0981 101.326 69.0981 101.702 cv
cp
1 1 1 rgb
f
31.1544 109.805 mo
25.3478 110.695 21.3211 115.242 22.8348 122.052 cv
23.0102 122.842 23.2206 123.592 23.5035 124.368 cv
22.0967 123.84 21.1663 125.296 21.9282 127.18 cv
22.4654 128.509 23.4286 130.255 24.2368 130.413 cv
25.2055 130.603 25.3944 129.989 25.4446 129.962 cv
26.1665 131.886 26.6114 133.635 27.486 134.578 cv
28.5209 135.694 29.315 136.531 30.028 137.143 cv
31.6448 138.53 32.8402 138.749 35.4482 138.355 cv
35.4631 138.353 li
35.478 138.351 li
38.086 137.957 39.1635 137.395 40.2988 135.592 cv
40.7995 134.797 41.3112 133.763 41.9707 132.392 cv
42.5281 131.233 42.4369 129.43 42.559 127.379 cv
42.6147 127.39 42.9765 127.921 43.8461 127.454 cv
44.5716 127.064 44.9765 125.112 45.0977 123.683 cv
45.2695 121.658 43.951 120.542 42.7627 121.462 cv
42.8039 120.636 42.7833 119.857 42.718 119.052 cv
42.1544 112.098 36.9652 108.942 31.1544 109.805 cv
cp
1 .823529 .631373 rgb
f
23.1094 113.116 mo
21.2886 116.064 21.043 119.066 22.7545 124.273 cv
23.7046 124.627 24.2676 125.205 25.0186 127.807 cv
25.6797 127.887 25.9607 127.885 26.5685 127.991 cv
20.8724 114.376 26.3183 113.264 27.7786 112.734 cv
28.9666 112.303 33.982 111.546 35.2443 111.607 cv
36.796 111.683 42.3275 111.138 40.9035 125.828 cv
41.4527 125.546 41.7218 125.465 42.33 125.195 cv
42.2794 122.486 42.6469 121.768 43.4502 121.15 cv
43.5486 115.669 42.1778 113.132 39.8183 110.594 cv
36.543 107.071 26.3634 107.847 23.1094 113.116 cv
cp
.388235 .305882 .258824 rgb
f
34.6187 109.285 mo
35.3566 109.176 36.2057 109.098 36.7554 109.602 cv
37.4373 110.228 37.2375 111.344 36.8831 112.199 cv
35.4466 115.664 32.892 119.068 28.6828 119.853 cv
29.0911 119.422 29.7746 118.584 29.8251 117.884 cv
27.7013 119.252 25.1085 119.876 22.5949 119.625 cv
23.0246 117.438 23.4937 115.162 24.8646 113.404 cv
25.9784 111.976 27.6057 111.018 29.3145 110.418 cv
31.0233 109.819 32.8274 109.55 34.6187 109.285 cv
cp
f
36.3503 177.415 mo
27.3605 177.415 li
26.5917 171.28 25.8229 165.144 25.059 159.003 cv
23.1996 165.144 21.3448 171.28 19.4902 177.415 cv
16.6362 177.415 li
19.447 169.949 22.5605 162.107 25.2944 154.732 cv
25.4146 156.092 25.6067 157.471 25.8758 158.845 cv
26.7839 163.616 28.6001 168.339 31.5646 172.024 cv
30.8776 172.068 30.1905 172.111 29.5034 172.154 cv
31.7857 173.908 34.0679 175.662 36.3503 177.415 cv
.8 .882353 .917647 rgb
f
61.2679 177.415 mo
50.5532 177.415 li
53.388 176.152 56.1027 174.614 58.6397 172.822 cv
55.1872 173.476 51.7397 174.129 48.2873 174.787 cv
52.0112 174.047 55.1153 171.19 56.7177 167.743 cv
58.3418 164.25 58.5579 160.233 57.9718 156.423 cv
57.2943 152.003 55.5646 147.741 52.97 144.099 cv
55.4733 142.989 57.8228 141.553 59.9657 139.852 cv
59.9657 139.852 li
60.624 140.529 61.2871 141.192 61.9501 141.826 cv
60.1885 144.105 59.7873 147.059 59.7878 150.023 cv
59.788 151.053 59.8367 152.084 59.8937 153.089 cv
60.3501 161.199 60.8066 169.305 61.2679 177.415 cv
f
61.9501 141.826 mo
61.9501 141.826 li
61.2871 141.192 60.624 140.529 59.9657 139.852 cv
60.0715 139.77 60.1771 139.688 60.2829 139.602 cv
65.5105 135.354 69.4792 129.536 71.4733 123.107 cv
71.4252 124.366 71.3051 125.62 71.0072 126.84 cv
70.4498 129.142 69.2918 131.256 68.0378 133.264 cv
66.1591 136.272 64.3285 139.126 61.9838 141.783 cv
61.9501 141.826 li
f
48.1363 174.816 mo
48.1866 174.806 48.237 174.797 48.2873 174.787 cv
48.2371 174.797 48.1868 174.807 48.1363 174.816 cv
f
41.4305 146.466 mo
38.6277 147.547 li
36.0398 143.597 li
40.6697 142.142 li
41.4305 146.466 li
cp
.341176 .341176 .337255 rgb
f
34.6638 148.829 mo
26.0239 141.848 li
29.2898 138.077 li
38.5076 142.823 li
34.6638 148.829 li
cp
.870588 .964706 1 rgb
f
45.377 144.735 mo
46.3924 133.912 li
42.0061 133.678 li
38.5076 142.823 li
45.377 144.735 li
cp
f
41.4305 146.466 mo
40.6326 146.776 39.4256 147.238 38.6277 147.547 cv
40.1092 151.511 39.9959 155.177 38.5076 158.839 cv
37.0192 162.5 35.8648 164.66 33.1022 167.487 cv
33.9409 169.381 34.2909 171.373 35.3602 173.673 cv
37.4676 172.888 39.0428 171.795 41.1502 171.011 cv
42.45 168.208 43.8215 165.413 44.2533 162.562 cv
45.1242 156.813 44.1822 151.588 41.4305 146.466 cv
cp
.270588 .270588 .266667 rgb
f
180.859 49.8056 mo
180.822 50.0906 180.787 50.3854 180.752 50.6878 cv
180.673 51.3443 180.599 52.0406 180.527 52.7665 cv
180.15 56.6268 179.868 61.3196 179.751 65.3756 cv
142.94 65.3756 li
142.665 59.444 141.852 51.3989 141.701 47.5311 cv
141.622 45.5192 142.068 45.9652 140.826 44.8973 cv
140.73 44.8155 140.623 44.7239 140.504 44.6198 cv
140.316 42.7739 140.997 40.9057 142.112 39.419 cv
143.227 37.9324 144.749 36.7976 146.362 35.871 cv
148.049 34.8997 149.838 34.1465 151.684 33.5444 cv
154.736 32.5434 157.95 31.9513 161.131 31.4557 cv
163.574 31.0742 166.047 30.7396 168.515 30.9031 cv
169.94 30.9973 171.337 31.255 172.712 31.6118 cv
173.624 31.8496 174.526 32.1321 175.423 32.4369 cv
175.425 32.4369 li
176.79 32.9077 178.141 33.4403 179.484 33.9681 cv
179.439 34.372 179.412 34.7759 179.402 35.1797 cv
179.281 40.0608 181.486 44.9369 180.859 49.8056 cv
.792157 .890196 .929412 rgb
f
165.142 64.5902 mo
163.695 62.3198 161.297 59.346 160.153 56.9085 cv
159.008 54.471 158.174 51.855 158.032 49.166 cv
157.859 45.8841 158.716 42.645 159.566 39.4702 cv
159.713 39.9759 159.861 40.4817 160.009 40.9874 cv
159.708 40.9779 159.423 40.9688 159.176 40.9604 cv
158.313 46.4171 159.106 51.3989 161.688 56.2825 cv
162.969 58.704 165.075 60.7811 167.12 62.8878 cv
168.644 62.9186 169.974 63.1751 171.387 63.3353 cv
171.439 63.5224 171.478 63.7088 171.503 63.8945 cv
169.63 64.0048 167.016 64.48 165.142 64.5902 cv
.721569 .811765 .847059 rgb
f
156.203 43.7774 mo
143.983 46.9414 li
141.701 47.5311 li
126.966 51.3443 li
126.798 49.6 li
125.851 39.813 li
135.252 35.534 145.12 30.8214 150.319 30.4547 cv
151.684 33.5444 li
156.203 43.7774 li
.792157 .890196 .929412 rgb
f
193.636 47.4197 mo
188.726 56.2675 li
188.077 57.437 li
180.527 52.7665 li
177.492 50.8884 li
163.473 42.2164 li
172.712 31.6118 li
173.039 31.2352 li
173.768 31.5177 174.566 31.9264 175.423 32.4369 cv
175.425 32.4369 li
176.642 33.1628 177.98 34.0945 179.402 35.1797 cv
183.671 38.4305 188.718 43.0365 193.636 47.4197 cv
f
153.873 28.7269 mo
157.832 42.2116 162.668 42.0118 168.346 28.6817 cv
167.786 23.0265 li
154.6 23.3975 li
153.873 28.7269 li
cp
.94902 .780392 .6 rgb
f
159.176 40.9604 mo
162.028 41.0516 li
163.112 36.6974 li
158.503 36.8432 li
159.176 40.9604 li
cp
.341176 .341176 .337255 rgb
f
159.176 40.9604 mo
159.988 40.988 161.216 41.0239 162.028 41.0516 cv
161.942 45.0714 163.192 48.3235 165.675 51.1417 cv
168.158 53.9598 169.87 55.535 173.234 57.2049 cv
173.075 59.1661 173.386 61.0631 173.147 63.4608 cv
171.011 63.4175 169.256 62.931 167.12 62.8878 cv
165.075 60.7811 162.969 58.704 161.688 56.2825 cv
159.106 51.3989 158.313 46.4171 159.176 40.9604 cv
.270588 .270588 .266667 rgb
f
166.704 41.5058 mo
173 31.3522 li
168.346 28.6817 li
166.737 32.5126 164.297 35.35 160.67 36.7712 cv
166.704 41.5058 li
cp
.870588 .964706 1 rgb
f
154.373 41.1506 mo
149.502 30.5212 li
153.873 28.7269 li
155.159 32.1623 157.363 34.8906 160.67 36.7712 cv
154.373 41.1506 li
cp
f
161.151 2.83485 mo
155.145 2.84886 150.381 6.83096 150.872 13.9472 cv
150.929 14.7717 151.027 15.5626 151.194 16.3907 cv
149.853 15.6423 148.69 16.9715 149.173 18.993 cv
149.513 20.4183 150.22 22.3306 151.013 22.6138 cv
151.964 22.9532 152.248 22.3609 152.303 22.3422 cv
152.739 24.3967 152.922 26.233 153.663 27.3196 cv
154.539 28.6055 155.214 29.5729 155.841 30.3004 cv
157.264 31.9498 158.439 32.3534 161.136 32.3534 cv
161.151 32.3533 li
161.167 32.3534 li
163.863 32.3534 165.038 31.9498 166.461 30.3004 cv
167.089 29.5729 167.764 28.6055 168.64 27.3196 cv
169.38 26.233 169.563 24.3967 169.999 22.3422 cv
170.054 22.3609 170.339 22.9532 171.289 22.6138 cv
172.082 22.3306 172.789 20.4183 173.13 18.993 cv
173.613 16.9715 172.45 15.6423 171.108 16.3907 cv
171.276 15.5626 171.374 14.7717 171.431 13.9472 cv
171.922 6.83096 167.157 2.84886 161.151 2.83485 cv
cp
1 .823529 .631373 rgb
f
152.513 4.95466 mo
150.222 7.65751 149.516 10.6544 150.452 16.1802 cv
151.358 16.6826 151.839 17.3527 152.201 20.0984 cv
152.858 20.2795 153.142 20.3203 153.74 20.5209 cv
150.059 5.88713 155.734 5.59401 157.292 5.2809 cv
158.558 5.02619 163.744 5.02619 165.011 5.2809 cv
166.568 5.59401 172.244 5.88713 168.562 20.5209 cv
169.161 20.3203 169.445 20.2795 170.101 20.0984 cv
170.463 17.3527 170.944 16.6826 171.851 16.1802 cv
172.787 10.6544 171.788 7.88031 169.79 4.95466 cv
167.016 .893556 156.607 .124154 152.513 4.95466 cv
cp
.388235 .305882 .258824 rgb
f
163.138 0 mo
162.964 .67254 162.719 .985132 162.598 1.14817 cv
163.591 .896873 164.09 .573224 164.843 .52988 cv
162.982 5.67555 159.445 10.0274 154.801 10.9497 cv
155.291 10.3649 155.781 9.78012 156.271 9.19532 cv
153.839 9.91392 151.407 10.6325 148.975 11.3511 cv
149.802 9.68013 150.628 8.00917 151.454 6.3382 cv
150.579 6.65521 149.704 6.97222 148.828 7.28923 cv
151.151 3.13706 155.526 .693225 159.742 1.19252 cv
159.517 .985759 159.106 .478026 158.807 .2038 cv
159.833 .3057 160.164 .22418 161.242 .9171 cv
161.787 .434484 162.496 .244719 163.138 0 cv
cp
f
162.216 7.26091 mo
163.634 8.3922 165.276 9.13491 166.974 9.4132 cv
166.637 8.95022 166.3 8.48725 165.963 8.02428 cv
168.074 8.37546 170.185 8.72664 172.296 9.07782 cv
171.937 7.2549 171.137 5.55419 170.013 4.22487 cv
170.49 4.24103 170.967 4.25718 171.444 4.27333 cv
169.036 1.64953 164.932 .920341 162.077 2.83282 cv
161.406 3.28204 160.945 4.17676 160.925 5.08154 cv
160.904 6.00501 161.564 6.74087 162.216 7.26091 cv
cp
f
135.44 65.3335 mo
136.135 64.6627 136.898 64.0442 137.645 63.4401 cv
137.877 63.2533 li
139.467 61.9659 140.972 60.6655 141.907 58.9185 cv
142.641 57.5478 142.952 56.0116 143.253 54.5262 cv
143.567 52.9793 143.863 51.518 144.593 50.2175 cv
145.305 48.951 146.358 47.9597 147.474 46.9101 cv
148.064 46.3543 148.675 45.7799 149.226 45.1639 cv
150.735 43.4752 152.064 40.6921 150.843 38.4048 cv
150.187 38.7552 li
151.228 40.7039 150.021 43.1584 148.672 44.6683 cv
148.142 45.2606 147.544 45.8239 146.965 46.3685 cv
145.857 47.4105 144.712 48.488 143.945 49.8536 cv
143.158 51.2561 142.836 52.8433 142.525 54.3785 cv
142.234 55.8115 141.934 57.2932 141.252 58.5677 cv
140.382 60.1925 138.938 61.4379 137.409 62.6755 cv
137.178 62.8621 li
136.225 63.6322 135.249 64.4255 134.398 65.3335 cv
135.44 65.3335 li
.270588 .270588 .266667 rgb
f
151.165 42.504 mo
149.968 42.2907 li
150.195 39.4827 li
151.743 39.4827 li
151.165 42.504 li
cp
.74902 .164706 .137255 rgb
f
174.11 49.7418 mo
174.393 49.9332 174.69 50.1151 174.977 50.2913 cv
175.877 50.844 176.727 51.3661 177.254 52.1789 cv
177.691 52.8522 177.857 53.6565 178.034 54.5083 cv
178.19 55.2608 178.351 56.0392 178.715 56.749 cv
179.392 58.0685 180.621 58.9055 181.81 59.7148 cv
182.168 59.959 182.539 60.2111 182.881 60.4696 cv
184.553 61.7286 185.891 63.4256 186.755 65.3335 cv
187.564 65.3335 li
186.655 63.1886 185.188 61.2762 183.329 59.8757 cv
182.971 59.6067 182.594 59.3495 182.228 59.1005 cv
181.065 58.3085 179.967 57.5607 179.377 56.4098 cv
179.059 55.7897 178.914 55.0941 178.762 54.3572 cv
178.579 53.476 178.39 52.5648 177.878 51.7743 cv
177.259 50.8207 176.297 50.2296 175.365 49.6578 cv
175.086 49.4861 174.796 49.3081 174.526 49.1258 cv
171.918 47.365 170.19 44.4433 169.902 41.3101 cv
169.162 41.378 li
169.47 44.731 171.319 47.8574 174.11 49.7418 cv
.270588 .270588 .266667 rgb
f
170.301 42.561 mo
169.104 42.775 li
168.346 40.0616 li
169.799 39.5261 li
170.301 42.561 li
cp
0 .560784 .537255 rgb
f
158.666 65.3756 mo
142.94 65.3756 li
142.831 63.0275 142.638 60.3479 142.435 57.7276 cv
142.815 56.6878 143.037 55.5938 143.253 54.5262 cv
143.471 53.4538 143.68 52.4226 144.031 51.4575 cv
144.2 52.8666 144.547 54.2376 145.16 55.5342 cv
146.894 59.2086 150.782 61.7656 154.843 61.9044 cv
151.904 61.8697 148.963 61.8325 146.022 61.7978 cv
149.721 64.164 154.347 64.4316 158.666 65.3756 cv
.756863 .85098 .886274 rgb
f
142.268 55.5987 mo
142.014 52.3936 141.776 49.4489 141.701 47.5311 cv
143.983 46.9414 li
143.983 46.9414 li
143.91 47.9356 143.877 48.9299 143.913 49.9124 cv
143.149 51.3003 142.831 52.8648 142.525 54.3785 cv
142.442 54.7833 142.36 55.1919 142.268 55.5987 cv
f
126.966 51.3443 mo
126.798 49.6 li
127.467 49.3993 128.151 49.2506 128.829 49.0896 cv
132.96 48.1109 136.986 46.7061 140.826 44.8973 cv
142.038 44.3299 143.232 43.7203 144.404 43.0737 cv
144.238 44.3447 144.077 45.6431 143.983 46.9414 cv
143.983 46.9414 li
141.701 47.5311 li
126.966 51.3443 li
f
142.435 57.7276 mo
142.379 57.0109 142.323 56.2985 142.268 55.5987 cv
142.268 55.5987 li
142.36 55.1919 142.442 54.7833 142.525 54.3785 cv
142.831 52.8648 143.149 51.3003 143.913 49.9124 cv
143.931 50.4313 143.969 50.947 144.031 51.4575 cv
143.68 52.4226 143.471 53.4538 143.253 54.5262 cv
143.037 55.5938 142.815 56.6878 142.435 57.7276 cv
142.435 57.7276 li
.262745 .262745 .258824 rgb
f
179.751 65.3756 mo
167.333 65.3756 li
169.61 64.8479 172.197 64.9297 174.293 63.8543 cv
176.325 62.8111 177.7 60.7225 178.21 58.4975 cv
178.384 57.7398 178.466 56.968 178.473 56.193 cv
178.542 56.3818 178.622 56.5676 178.715 56.749 cv
179.055 57.4115 179.534 57.9524 180.077 58.4292 cv
179.927 60.7755 179.815 63.1696 179.751 65.3756 cv
.756863 .85098 .886274 rgb
f
180.141 57.4653 mo
179.839 57.1486 179.578 56.8027 179.377 56.4098 cv
179.059 55.7897 178.914 55.0941 178.762 54.3572 cv
178.579 53.476 178.39 52.5648 177.878 51.7743 cv
177.824 51.6907 177.767 51.6098 177.707 51.5315 cv
177.639 51.3158 177.567 51.1007 177.492 50.8884 cv
177.492 50.8884 li
180.527 52.7665 li
180.383 54.2389 180.253 55.8323 180.141 57.4653 cv
f
188.077 57.437 mo
180.527 52.7665 li
177.492 50.8884 li
176.833 49.0202 175.928 47.2412 175.026 45.4722 cv
176.295 47.7689 178.463 49.3274 180.752 50.6878 cv
181.543 51.161 182.346 51.607 183.133 52.0529 cv
185.158 53.2001 187.236 54.5306 188.726 56.2675 cv
188.077 57.437 li
f
180.077 58.4292 mo
180.077 58.4292 li
179.534 57.9524 179.055 57.4115 178.715 56.749 cv
178.622 56.5676 178.542 56.3818 178.473 56.193 cv
178.485 54.692 178.213 53.1795 177.772 51.7383 cv
177.751 51.6693 177.729 51.6004 177.707 51.5315 cv
177.767 51.6098 177.824 51.6907 177.878 51.7743 cv
178.39 52.5648 178.579 53.476 178.762 54.3572 cv
178.914 55.0941 179.059 55.7897 179.377 56.4098 cv
179.578 56.8027 179.839 57.1486 180.141 57.4653 cv
180.141 57.4653 li
180.119 57.7852 180.098 58.1069 180.077 58.4292 cv
.262745 .262745 .258824 rgb
f
178.103 29.0969 mo
181.283 28.2725 li
181.008 25.855 li
180.941 25.2701 180.475 24.8112 179.889 24.7538 cv
178.844 24.6513 li
178.103 29.0969 li
cp
.94902 .780392 .6 rgb
f
168.181 32.8852 mo
169.458 33.045 170.756 33.7291 172.104 34.8262 cv
173.402 33.1894 176.405 26.61 176.779 24.6067 cv
175.068 24.3043 173.701 23.7696 172.745 22.9078 cv
172.591 22.7688 172.521 22.5566 172.571 22.355 cv
173.039 20.455 173.899 18.6459 175.045 16.9299 cv
175.159 16.7584 175.361 16.6678 175.566 16.684 cv
177.047 16.8009 178.36 17.4567 179.514 18.6292 cv
181.357 20.7594 180.413 24.8527 179.352 27.8077 cv
178.635 29.8048 177.459 32.3049 176.748 33.68 cv
175.289 36.5012 172.543 40.8053 169.37 40.8036 cv
167.728 40.6976 166.373 40.1327 165.317 39.0892 cv
165.17 38.9442 165.107 38.7326 165.162 38.5338 cv
165.711 36.5447 166.517 34.711 167.649 33.1146 cv
167.769 32.9452 167.975 32.8594 168.181 32.8852 cv
cp
0 .631373 .603922 rgb
f
174.693 27.2692 mo
177.21 26.608 li
177.673 26.4865 178.164 26.5479 178.583 26.7793 cv
181.283 28.2725 li
182.658 36.0431 li
178.892 39.2356 li
175.846 38.4575 176.203 35.5938 176.138 34.8031 cv
174.654 33.0658 173.419 33.529 172.559 34.1656 cv
171.264 32.9996 173.64 27.7126 174.693 27.2692 cv
cp
1 .823529 .631373 rgb
f
194.418 57.3856 mo
193.572 58.1198 192.398 58.3789 191.279 58.3376 cv
188.266 58.2264 186.5 56.7179 184.923 54.1477 cv
183.346 51.5776 180.52 43.6966 180.182 42.4305 cv
180.385 41.9096 183.666 39.3822 184.684 38.2648 cv
187.655 40.0702 190.323 42.699 192.416 45.4747 cv
194.509 48.2504 196.342 50.6462 195.908 54.0955 cv
195.754 55.3175 195.348 56.5781 194.418 57.3856 cv
cp
.835294 .92549 .960784 rgb
f
178.388 39.0768 mo
180.182 42.4305 li
181.567 41.127 183.347 39.9836 184.684 38.2648 cv
182.586 35.6374 li
178.388 39.0768 li
cp
.870588 .964706 1 rgb
f
179.838 40.2236 mo
179.77 40.5173 179.952 40.8108 180.246 40.8793 cv
180.539 40.9478 180.833 40.7653 180.901 40.4716 cv
180.97 40.178 180.787 39.8844 180.494 39.8159 cv
180.2 39.7474 179.907 39.93 179.838 40.2236 cv
cp
1 1 1 rgb
f
144.557 26.4227 mo
141.7 24.8 li
142.595 22.5372 li
142.811 21.9898 143.381 21.6679 143.961 21.7647 cv
144.997 21.9375 li
144.557 26.4227 li
cp
.94902 .780392 .6 rgb
f
153.153 32.6599 mo
151.878 32.4823 150.447 32.8054 148.86 33.5144 cv
148.032 31.5965 146.843 24.4628 147.002 22.431 cv
148.734 22.5839 150.192 22.4228 151.339 21.8391 cv
151.524 21.745 151.647 21.5582 151.651 21.3507 cv
151.693 19.3944 151.333 17.4239 150.673 15.469 cv
150.607 15.2736 150.436 15.1338 150.233 15.096 cv
148.773 14.8241 147.335 15.1159 145.916 15.9483 cv
143.582 17.5261 143.43 21.724 143.686 24.8532 cv
143.859 26.9681 144.345 29.6879 144.674 31.2006 cv
145.349 34.304 146.882 39.1739 149.947 39.9972 cv
151.559 40.3215 153.014 40.1283 154.306 39.3952 cv
154.485 39.2934 154.601 39.1055 154.6 38.8992 cv
154.587 36.8358 154.285 34.8556 153.607 33.0199 cv
153.535 32.8251 153.358 32.6886 153.153 32.6599 cv
cp
.901961 .2 .164706 rgb
f
148.325 25.5443 mo
146.066 24.2515 li
145.651 24.0139 145.16 23.9453 144.696 24.06 cv
141.7 24.8 li
138.353 31.9462 li
141.16 36.0078 li
144.303 36.0484 144.703 33.1901 144.971 32.4435 cv
146.856 31.1519 147.928 31.9201 148.593 32.7584 cv
150.146 31.969 149.226 26.2461 148.325 25.5443 cv
cp
1 .823529 .631373 rgb
f
121.449 49.4979 mo
122.075 50.4266 123.142 50.9822 124.233 51.2332 cv
127.171 51.9091 129.269 50.9114 131.46 48.8396 cv
133.651 46.7678 138.428 39.8923 139.083 38.7576 cv
139.023 38.2019 136.512 34.9085 135.819 33.5649 cv
132.481 34.5359 129.222 36.3807 126.479 38.5169 cv
123.736 40.6531 121.343 42.4901 120.866 45.9336 cv
120.697 47.1536 120.761 48.4765 121.449 49.4979 cv
cp
.835294 .92549 .960784 rgb
f
141.687 35.9854 mo
139.083 38.7576 li
138.085 37.1389 136.663 35.5721 135.819 33.5649 cv
138.528 31.5731 li
141.687 35.9854 li
cp
.870588 .964706 1 rgb
f
139.989 36.7159 mo
139.979 37.0173 139.726 37.2533 139.425 37.2431 cv
139.124 37.2329 138.888 36.9803 138.898 36.679 cv
138.908 36.3776 139.161 36.1416 139.462 36.1518 cv
139.763 36.162 139.999 36.4146 139.989 36.7159 cv
cp
1 1 1 rgb
f
274.687 20.0318 mo
275.728 16.1788 276.044 14.3154 274.861 9.66721 cv
271.1 -5.1113 253.537 -.0189385 251.408 8.26117 cv
250.414 12.1262 253.747 15.9008 255.477 17.7242 cv
257.207 19.5475 273.977 17.4215 274.687 20.0318 cv
cp
.235294 .235294 .231373 rgb
f
263.395 24.0517 mo
272.764 15.2977 li
276.871 25.4093 li
279.45 31.7948 li
263.805 36.6525 li
263.395 24.0517 li
cp
.94902 .780392 .6 rgb
f
262.449 31.4478 mo
265.799 36.3266 271.675 33.9711 281.39 28.5143 cv
288.139 29.7651 li
292.016 30.4836 295.299 33.0487 296.934 36.6372 cv
304.717 53.7174 li
296.294 64.8837 li
247.371 64.8837 li
251.314 36.9679 li
262.449 31.4478 li
.835294 .92549 .960784 rgb
f
268.915 40.5954 mo
265.75 40.3898 li
264.526 48.6739 264.577 56.244 267.408 62.2563 cv
276.776 60.6727 li
272.373 55.1595 269.78 48.4493 268.915 40.5954 cv
cp
.811765 .270588 .0941176 rgb
f
263.618 54.9611 mo
264.684 55.3585 265.742 55.6352 266.768 55.7843 cv
268.409 56.0226 270.313 56.2223 272.057 56.2325 cv
272.402 56.2345 270.126 58.3729 269.343 58.4782 cv
268.095 58.6457 267.564 58.7305 266.32 58.5332 cv
265.077 58.3358 263.076 58.2781 262.331 57.2633 cv
261.817 56.5627 261.79 55.3913 262.287 55.0448 cv
262.593 54.8313 263.268 54.8307 263.618 54.9611 cv
cp
.94902 .780392 .6 rgb
f
272.057 56.2325 mo
263.631 58.5631 li
255.385 63.4931 li
270.488 63.1155 li
272.303 64.0044 274.321 63.9583 276.439 63.9123 cv
277.205 63.8957 277.983 63.8792 278.771 63.9067 cv
280.783 63.9773 282.141 61.8457 281.175 60.0787 cv
279.562 57.1304 275.838 57.0244 272.057 56.2325 cv
1 .823529 .631373 rgb
f
282.668 56.7597 mo
278.031 57.5508 li
278.851 59.6791 279.27 61.6473 279.261 64.8837 cv
284.75 64.8837 li
282.668 56.7597 li
.870588 .964706 1 rgb
f
240.968 32.0726 mo
240.968 28.4567 li
241.575 29.034 242.001 29.6825 242.001 30.5379 cv
242.001 31.1396 241.794 31.8269 240.968 32.0726 cv
cp
238.767 23.1805 mo
238.767 22.5831 238.96 21.902 239.726 21.6414 cv
239.726 25.1876 li
239.16 24.6286 238.767 23.9998 238.767 23.1805 cv
cp
244.115 30.4021 mo
244.115 28.4554 242.655 27.4099 241.243 26.3989 cv
241.15 26.3325 241.059 26.2664 240.968 26.2003 cv
240.968 21.5818 li
241.905 21.7825 242.125 22.533 242.125 23.1805 cv
242.125 23.4346 li
244.089 23.4346 li
244.089 23.317 li
244.089 21.0385 242.507 20.3553 240.968 20.2277 cv
240.968 18.8638 li
239.726 18.8638 li
239.726 20.2299 li
238.201 20.3684 236.652 21.0637 236.652 23.317 cv
236.652 25.2631 238.112 26.3086 239.524 27.3195 cv
239.726 27.4648 li
239.726 32.1148 li
238.769 31.9128 238.544 31.1751 238.544 30.5379 cv
238.544 29.8751 li
236.578 29.8751 li
236.578 30.4021 li
236.578 32.6711 238.17 33.3584 239.726 33.49 cv
239.726 34.5441 li
240.968 34.5441 li
240.968 33.49 li
242.523 33.359 244.115 32.6721 244.115 30.4021 cv
cp
0 .631373 .603922 rgb
f
259.563 61.0196 mo
254.72 38.9078 li
254.485 37.8364 253.426 36.9679 252.355 36.9679 cv
222.893 36.9679 li
221.822 36.9679 221.144 37.8364 221.378 38.9078 cv
226.222 61.0196 li
226.457 62.091 227.515 62.9596 228.587 62.9596 cv
258.048 62.9596 li
259.12 62.9596 259.798 62.091 259.563 61.0196 cv
cp
.235294 .235294 .231373 rgb
f
257.007 62.9596 mo
227.546 62.9596 li
226.475 62.9596 225.416 62.091 225.181 61.0197 cv
220.337 38.9078 li
220.103 37.8364 220.781 36.9679 221.852 36.9679 cv
251.314 36.9679 li
252.385 36.9679 253.444 37.8364 253.679 38.9078 cv
258.522 61.0197 li
258.757 62.091 258.079 62.9596 257.007 62.9596 cv
cp
.341176 .341176 .337255 rgb
f
240.699 49.9637 mo
240.94 51.0613 240.245 51.951 239.148 51.951 cv
238.05 51.951 236.965 51.0613 236.725 49.9637 cv
236.485 48.8662 237.179 47.9765 238.277 47.9765 cv
239.374 47.9765 240.459 48.8662 240.699 49.9637 cv
cp
.870588 .964706 1 rgb
f
278.031 64.8837 mo
270.035 64.8837 li
229.391 64.8837 li
229.391 62.9596 li
278.031 62.9596 li
278.031 64.8837 li
cp
.341176 .341176 .337255 rgb
f
259.483 62.9596 mo
229.391 62.9596 li
229.391 64.8837 li
259.483 64.8837 li
259.483 62.9596 li
cp
.235294 .235294 .231373 rgb
f
304.717 53.7174 mo
292.036 53.1496 li
282.668 56.7597 li
284.75 64.8837 li
303.96 64.8837 li
306.538 63.4532 306.496 59.4409 304.717 53.7174 cv
.835294 .92549 .960784 rgb
f
268.915 40.5954 mo
265.75 40.3898 li
264.467 34.1606 li
269.767 34.1606 li
268.915 40.5954 li
cp
.913725 .305882 .105882 rgb
f
266.707 34.129 mo
262.228 39.6806 li
260.261 32.4257 li
263.484 29.1452 li
263.309 31.2586 264.458 33.5171 266.707 34.129 cv
cp
.870588 .964706 1 rgb
f
266.707 34.129 mo
273.079 39.6806 li
281.39 28.5143 li
276.776 25.1707 li
276.43 28.3149 270.866 34.1392 266.707 34.129 cv
cp
f
256.515 21.2594 mo
257.689 23.7837 260.678 30.0124 262.915 30.4505 cv
264.707 30.8014 266.237 30.5319 267.805 29.5944 cv
269.372 28.6569 270.487 27.1119 271.319 25.4862 cv
272.122 23.9149 272.96 23.1925 273.061 21.4305 cv
273.156 19.7741 272.823 18.1263 272.492 16.5005 cv
272.113 14.6357 271.733 12.7709 271.354 10.9061 cv
271.068 9.50253 270.76 8.04766 269.9 6.90213 cv
269.016 5.72388 267.613 4.99833 266.16 4.75123 cv
264.708 4.50412 257.898 4.72206 254.239 8.8944 cv
252.134 11.2947 252.572 12.7851 256.515 21.2594 cv
cp
1 .823529 .631373 rgb
f
271.913 8.89333 mo
271.385 7.25234 270.361 5.69906 268.83 4.90697 cv
267.733 4.33903 266.465 4.2012 265.23 4.16488 cv
263.432 4.11202 257.04 4.83706 255.272 5.16978 cv
255.272 10.1033 li
261.439 9.5568 268.008 6.44901 270.39 15.8465 cv
271.037 15.5102 271.969 14.9692 272.617 14.6329 cv
272.53 12.9114 272.44 10.5343 271.913 8.89333 cv
cp
.235294 .235294 .231373 rgb
f
274.394 13.2142 mo
274.582 15.471 274.104 17.3106 273.234 17.6159 cv
272.363 17.9213 271.372 15.3092 271.148 13.4747 cv
270.923 11.6403 271.397 10.6071 272.41 10.4455 cv
273.315 10.3014 274.241 11.3709 274.394 13.2142 cv
cp
1 .823529 .631373 rgb
f
267.805 9.2702 mo
265.45 8.30919 263.643 6.72409 261.109 6.50586 cv
260.967 6.49363 255.146 7.69806 255.004 7.78343 cv
253.192 8.87101 253.041 9.01374 252.718 11.1024 cv
256.455 16.4332 263.738 13.6093 265.213 13.2321 cv
264.785 13.1011 264.358 12.9701 263.931 12.8391 cv
267.48 11.2286 268.284 10.1073 267.805 9.2702 cv
cp
.235294 .235294 .231373 rgb
f
278.031 57.6107 mo
278.037 57.6074 278.044 57.6041 278.05 57.6008 cv
278.051 57.6018 278.051 57.6029 278.051 57.6039 cv
278.044 57.6062 278.038 57.6084 278.031 57.6107 cv
.909804 .752941 .576471 rgb
f
278.226 57.5175 mo
279.784 56.8211 286.059 54.7723 286.707 52.7536 cv
286.905 52.1377 286.799 51.4857 286.581 50.8767 cv
285.467 47.7675 284.354 44.6583 283.24 41.5492 cv
284.524 43.9472 285.808 46.3452 287.091 48.7431 cv
287.656 49.7986 288.247 50.8858 289.19 51.6239 cv
290.199 52.4142 292.146 52.7274 293.983 53.2367 cv
292.036 53.1496 li
288.964 54.3335 li
287.927 54.6524 286.852 55.1168 285.824 55.5435 cv
284.036 56.2325 li
284.036 56.2325 284.036 56.2325 284.036 56.2325 cv
282.342 56.7981 280.222 56.9718 278.463 57.4771 cv
278.226 57.5175 li
.760784 .843137 .87451 rgb
f
278.051 57.6039 mo
278.051 57.6029 278.051 57.6018 278.05 57.6008 cv
278.099 57.5756 278.158 57.5478 278.226 57.5175 cv
278.463 57.4771 li
278.323 57.5172 278.186 57.5593 278.051 57.6039 cv
.792157 .878431 .909804 rgb
f
284.036 56.2325 mo
285.824 55.5435 li
285.205 55.8001 284.603 56.0431 284.036 56.2325 cv
297.809 55.4207 mo
296.275 54.2502 294.083 53.8734 292.222 53.8734 cv
291.549 53.8734 290.92 53.9226 290.38 54.0013 cv
289.922 54.068 289.447 54.185 288.964 54.3335 cv
292.036 53.1496 li
293.983 53.2367 li
295.565 53.6756 297.064 54.2601 297.809 55.4207 cv
.760784 .843137 .87451 rgb
f
228.604 19.1827 mo
229.212 19.1827 229.791 19.4275 230.28 19.8908 cv
230.37 19.9757 li
230.472 19.9057 li
230.767 19.7034 231.059 19.5115 231.343 19.3241 cv
231.552 19.1869 li
231.441 19.0554 li
230.675 18.1429 229.668 17.6404 228.604 17.6404 cv
226.776 17.6404 225.224 19.1281 224.7 21.1736 cv
223.465 21.1736 li
223.465 22.2904 li
224.527 22.2904 li
224.519 22.4228 224.511 22.5555 224.511 22.6905 cv
224.511 22.8256 224.519 22.9583 224.527 23.0907 cv
223.465 23.0907 li
223.465 24.2075 li
224.7 24.2075 li
225.224 26.253 226.776 27.7406 228.604 27.7406 cv
229.497 27.7406 230.348 27.3879 231.065 26.7208 cv
231.185 26.6084 li
231.064 26.4966 li
230.745 26.2001 230.455 25.9493 230.18 25.7297 cv
230.089 25.6573 li
229.995 25.7258 li
229.569 26.0348 229.088 26.1983 228.604 26.1983 cv
227.497 26.1983 226.542 25.3831 226.09 24.2075 cv
229.535 24.2075 li
229.535 23.0907 li
225.831 23.0907 li
225.819 22.9591 225.812 22.826 225.812 22.6905 cv
225.812 22.555 225.819 22.4219 225.831 22.2904 cv
229.535 22.2904 li
229.535 21.1736 li
226.09 21.1736 li
226.542 19.9979 227.497 19.1827 228.604 19.1827 cv
cp
0 .631373 .603922 rgb
f
240.232 13.9435 mo
240.232 14.0693 240.176 14.1759 240.063 14.2623 cv
239.951 14.3488 239.813 14.3922 239.65 14.3922 cv
239.487 14.3922 239.349 14.3488 239.237 14.2623 cv
239.124 14.1759 239.068 14.0693 239.068 13.9435 cv
239.068 11.1245 li
239.068 10.9982 239.124 10.8921 239.237 10.8057 cv
239.349 10.7188 239.487 10.6754 239.65 10.6754 cv
239.813 10.6754 239.951 10.7188 240.063 10.8057 cv
240.176 10.8921 240.232 10.9982 240.232 11.1245 cv
240.232 13.9435 li
cp
240.808 10.2701 mo
240.499 10.026 240.123 9.90378 239.68 9.90378 cv
239.238 9.90378 238.86 10.0248 238.548 10.2661 cv
238.235 10.5077 238.078 10.7988 238.078 11.1402 cv
238.078 13.9592 li
238.078 14.2953 238.235 14.5824 238.548 14.8212 cv
238.86 15.0605 239.238 15.1799 239.68 15.1799 cv
240.116 15.1799 240.49 15.0617 240.803 14.8252 cv
241.116 14.5892 241.273 14.3005 241.273 13.9592 cv
241.273 11.1402 li
241.273 10.804 241.118 10.5141 240.808 10.2701 cv
cp
f
233.552 9.19131 mo
233.439 9.10446 233.383 8.99831 233.383 8.87246 cv
233.383 6.05348 li
233.383 5.92723 233.439 5.82109 233.552 5.73422 cv
233.664 5.64777 233.802 5.60436 233.965 5.60436 cv
234.128 5.60436 234.266 5.64777 234.378 5.73422 cv
234.491 5.82109 234.547 5.92723 234.547 6.05348 cv
234.547 8.87246 li
234.547 8.99831 234.491 9.10446 234.378 9.19131 cv
234.266 9.27776 234.128 9.32117 233.965 9.32117 cv
233.802 9.32117 233.664 9.27776 233.552 9.19131 cv
cp
235.123 9.75421 mo
235.44 9.51297 235.598 9.22388 235.598 8.88813 cv
235.598 6.06917 li
235.598 5.73302 235.441 5.44313 235.128 5.19907 cv
234.815 4.95501 234.438 4.83277 233.996 4.83277 cv
233.553 4.83277 233.176 4.95339 232.863 5.19505 cv
232.55 5.4367 232.393 5.7278 232.393 6.06917 cv
232.393 8.88813 li
232.393 9.22388 232.55 9.51297 232.863 9.75421 cv
233.176 9.99587 233.553 10.1165 233.996 10.1165 cv
234.431 10.1165 234.807 9.99587 235.123 9.75421 cv
cp
f
239.539 4.85649 mo
233.005 15.2977 li
234.138 15.2977 li
240.66 4.85649 li
239.539 4.85649 li
cp
f
134.921 132.091 mo
134.713 134.814 133.72 137.152 132.878 139.88 cv
132.798 140.121 132.726 140.366 132.654 140.616 cv
131.521 144.519 128.81 152.701 128.81 152.701 cv
128.81 152.701 128.591 167.196 128.421 177.18 cv
116.975 177.18 li
116.619 168.376 115.939 155.813 116.636 151.821 cv
117.939 144.345 119.854 136.679 121.533 129.025 cv
122.019 126.818 123.482 124.462 125.178 123.08 cv
125.66 122.682 126.163 122.407 126.671 122.238 cv
126.709 122.225 li
128.54 121.638 130.46 122.424 131.978 124.094 cv
133.931 126.238 135.149 129.122 134.921 132.091 cv
.388235 .305882 .258824 rgb
f
127.377 177.18 mo
124.091 177.18 li
123.474 154.874 li
125.656 136.894 li
127.377 177.18 li
.333333 .266667 .227451 rgb
f
150.861 114.649 mo
154.5 114.649 li
154.5 118.135 li
150.614 117.416 li
150.861 114.649 li
cp
.921569 .713726 .466667 rgb
f
277.19 177.321 mo
277.19 173.704 li
243.397 173.704 li
243.397 177.321 li
277.19 177.321 li
.235294 .235294 .231373 rgb
f
274.654 123.405 mo
274.654 173.704 li
243.397 173.704 li
241.206 173.341 240.026 170.131 239.426 165.319 cv
238.99 161.843 238.859 157.53 238.872 152.845 cv
238.872 152.832 li
238.897 143.631 239.468 132.987 239.379 124.403 cv
240.073 123.972 li
244.758 121.037 li
263.004 118.086 li
274.654 123.405 li
.835294 .92549 .960784 rgb
f
260.138 116.037 mo
259.005 104.565 li
254.109 105.143 247.547 105.802 246.383 105.717 cv
246.383 105.717 247.14 114.064 247.153 117.677 cv
246.383 127.071 257.245 126.719 260.138 116.037 cv
cp
.94902 .780392 .6 rgb
f
260.831 106.44 mo
261.735 104.176 261.718 103.189 261.782 100.722 cv
261.386 89.4866 254.952 91.0787 250.786 91.0944 cv
245.919 91.3255 241.327 94.6306 241.095 102.11 cv
241.343 102.843 241.64 103.444 241.64 103.444 cv
240.051 107.628 li
239.79 108.317 240.201 109.078 240.922 109.236 cv
241.998 109.526 li
242.021 110.28 241.941 113.51 241.941 113.51 cv
242.016 115.413 242.851 118.375 245.387 118.135 cv
252.688 117.435 255.454 114.014 254.915 107.587 cv
256.691 107.371 260.168 108.101 260.831 106.44 cv
cp
1 .823529 .631373 rgb
f
259.611 111.515 mo
253.835 113.096 256.264 104.498 256.264 104.498 cv
256.264 104.498 254.688 106.23 254.076 106.997 cv
252.842 106.986 252.72 107.146 251.603 107.063 cv
251.191 99.685 252.969 94.0682 242.446 96.3257 cv
240.371 95.9748 239.174 89.4267 251.896 89.7459 cv
257.519 89.8871 261.915 92.9582 262.939 98.4893 cv
263.936 103.875 264.009 110.064 259.611 111.515 cv
cp
.388235 .305882 .258824 rgb
f
257.552 104.611 mo
257.552 106.371 256.067 108.404 254.915 108.404 cv
253.764 108.404 253.668 106.925 253.65 105.165 cv
253.638 104 253.567 102.396 254.829 102.028 cv
255.934 101.706 257.552 102.028 257.552 104.611 cv
cp
.976471 .768627 .517647 rgb
f
251.869 128.796 mo
248.905 128.49 li
247.924 122.596 li
252.898 122.786 li
251.869 128.796 li
cp
.913725 .305882 .105882 rgb
f
250.027 122.646 mo
245.94 127.335 li
245.317 124.486 244.5 122.144 244.824 120.411 cv
247.18 117.852 li
246.94 119.83 247.938 121.992 250.027 122.646 cv
cp
.870588 .964706 1 rgb
f
250.027 122.646 mo
255.078 128.49 li
258.525 125.104 262.106 121.345 263.007 118.086 cv
260.016 114.806 li
260.02 117.742 253.931 122.805 250.027 122.646 cv
cp
f
244.75 162.642 mo
244.513 162.913 244.128 163.205 243.621 163.505 cv
242.627 164.093 241.164 164.718 239.426 165.319 cv
234.901 166.879 228.508 168.258 223.611 168.287 cv
222.791 168.296 222.017 168.262 221.298 168.186 cv
220.385 165.645 219.336 162.608 218.833 159.902 cv
222.698 158.735 232.635 153.572 233.776 152.126 cv
234.842 150.777 233.781 138.049 234.128 134.611 cv
234.39 132.065 235.062 129.824 236.322 127.596 cv
237.193 126.061 238.517 124.796 240.073 123.972 cv
240.914 123.515 241.828 123.194 242.766 123.025 cv
242.974 134.975 244.542 150.688 244.75 162.642 cv
.835294 .92549 .960784 rgb
f
213.669 172.826 mo
213.602 172.776 li
213.428 172.64 li
214.422 174.065 212.625 175.808 211.267 174.488 cv
212.202 175.63 211.001 177.52 209.263 176.205 cv
209.06 176.057 li
209.61 176.636 208.625 178.417 206.823 177.144 cv
200.764 172.852 li
200.214 172.513 199.74 172.065 199.381 171.532 cv
198.061 169.591 li
194.137 168.896 li
196.038 161.217 li
201.136 162.872 li
204.159 162.179 li
204.535 162.09 204.933 162.098 205.309 162.2 cv
207.271 162.724 li
207.254 162.784 li
206.772 164.479 li
206.54 166.251 li
206.912 165.955 li
207.931 165.143 li
208.62 165.655 li
209.999 166.686 li
212.337 168.424 li
212.439 168.462 213.073 168.961 213.166 169.029 cv
214.802 170.26 li
215.39 170.771 li
215.53 170.902 li
216.494 171.943 215.145 173.816 213.669 172.826 cv
cp
.94902 .780392 .6 rgb
f
201.662 171.163 mo
202.263 170.844 202.491 170.099 202.172 169.499 cv
202.066 169.299 li
201.913 169.011 201.651 168.795 201.339 168.699 cv
201.027 168.604 200.69 168.636 200.402 168.789 cv
198.204 169.957 li
197.643 170.255 197.43 170.95 197.728 171.511 cv
197.946 171.922 li
198.224 172.445 198.874 172.644 199.397 172.366 cv
201.662 171.163 li
cp
1 .811765 .623529 rgb
f
203.891 173.008 mo
204.184 172.858 204.405 172.596 204.504 172.282 cv
204.603 171.967 204.572 171.626 204.417 171.335 cv
204.311 171.136 li
203.996 170.542 203.262 170.311 202.664 170.617 cv
199.869 172.048 li
199.595 172.188 199.389 172.432 199.296 172.726 cv
199.204 173.02 199.233 173.338 199.378 173.61 cv
199.595 174.02 li
199.87 174.537 200.51 174.738 201.031 174.471 cv
203.891 173.008 li
cp
f
205.658 175.094 mo
206.268 174.77 206.5 174.013 206.176 173.403 cv
206.068 173.2 li
205.912 172.907 205.647 172.688 205.33 172.59 cv
205.012 172.493 204.67 172.526 204.377 172.682 cv
202.142 173.869 li
201.573 174.171 201.356 174.878 201.659 175.448 cv
201.881 175.866 li
202.017 176.122 202.248 176.313 202.525 176.397 cv
202.801 176.482 203.1 176.453 203.355 176.318 cv
205.658 175.094 li
cp
f
207.482 176.589 mo
207.951 176.341 208.113 175.73 207.845 175.226 cv
207.756 175.058 li
207.488 174.554 206.892 174.347 206.423 174.596 cv
204.707 175.507 li
204.27 175.74 204.118 176.31 204.368 176.78 cv
204.552 177.126 li
204.785 177.566 205.305 177.746 205.714 177.529 cv
207.482 176.589 li
cp
f
216.493 160.87 mo
212.838 161.658 li
212.838 161.658 209.864 162.001 209.5 162.111 cv
207.254 162.784 li
205.791 163.219 li
205.483 163.312 205.242 163.54 205.132 163.841 cv
203.787 167.57 li
203.614 168.04 203.855 168.56 204.324 168.737 cv
204.599 168.843 li
205.081 169.025 205.614 169.008 206.079 168.797 cv
206.548 168.581 206.908 168.192 207.085 167.71 cv
207.593 166.323 li
207.677 166.09 207.859 165.913 208.087 165.832 cv
208.561 165.672 li
208.62 165.655 li
215.53 170.902 li
215.855 169.168 li
219.083 168.004 li
216.493 160.87 li
cp
f
221.298 168.184 mo
218.833 159.9 li
214.053 161.323 li
216.519 169.606 li
221.298 168.184 li
cp
.870588 .964706 1 rgb
f
251.748 177.321 mo
251.748 173.704 li
247.389 173.704 li
247.389 177.321 li
251.748 177.321 li
.615686 .615686 .611765 rgb
f
gsave
263.888 173.704 mo
251.748 173.704 li
251.748 173.704 li
247.389 173.704 li
247.389 173.704 li
243.397 173.704 li
241.206 173.341 240.026 170.131 239.426 165.319 cv
241.164 164.718 242.627 164.093 243.621 163.505 cv
243.621 163.505 li
244.513 165.163 245.625 166.6 247.388 167.382 cv
250.002 168.541 255.135 169.987 257.951 170.482 cv
257.806 170.485 257.646 170.487 257.473 170.487 cv
256.332 170.487 254.63 170.417 252.868 170.347 cv
251.108 170.278 249.288 170.208 247.912 170.208 cv
246.546 170.208 245.618 170.276 245.616 170.482 cv
247.401 171.738 256.581 172.355 263.888 173.704 cv
clp
239.426 163.505 mo
263.888 163.505 li
263.888 173.704 li
239.426 173.704 li
cp
.8 .882353 .917647 rgb
f
grestore
223.611 168.287 mo
226.25 167.471 229.73 167.095 232.102 166.144 cv
233.925 165.412 236.039 164.304 236.174 162.346 cv
236.318 160.3 233.776 160.266 232.373 157.978 cv
232.894 158.512 233.821 158.782 234.727 158.782 cv
235.429 158.782 236.119 158.62 236.597 158.291 cv
237.692 157.543 238.356 156.574 238.568 155.263 cv
238.618 154.955 238.724 154.117 238.872 152.845 cv
238.872 152.832 li
239.362 148.675 240.051 142.821 240.8 133.125 cv
240.901 140.998 241.231 145.999 241.333 153.868 cv
241.367 156.299 241.413 158.811 242.42 161.023 cv
242.805 161.868 243.185 162.714 243.621 163.505 cv
242.627 164.093 241.164 164.718 239.426 165.319 cv
239.426 165.319 li
234.901 166.879 228.508 168.258 223.611 168.287 cv
.8 .882353 .917647 rgb
f
251.748 173.704 mo
247.389 173.704 li
247.389 173.704 li
251.748 173.704 li
251.748 173.704 li
.588235 .588235 .584314 rgb
f
274.654 173.704 mo
266.941 173.704 li
268.831 172.998 270.464 172.25 271.056 171.323 cv
269.305 171.51 267.554 171.7 265.804 171.886 cv
267.673 171.535 269.39 170.44 270.498 168.892 cv
268.132 170.019 265.513 170.599 262.894 170.6 cv
262.063 170.6 261.232 170.541 260.408 170.423 cv
264.045 169.97 267.381 167.577 268.971 164.279 cv
270.438 161.243 270.434 157.686 269.817 154.367 cv
269.199 151.052 269.089 148.172 268.265 144.903 cv
267.444 141.63 266.239 136.311 266.265 132.074 cv
268.51 138.933 271.517 148.252 273.36 155.225 cv
273.842 157.048 274.278 158.883 274.654 160.731 cv
274.654 173.704 li
.8 .882353 .917647 rgb
f
268.534 141.942 mo
269.665 145.845 272.375 154.028 272.375 154.028 cv
272.375 154.028 272.728 169.322 272.884 177.321 cv
284.028 177.321 li
284.038 170.227 285.455 158.328 284.552 153.148 cv
283.248 145.67 281.335 138.001 279.654 130.349 cv
279.17 128.144 277.704 125.789 276.009 124.404 cv
273.78 122.583 271.162 123.272 269.209 125.418 cv
267.256 127.563 266.04 130.448 266.265 133.414 cv
266.489 136.381 267.65 138.892 268.534 141.942 cv
cp
.835294 .92549 .960784 rgb
f
139.749 116.037 mo
140.882 104.565 li
145.778 105.143 152.34 105.802 153.504 105.717 cv
153.504 105.717 152.747 114.064 152.734 117.677 cv
153.504 127.071 142.642 126.719 139.749 116.037 cv
cp
.94902 .780392 .6 rgb
f
139.056 106.44 mo
138.152 104.176 138.169 103.189 138.105 100.722 cv
138.501 89.4866 144.935 91.0787 149.101 91.0944 cv
153.968 91.3255 158.56 94.6306 158.792 102.11 cv
158.544 102.843 158.247 103.444 158.247 103.444 cv
159.836 107.628 li
160.097 108.317 159.686 109.078 158.966 109.236 cv
157.889 109.526 li
157.866 110.28 157.946 113.51 157.946 113.51 cv
157.871 115.413 157.036 118.375 154.5 118.135 cv
153.504 117.819 151.28 115.76 150.985 109.004 cv
149.209 108.787 139.719 108.101 139.056 106.44 cv
cp
1 .823529 .631373 rgb
f
140.276 111.515 mo
153.152 115.02 150.626 108.521 150.967 107.197 cv
151.025 106.784 153.101 107.169 153.152 106.774 cv
154.015 100.008 151.953 95.5156 157.441 96.3257 cv
159.516 95.9748 160.714 89.4267 147.991 89.7459 cv
142.368 89.8871 137.972 92.9582 136.948 98.4893 cv
135.951 103.875 138.105 110.439 140.276 111.515 cv
cp
.341176 .341176 .337255 rgb
f
148.317 105.932 mo
148.317 107.693 149.443 109.726 150.317 109.726 cv
151.19 109.726 151.263 108.247 151.277 106.486 cv
151.286 105.322 151.34 103.718 150.382 103.35 cv
149.544 103.028 148.317 103.35 148.317 105.932 cv
cp
1 .823529 .631373 rgb
f
196.917 171.883 mo
193.64 170.902 li
196.146 160.783 li
199.666 162.118 li
196.917 171.883 li
cp
.929412 .929412 .929412 rgb
f
196.146 160.782 mo
193.398 171.882 li
193.398 171.882 175.786 166.528 169.333 164.456 cv
167.866 163.983 166.694 162.883 166.136 161.45 cv
165.185 159.031 li
165.164 165.97 165.126 172.508 165.087 177.18 cv
127.377 177.18 li
125.656 136.894 li
125.643 136.586 li
126.671 122.238 li
126.709 122.225 li
138.105 117.769 li
153.15 119.109 li
160.233 121.765 li
163.24 122.894 165.603 125.283 166.703 128.302 cv
174.851 150.709 li
175.363 152.126 176.479 153.242 177.896 153.754 cv
184.983 156.312 196.146 160.782 196.146 160.782 cv
.388235 .305882 .258824 rgb
f
151.526 116.723 mo
148.265 115.56 140.748 114.949 139.421 115.271 cv
138.105 117.769 li
138.749 119.396 146.65 120.586 153.152 119.108 cv
152.996 118.393 li
152.827 117.619 152.272 116.989 151.526 116.723 cv
cp
.34902 .27451 .235294 rgb
f
165.087 177.18 mo
157.882 177.18 li
161.472 175.878 162.322 171.945 160.893 160.782 cv
157.239 139.262 li
165.185 159.031 li
165.164 165.97 165.126 172.508 165.087 177.18 cv
.333333 .266667 .227451 rgb
f
143.144 171.883 mo
139.532 159.231 138.568 139.941 140.953 127.001 cv
142.577 139.934 141.52 158.951 143.144 171.883 cv
f
251.869 128.796 mo
248.905 128.49 li
247.389 155.693 li
250.411 160.443 li
253.645 156.61 li
251.869 128.796 li
cp
.811765 .270588 .0941176 rgb
f
373.503 120.712 mo
356.286 120.712 li
354.038 120.712 352.216 118.89 352.216 116.642 cv
352.216 107.386 li
352.216 105.138 354.038 103.316 356.286 103.316 cv
373.503 103.316 li
375.75 103.316 377.573 105.138 377.573 107.386 cv
377.573 116.642 li
377.573 118.89 375.75 120.712 373.503 120.712 cv
cp
.235294 .235294 .231373 rgb
f
364.894 158.002 mo
363.237 158.002 361.894 156.659 361.894 155.002 cv
361.894 112.91 li
361.894 111.253 363.237 109.91 364.894 109.91 cv
366.551 109.91 367.894 111.253 367.894 112.91 cv
367.894 155.002 li
367.894 156.659 366.551 158.002 364.894 158.002 cv
.278431 .278431 .278431 rgb
f
375.046 108.092 mo
375.046 108.901 374.39 109.557 373.581 109.557 cv
372.772 109.557 372.116 108.901 372.116 108.092 cv
372.116 107.283 372.772 106.627 373.581 106.627 cv
374.39 106.627 375.046 107.283 375.046 108.092 cv
cp
.341176 .341176 .337255 rgb
f
357.962 108.092 mo
357.962 108.901 357.306 109.557 356.497 109.557 cv
355.688 109.557 355.032 108.901 355.032 108.092 cv
355.032 107.283 355.688 106.627 356.497 106.627 cv
357.306 106.627 357.962 107.283 357.962 108.092 cv
cp
f
322.755 169.515 mo
322.755 115.306 li
402.165 115.306 li
402.165 169.515 li
322.755 169.515 li
.235294 .235294 .231373 rgb
f
320.636 169.515 mo
320.636 115.306 li
398.766 115.306 li
398.766 169.515 li
320.636 169.515 li
.341176 .341176 .337255 rgb
f
395.383 118.686 mo
395.383 165.17 li
324.021 165.17 li
324.021 118.686 li
395.383 118.686 li
0 .501961 .478431 rgb
f
395.383 118.686 mo
395.383 165.17 li
325.424 165.17 li
325.424 118.686 li
395.383 118.686 li
0 .631373 .603922 rgb
f
330.128 168.303 mo
326.64 168.303 li
326.64 166.718 li
330.128 166.718 li
330.128 168.303 li
cp
1 .733333 0 rgb
f
332.121 163.599 mo
327.348 163.599 li
327.348 159.794 li
332.121 159.794 li
332.121 163.599 li
.2 .705882 .682353 rgb
f
338.314 163.599 mo
333.54 163.599 li
333.54 156.27 li
338.314 156.27 li
338.314 163.599 li
f
344.506 163.599 mo
339.732 163.599 li
339.732 158.737 li
344.506 158.737 li
344.506 163.599 li
f
350.698 163.599 mo
345.924 163.599 li
345.924 155.002 li
350.698 155.002 li
350.698 163.599 li
f
356.89 163.599 mo
352.116 163.599 li
352.116 153.875 li
356.89 153.875 li
356.89 163.599 li
f
363.082 163.599 mo
358.309 163.599 li
358.309 160.78 li
363.082 160.78 li
363.082 163.599 li
f
369.274 163.599 mo
364.501 163.599 li
364.501 157.398 li
369.274 157.398 li
369.274 163.599 li
f
375.467 163.599 mo
370.693 163.599 li
370.693 155.002 li
375.467 155.002 li
375.467 163.599 li
f
381.659 163.599 mo
376.885 163.599 li
376.885 157.398 li
381.659 157.398 li
381.659 163.599 li
f
387.851 163.599 mo
383.077 163.599 li
383.077 157.398 li
387.851 157.398 li
387.851 163.599 li
f
394.043 163.599 mo
389.269 163.599 li
389.269 159.935 li
394.043 159.935 li
394.043 163.599 li
f
342.603 134.214 mo
330.219 134.214 li
330.219 131.993 li
342.603 131.993 li
342.603 134.214 li
cp
1 1 1 rgb
f
358.793 134.214 mo
346.408 134.214 li
346.408 131.993 li
358.793 131.993 li
358.793 134.214 li
cp
f
374.982 134.214 mo
362.598 134.214 li
362.598 131.993 li
374.982 131.993 li
374.982 134.214 li
cp
f
391.172 134.214 mo
378.788 134.214 li
378.788 131.993 li
391.172 131.993 li
391.172 134.214 li
cp
f
342.603 138.616 mo
330.219 138.616 li
330.219 136.395 li
342.603 136.395 li
342.603 138.616 li
cp
.811765 .270588 .0941176 rgb
f
358.793 138.616 mo
346.408 138.616 li
346.408 136.395 li
358.793 136.395 li
358.793 138.616 li
cp
1 1 1 rgb
f
374.982 138.616 mo
362.598 138.616 li
362.598 136.395 li
374.982 136.395 li
374.982 138.616 li
cp
f
391.172 138.616 mo
378.788 138.616 li
378.788 136.395 li
391.172 136.395 li
391.172 138.616 li
cp
.811765 .270588 .0941176 rgb
f
342.603 143.017 mo
330.219 143.017 li
330.219 140.797 li
342.603 140.797 li
342.603 143.017 li
cp
1 1 1 rgb
f
358.793 143.017 mo
346.408 143.017 li
346.408 140.797 li
358.793 140.797 li
358.793 143.017 li
cp
f
374.982 143.017 mo
362.598 143.017 li
362.598 140.797 li
374.982 140.797 li
374.982 143.017 li
cp
f
391.172 143.017 mo
378.788 143.017 li
378.788 140.797 li
391.172 140.797 li
391.172 143.017 li
cp
f
342.603 147.419 mo
330.219 147.419 li
330.219 145.199 li
342.603 145.199 li
342.603 147.419 li
cp
f
358.793 147.419 mo
346.408 147.419 li
346.408 145.199 li
358.793 145.199 li
358.793 147.419 li
cp
.811765 .270588 .0941176 rgb
f
374.982 147.419 mo
362.598 147.419 li
362.598 145.199 li
374.982 145.199 li
374.982 147.419 li
cp
1 1 1 rgb
f
391.172 147.419 mo
378.788 147.419 li
378.788 145.199 li
391.172 145.199 li
391.172 147.419 li
cp
f
342.603 151.821 mo
330.219 151.821 li
330.219 149.601 li
342.603 149.601 li
342.603 151.821 li
cp
f
358.793 151.821 mo
346.408 151.821 li
346.408 149.601 li
358.793 149.601 li
358.793 151.821 li
cp
f
374.982 151.821 mo
362.598 151.821 li
362.598 149.601 li
374.982 149.601 li
374.982 151.821 li
cp
f
391.172 151.821 mo
378.788 151.821 li
378.788 149.601 li
391.172 149.601 li
391.172 151.821 li
cp
.811765 .270588 .0941176 rgb
f
340.307 129.772 mo
332.515 129.772 li
332.515 126.938 li
340.307 126.938 li
340.307 129.772 li
cp
f
356.497 129.772 mo
348.704 129.772 li
348.704 126.938 li
356.497 126.938 li
356.497 129.772 li
cp
f
363.025 124.654 mo
339.225 124.654 li
339.225 121.82 li
363.025 121.82 li
363.025 124.654 li
cp
1 1 1 rgb
f
381.602 124.654 mo
366.608 124.654 li
366.608 121.82 li
381.602 121.82 li
381.602 124.654 li
cp
f
372.686 129.772 mo
364.894 129.772 li
364.894 126.938 li
372.686 126.938 li
372.686 129.772 li
cp
.811765 .270588 .0941176 rgb
f
388.876 129.772 mo
381.084 129.772 li
381.084 126.938 li
388.876 126.938 li
388.876 129.772 li
cp
f
19.0465 254.147 mo
28.1199 252.948 li
27.2342 246.246 li
28.8455 244.444 29.3518 242.503 28.4596 238.061 cv
27.1795 232.172 li
22.6282 232.586 19.201 232.878 14.2868 233.731 cv
14.9793 238.971 li
12.6454 239.218 li
12.6461 239.223 li
12.7143 239.44 14.0961 244.126 14.2396 244.486 cv
14.7875 245.853 15.9374 246.905 17.3581 247.44 cv
18.1925 247.685 li
19.0465 254.147 li
cp
.94902 .780392 .6 rgb
f
17.7194 238.607 mo
17.8715 239.618 17.1219 240.693 16.1106 240.845 cv
15.7737 240.896 li
15.2881 240.969 14.7933 240.846 14.3982 240.554 cv
14.0031 240.262 13.7401 239.826 13.6671 239.34 cv
11.9607 226.94 li
11.8187 225.996 12.4691 225.115 13.4134 224.973 cv
13.6519 224.929 li
14.5335 224.796 15.3557 225.403 15.4883 226.285 cv
17.7194 238.607 li
cp
f
20.8917 235.472 mo
20.9706 235.962 20.8684 236.462 20.6079 236.859 cv
20.3474 237.257 19.9504 237.52 19.506 237.588 cv
19.2011 237.635 li
18.2946 237.775 17.4378 237.086 17.2769 236.087 cv
16.525 231.423 li
16.4513 230.966 16.5468 230.499 16.79 230.128 cv
17.0333 229.757 17.4039 229.511 17.8189 229.447 cv
18.445 229.351 li
19.2353 229.229 19.9821 229.83 20.1224 230.7 cv
20.8917 235.472 li
cp
1 .823529 .631373 rgb
f
24.4889 235.347 mo
24.6377 236.358 24.0131 237.293 23.0938 237.435 cv
22.7876 237.482 li
22.3461 237.55 21.8943 237.423 21.5315 237.127 cv
21.1688 236.832 20.9249 236.393 20.8534 235.907 cv
20.3082 232.201 li
20.1693 231.256 20.7525 230.383 21.6109 230.251 cv
22.241 230.154 li
22.6259 230.095 23.0197 230.206 23.3359 230.464 cv
23.6521 230.721 23.8647 231.104 23.927 231.527 cv
24.4889 235.347 li
cp
f
27.5753 234.834 mo
27.6909 235.611 27.1392 236.339 26.3432 236.46 cv
26.0782 236.501 li
25.2823 236.622 24.5434 236.09 24.4278 235.314 cv
24.0047 232.468 li
23.8969 231.743 24.412 231.063 25.1552 230.95 cv
25.7007 230.867 li
26.3945 230.761 27.0387 231.225 27.1393 231.902 cv
27.5753 234.834 li
cp
f
22.9383 237.466 mo
13.4465 242.111 li
8.46414 232.955 li
0 223.172 li
10.6719 216.721 li
22.9383 237.466 li
cp
.929412 .929412 .929412 rgb
f
23.4759 250.353 mo
22.936 246.567 li
22.7951 240.757 17.4013 240.459 17.4013 240.459 cv
17.2066 239.84 li
17.1156 239.536 17.1626 239.208 17.3372 238.948 cv
18.3906 237.346 li
18.7576 236.789 18.8827 236.111 18.7455 235.457 cv
18.6089 234.809 18.2173 234.239 17.6557 233.879 cv
17.3285 233.668 li
16.785 233.316 16.0539 233.469 15.6967 234.013 cv
14.5516 235.735 li
12.8514 238.298 li
12.6672 238.571 12.598 238.902 12.6454 239.218 cv
12.6461 239.223 li
12.7143 239.44 14.0961 244.126 14.2396 244.486 cv
14.7875 245.853 15.9374 246.905 17.3581 247.44 cv
18.1925 247.685 li
18.4186 249.61 li
18.4471 249.612 li
23.4759 250.353 li
cp
1 .823529 .631373 rgb
f
16.1154 283.894 mo
34.3533 283.894 li
34.3708 283.766 34.3961 283.639 34.4098 283.511 cv
34.5937 281.815 34.5323 280.105 34.373 278.401 cv
34.2947 277.51 34.184 276.623 34.0669 275.736 cv
33.2303 269.357 31.545 263.478 30.0205 257.222 cv
29.7296 256.016 29.3744 254.325 28.7021 252.874 cv
18.3447 254.243 li
17.8419 257.91 18.4908 262.122 18.5289 266.146 cv
18.5676 269.925 18.5829 273.129 18.1521 276.892 cv
17.8439 279.611 17.1334 281.843 16.1154 283.894 cv
cp
1 .733333 0 rgb
f
27.9782 247.371 mo
17.6179 248.741 li
18.3446 254.24 li
28.7049 252.87 li
27.9782 247.371 li
cp
1 .870588 .509804 rgb
f
27.3661 250.003 mo
27.433 250.509 27.0769 250.974 26.5707 251.041 cv
26.0645 251.107 25.6 250.751 25.5331 250.245 cv
25.4662 249.739 25.8223 249.275 26.3285 249.208 cv
26.8346 249.141 27.2992 249.497 27.3661 250.003 cv
cp
1 1 1 rgb
f
51.109 283.894 mo
51.6601 271.115 li
35.6469 268.252 li
33.201 283.894 li
51.109 283.894 li
.8 .886275 .921569 rgb
f
40.2108 245.588 mo
49.3163 246.512 li
49.9991 239.787 li
51.9824 238.404 52.9223 236.633 53.078 232.105 cv
53.1897 226.079 li
48.6653 225.433 45.2631 224.927 40.2847 224.625 cv
39.7508 229.883 li
37.4229 229.585 li
37.4223 229.591 li
37.4387 229.817 37.7033 234.696 37.7601 235.079 cv
37.978 236.536 38.8547 237.824 40.1137 238.672 cv
40.8691 239.103 li
40.2108 245.588 li
cp
.94902 .780392 .6 rgb
f
42.5011 230.16 mo
42.416 231.179 41.4389 232.053 40.4198 231.967 cv
40.0803 231.939 li
39.5909 231.898 39.1377 231.665 38.8205 231.29 cv
38.5033 230.915 38.3481 230.429 38.3889 229.94 cv
40.7985 212.973 li
40.8779 212.021 41.7137 211.314 42.6653 211.393 cv
42.9076 211.405 li
43.7961 211.48 44.4562 212.26 44.382 213.148 cv
42.5011 230.16 li
cp
f
46.3104 227.841 mo
46.2744 228.336 46.0597 228.799 45.7146 229.126 cv
45.3694 229.452 44.9227 229.616 44.4744 229.581 cv
44.1669 229.556 li
43.2526 229.483 42.5777 228.615 42.6512 227.606 cv
42.9946 222.895 li
43.0283 222.433 43.2287 222.001 43.551 221.695 cv
43.8732 221.39 44.2904 221.237 44.709 221.27 cv
45.3405 221.321 li
46.1375 221.384 46.7258 222.141 46.6617 223.02 cv
46.3104 227.841 li
cp
1 .823529 .631373 rgb
f
49.8397 228.548 mo
49.7514 229.567 48.9281 230.333 48.0009 230.259 cv
47.692 230.234 li
47.2467 230.199 46.8365 229.97 46.5517 229.599 cv
46.2668 229.228 46.1306 228.745 46.173 228.255 cv
46.4966 224.524 li
46.5791 223.572 47.3479 222.857 48.2137 222.926 cv
48.8492 222.977 li
49.2373 223.008 49.5949 223.207 49.8432 223.531 cv
50.0916 223.854 50.2103 224.276 50.1733 224.702 cv
49.8397 228.548 li
cp
f
52.9612 228.761 mo
52.8946 229.543 52.19 230.125 51.3875 230.059 cv
51.1203 230.037 li
50.3179 229.972 49.7214 229.284 49.7879 228.502 cv
50.0321 225.635 li
50.0943 224.905 50.7523 224.362 51.5015 224.423 cv
52.0514 224.468 li
52.7509 224.525 53.271 225.125 53.2128 225.807 cv
52.9612 228.761 li
cp
f
49.9991 239.787 mo
45.7426 239.108 li
46.9447 233.422 41.7647 231.889 41.7647 231.889 cv
41.7178 231.242 li
41.6993 230.925 41.8207 230.617 42.0506 230.404 cv
43.4449 229.088 li
43.9303 228.63 44.2082 228 44.2254 227.332 cv
44.242 226.67 43.9922 226.025 43.5289 225.545 cv
43.259 225.264 li
42.8112 224.797 42.0646 224.777 41.5915 225.224 cv
40.0805 226.636 li
37.8353 228.738 li
37.5932 228.961 37.4496 229.267 37.4229 229.585 cv
37.4223 229.591 li
37.4387 229.817 37.7033 234.696 37.7601 235.079 cv
37.978 236.536 38.8547 237.824 40.1137 238.672 cv
40.8691 239.103 li
40.6456 241.028 li
37.4223 263.904 li
51.0633 266.714 li
49.9991 239.787 li
cp
f
52.3387 272.135 mo
52.5487 273.783 li
51.5497 273.675 li
43.3034 272.759 li
35.3816 269.978 li
34.5227 269.679 li
34.879 267.738 li
35.089 266.599 li
35.4008 263.946 li
35.5471 262.718 li
37.5514 262.979 li
42.5781 263.628 li
51.0534 266.44 li
52.5487 266.937 li
52.3005 268.776 li
52.1351 269.997 li
52.1033 270.245 li
52.256 271.442 li
52.3387 272.135 li
.870588 .964706 1 rgb
f
51.1456 272.176 mo
50.4693 272.176 49.7986 272.111 49.1573 271.893 cv
48.5337 271.677 47.9611 271.327 47.3502 271.079 cv
46.6019 270.77 45.7931 270.611 44.9853 270.611 cv
44.5636 270.611 44.1422 270.654 43.7297 270.742 cv
44.4169 270.462 45.136 270.182 45.8677 270.08 cv
46.0718 270.049 46.2759 270.032 46.48 270.032 cv
46.7022 270.032 46.9244 270.053 47.1466 270.099 cv
47.5412 270.182 47.9101 270.341 48.2728 270.513 cv
48.4765 270.608 48.6736 270.703 48.8709 270.786 cv
49.749 271.162 50.6907 271.384 51.6452 271.429 cv
51.7742 271.441 51.9033 271.445 52.0324 271.445 cv
52.1069 271.445 52.1814 271.444 52.256 271.442 cv
52.3387 272.135 li
52.0969 272.148 51.8551 272.161 51.6134 272.167 cv
51.4574 272.173 51.3013 272.176 51.1456 272.176 cv
.792157 .878431 .909804 rgb
f
52.1351 269.997 mo
51.8233 269.991 51.5115 269.965 51.1997 269.908 cv
50.2517 269.73 49.3863 269.24 48.5465 268.763 cv
49.343 268.939 50.1417 269.112 50.8678 269.112 cv
51.3927 269.112 51.8796 269.021 52.3005 268.776 cv
52.1351 269.997 li
f
39.9661 270.273 mo
39.0817 270.006 37.0082 268.981 36.1731 268.026 cv
35.9941 268.722 36.69 269.776 36.69 269.776 cv
36.69 269.776 35.2186 268.881 34.879 267.738 cv
35.089 266.599 li
35.4008 263.946 li
36.9787 264.442 38.0222 265.628 39.4539 266.456 cv
40.7176 267.186 42.3599 267.715 43.8824 267.715 cv
44.2841 267.715 44.6773 267.678 45.0532 267.598 cv
44.0326 267.92 42.968 268.246 41.9101 268.246 cv
41.6293 268.246 41.349 268.223 41.0701 268.171 cv
40.4911 268.063 39.9503 267.834 39.4093 267.611 cv
38.5122 267.236 36.7521 266.592 35.8549 266.217 cv
36.2176 267.146 37.374 268.361 38.2012 268.921 cv
38.5003 269.125 39.6289 270.14 39.9661 270.273 cv
f
66.1166 260.676 mo
57.0662 259.314 li
58.0722 252.629 li
56.4936 250.798 56.0224 248.849 56.9943 244.423 cv
58.3802 238.558 li
62.9232 239.054 66.3447 239.408 71.2427 240.349 cv
70.456 245.576 li
72.7852 245.864 li
72.7843 245.87 li
72.7123 246.085 71.2464 250.746 71.0964 251.103 cv
70.524 252.46 69.3554 253.491 67.9253 254 cv
67.0866 254.231 li
66.1166 260.676 li
cp
.94902 .780392 .6 rgb
f
67.723 245.162 mo
67.5527 246.171 68.2828 247.259 69.2912 247.429 cv
69.6271 247.486 li
70.1114 247.567 70.6083 247.454 71.0086 247.169 cv
71.4088 246.884 71.6796 246.452 71.7614 245.968 cv
73.6905 233.601 li
73.8495 232.659 73.2151 231.767 72.2735 231.608 cv
72.0358 231.559 li
71.1567 231.411 70.3238 232.003 70.1753 232.882 cv
67.723 245.162 li
cp
f
64.6076 241.971 mo
64.5198 242.459 64.6131 242.961 64.8664 243.363 cv
65.1197 243.765 65.5118 244.035 65.955 244.111 cv
66.2589 244.164 li
67.1628 244.32 68.0318 243.646 68.2107 242.651 cv
69.0463 238.001 li
69.1282 237.545 69.0412 237.077 68.8047 236.701 cv
68.5682 236.326 68.202 236.074 67.7882 236.002 cv
67.1639 235.895 li
66.376 235.759 65.6184 236.346 65.4625 237.214 cv
64.6076 241.971 li
cp
1 .823529 .631373 rgb
f
61.0132 241.781 mo
60.8462 242.79 61.4539 243.736 62.3705 243.894 cv
62.6758 243.947 li
63.116 244.023 63.5701 243.903 63.938 243.614 cv
64.306 243.325 64.5578 242.891 64.638 242.406 cv
65.2498 238.711 li
65.4057 237.769 64.8383 236.886 63.9823 236.738 cv
63.3541 236.629 li
62.9704 236.563 62.5746 236.668 62.2538 236.919 cv
61.933 237.171 61.7135 237.55 61.6436 237.972 cv
61.0132 241.781 li
cp
f
57.9364 241.213 mo
57.807 241.987 58.3454 242.725 59.1391 242.861 cv
59.4034 242.906 li
60.197 243.041 60.9453 242.523 61.0748 241.749 cv
61.549 238.911 li
61.6699 238.188 61.1671 237.499 60.4261 237.373 cv
59.8822 237.28 li
59.1903 237.162 58.5379 237.613 58.4252 238.289 cv
57.9364 241.213 li
cp
f
62.0574 247.382 mo
71.9321 248.743 li
75.8025 246.235 li
77.0119 238.198 li
82.3703 229.396 li
70.4227 222.922 li
67.7882 236.002 li
62.0574 247.382 li
cp
.929412 .929412 .929412 rgb
f
61.4908 258.566 mo
62.364 253.027 li
62.6093 247.22 68.0077 247.019 68.0077 247.019 cv
68.2134 246.405 li
68.31 246.102 68.2689 245.773 68.099 245.51 cv
67.0745 243.889 li
66.7176 243.326 66.6047 242.646 66.7537 241.995 cv
66.9019 241.349 67.3036 240.787 67.8717 240.436 cv
68.2027 240.231 li
68.7524 239.889 69.4805 240.055 69.828 240.606 cv
70.9418 242.348 li
72.5957 244.941 li
72.775 245.217 72.8382 245.549 72.7852 245.864 cv
72.7843 245.87 li
72.7123 246.085 71.2464 250.746 71.0964 251.103 cv
70.524 252.46 69.3554 253.491 67.9253 254 cv
67.0866 254.231 li
66.5607 257.913 li
66.4736 258.222 li
61.4908 258.566 li
cp
1 .823529 .631373 rgb
f
56.8954 256.483 mo
67.2294 258.039 li
66.4039 263.524 li
56.0698 261.968 li
56.8954 256.483 li
cp
.870588 .964706 1 rgb
f
65.7666 283.894 mo
67.1159 263.24 li
55.5772 261.503 li
50.0016 283.894 li
65.7666 283.894 li
cp
.388235 .305882 .258824 rgb
f
56.2692 264.01 mo
56.1987 264.478 56.5214 264.915 56.9901 264.986 cv
57.4588 265.057 57.8959 264.734 57.9664 264.265 cv
58.037 263.796 57.7142 263.359 57.2455 263.289 cv
56.7769 263.218 56.3397 263.541 56.2692 264.01 cv
cp
1 1 1 rgb
f
55.8333 266.906 mo
55.7627 267.375 56.0855 267.812 56.5542 267.882 cv
57.0229 267.953 57.46 267.63 57.5305 267.161 cv
57.6011 266.693 57.2783 266.256 56.8096 266.185 cv
56.3409 266.115 55.9038 266.437 55.8333 266.906 cv
cp
f
55.3974 269.802 mo
55.3268 270.271 55.6496 270.708 56.1183 270.779 cv
56.5869 270.849 57.0241 270.527 57.0946 270.058 cv
57.1651 269.589 56.8424 269.152 56.3737 269.082 cv
55.905 269.011 55.4679 269.334 55.3974 269.802 cv
cp
f
145.796 211.387 mo
137.787 211.344 129.763 214.356 123.62 220.434 cv
117.478 226.511 114.38 234.503 114.337 242.511 cv
114.294 250.519 117.306 258.544 123.384 264.686 cv
145.628 242.678 li
145.796 211.387 li
cp
.913725 .305882 .105882 rgb
f
144.79 212.398 mo
137.073 212.606 129.833 215.694 124.323 221.145 cv
118.572 226.835 115.381 234.425 115.337 242.516 cv
115.296 250.273 118.153 257.6 123.403 263.261 cv
144.631 242.259 li
144.79 212.398 li
cp
123.384 265.686 mo
123.379 265.686 li
123.113 265.685 122.86 265.578 122.673 265.39 cv
116.607 259.258 113.291 251.131 113.337 242.506 cv
113.383 233.88 116.786 225.789 122.917 219.723 cv
129.002 213.703 137.067 210.387 145.627 210.387 cv
145.801 210.387 li
146.353 210.39 146.799 210.84 146.796 211.392 cv
146.628 242.683 li
146.627 242.949 146.52 243.203 146.331 243.389 cv
124.087 265.397 li
123.9 265.582 123.647 265.686 123.384 265.686 cv
cp
1 1 1 rgb
f
176.919 242.846 mo
176.962 234.837 173.95 226.813 167.873 220.67 cv
161.795 214.528 153.804 211.43 145.796 211.387 cv
145.628 242.678 li
176.919 242.846 li
cp
1 .733333 0 rgb
f
146.633 241.683 mo
175.909 241.84 li
175.701 234.122 172.617 226.888 167.162 221.373 cv
161.707 215.86 154.505 212.699 146.79 212.409 cv
146.633 241.683 li
cp
176.92 243.846 mo
176.914 243.846 li
145.623 243.678 li
145.358 243.677 145.104 243.57 144.917 243.381 cv
144.731 243.193 144.627 242.938 144.628 242.673 cv
144.796 211.382 li
144.797 211.117 144.904 210.863 145.092 210.676 cv
145.28 210.49 145.523 210.368 145.801 210.387 cv
154.426 210.433 162.518 213.835 168.584 219.967 cv
174.65 226.099 177.966 234.225 177.92 242.851 cv
177.918 243.116 177.812 243.37 177.623 243.557 cv
177.436 243.742 177.183 243.846 176.92 243.846 cv
cp
1 1 1 rgb
f
145.628 242.678 mo
167.636 264.923 li
173.779 258.845 176.877 250.854 176.919 242.846 cv
145.628 242.678 li
cp
.388235 .305882 .258824 rgb
f
148.037 243.691 mo
167.633 263.497 li
172.714 258.135 175.621 251.223 175.898 243.84 cv
148.037 243.691 li
cp
167.636 265.923 mo
167.379 265.923 167.121 265.824 166.925 265.626 cv
144.917 243.381 li
144.633 243.094 144.55 242.663 144.706 242.29 cv
144.863 241.919 145.226 241.678 145.628 241.678 cv
145.633 241.678 li
176.925 241.846 li
177.19 241.847 177.444 241.953 177.631 242.142 cv
177.817 242.331 177.921 242.586 177.92 242.851 cv
177.873 251.476 174.471 259.568 168.34 265.634 cv
168.145 265.827 167.89 265.923 167.636 265.923 cv
cp
1 1 1 rgb
f
123.384 264.686 mo
129.461 270.829 137.453 273.927 145.461 273.969 cv
153.469 274.012 161.494 271 167.636 264.923 cv
145.628 242.678 li
123.384 264.686 li
cp
0 .631373 .603922 rgb
f
124.81 264.682 mo
130.413 269.993 137.71 272.928 145.467 272.97 cv
145.63 272.97 li
153.324 272.97 160.594 270.113 166.211 264.904 cv
145.621 244.092 li
124.81 264.682 li
cp
145.631 274.97 mo
145.63 274.97 li
145.456 274.97 li
136.83 274.923 128.739 271.521 122.673 265.39 cv
122.285 264.997 122.288 264.364 122.681 263.975 cv
144.925 241.967 li
145.113 241.781 145.324 241.654 145.633 241.678 cv
145.899 241.68 146.153 241.786 146.339 241.975 cv
168.347 264.22 li
168.534 264.408 168.638 264.663 168.636 264.928 cv
168.635 265.193 168.529 265.447 168.34 265.634 cv
162.255 271.654 154.189 274.97 145.631 274.97 cv
cp
1 1 1 rgb
f
121.93 283.452 mo
115.097 283.452 li
115.097 278.785 li
121.93 278.785 li
121.93 283.452 li
cp
.913725 .305882 .105882 rgb
f
143.118 282.139 mo
124.93 282.139 li
124.93 280.098 li
143.118 280.098 li
143.118 282.139 li
cp
.341176 .341176 .337255 rgb
f
143.118 290.473 mo
124.93 290.473 li
124.93 288.431 li
143.118 288.431 li
143.118 290.473 li
cp
f
121.93 291.785 mo
115.097 291.785 li
115.097 287.119 li
121.93 287.119 li
121.93 291.785 li
cp
0 .631373 .603922 rgb
f
153.764 283.452 mo
146.93 283.452 li
146.93 278.785 li
153.764 278.785 li
153.764 283.452 li
cp
1 .733333 0 rgb
f
176.16 282.139 mo
156.764 282.139 li
156.764 280.098 li
176.16 280.098 li
176.16 282.139 li
cp
.341176 .341176 .337255 rgb
f
176.16 290.473 mo
156.764 290.473 li
156.764 288.431 li
176.16 288.431 li
176.16 290.473 li
cp
f
153.764 291.785 mo
146.93 291.785 li
146.93 287.119 li
153.764 287.119 li
153.764 291.785 li
cp
.388235 .305882 .258824 rgb
f
250.412 224.516 mo
250.39 224.587 li
250.216 225.189 249.823 225.714 249.35 226.126 cv
248.855 226.557 248.276 226.875 247.69 227.166 cv
246.836 227.593 245.932 227.967 244.976 228.032 cv
244.62 228.054 244.257 228.032 243.906 227.948 cv
243.981 227.824 244.053 227.699 244.129 227.574 cv
244.567 226.848 245.021 226.092 245.668 225.563 cv
245.985 225.389 246.303 225.204 246.613 225.011 cv
247.301 224.599 247.966 224.153 248.609 223.673 cv
248.824 223.514 249.044 223.347 249.293 223.249 cv
249.547 223.155 249.845 223.139 250.076 223.276 cv
250.473 223.506 250.53 224.07 250.412 224.516 cv
cp
.94902 .780392 .6 rgb
f
249.686 222.285 mo
249.737 222.943 249.789 223.61 250.016 224.229 cv
250.243 224.849 250.671 225.425 251.279 225.679 cv
251.888 225.933 254.845 225.424 255.215 224.878 cv
253.535 224.747 250.857 224.275 249.686 222.285 cv
cp
.388235 .305882 .258824 rgb
f
290.575 250.373 mo
290.185 251.383 289.433 252.331 288.684 253.148 cv
288.613 253.227 li
284.556 257.621 279.123 261.284 275.41 267.545 cv
275.407 267.545 li
274.666 267.201 273.932 266.724 273.222 266.138 cv
269.982 263.484 267.161 258.709 265.694 255.292 cv
265.607 255.08 li
265.362 254.479 265.176 253.832 265.309 253.205 cv
265.43 252.641 265.732 252.089 266.156 251.67 cv
266.462 251.364 266.836 251.133 267.244 251.023 cv
270.965 250.048 274.223 247.579 277.641 246.309 cv
281.063 245.039 284.046 243.972 287.474 245.213 cv
288.923 245.734 290.378 246.694 290.764 248.184 cv
290.956 248.929 290.854 249.666 290.575 250.373 cv
.835294 .92549 .960784 rgb
f
248.08 253.753 mo
248.058 254.275 247.865 254.8 247.657 255.292 cv
247.574 255.481 247.491 255.674 247.396 255.859 cv
246.148 258.513 244.254 260.853 241.937 262.652 cv
240.833 263.507 239.634 264.24 238.364 264.823 cv
238.009 264.588 237.657 264.35 237.309 264.112 cv
232.727 260.966 228.504 257.311 224.735 253.227 cv
223.96 252.388 223.174 251.413 222.769 250.369 cv
222.762 250.35 li
222.493 249.651 222.395 248.921 222.588 248.184 cv
222.969 246.694 224.429 245.734 225.873 245.213 cv
229.306 243.972 232.285 245.039 235.706 246.309 cv
239.048 247.553 242.243 249.942 245.861 250.959 cv
246.103 251.023 li
247.071 251.277 247.831 252.229 248.039 253.205 cv
248.077 253.386 248.088 253.568 248.08 253.753 cv
f
275.407 267.545 mo
275.407 268.074 275.373 268.603 275.305 269.133 cv
275.271 269.401 275.237 269.681 275.206 269.964 cv
275.131 270.584 275.059 271.238 274.991 271.923 cv
274.639 275.556 274.371 279.972 274.261 283.79 cv
239.616 283.79 li
239.355 278.206 238.591 270.633 238.447 266.993 cv
238.372 265.099 238.791 265.518 237.623 264.513 cv
237.532 264.437 237.434 264.35 237.321 264.252 cv
237.309 264.112 li
237.241 263.223 237.385 262.327 237.684 261.484 cv
237.956 260.724 238.353 260.002 238.833 259.36 cv
239.884 257.957 241.317 256.891 242.833 256.018 cv
244.118 255.28 245.46 254.675 246.844 254.176 cv
247.173 254.052 247.506 253.938 247.842 253.829 cv
248.08 253.753 li
249.026 253.451 249.986 253.19 250.954 252.959 cv
251.124 252.917 li
251.404 252.849 251.683 252.789 251.963 252.728 cv
253.547 252.384 255.146 252.108 256.738 251.863 cv
258.583 251.575 260.439 251.318 262.303 251.307 cv
262.435 251.303 262.568 251.303 262.7 251.307 cv
262.761 251.307 li
263.071 251.311 263.377 251.322 263.687 251.341 cv
264.522 251.398 265.343 251.511 266.156 251.67 cv
266.409 251.723 266.662 251.776 266.915 251.836 cv
267.157 251.889 267.399 251.95 267.638 252.01 cv
268.496 252.233 269.343 252.498 270.189 252.785 cv
271.475 253.227 272.745 253.73 274.012 254.225 cv
273.97 254.607 273.944 254.989 273.932 255.367 cv
273.857 258.475 274.783 261.583 275.206 264.687 cv
275.335 265.639 275.418 266.592 275.407 267.545 cv
f
249.904 249.294 mo
251.209 253.736 251.645 256.757 254.674 257.755 cv
255.326 258.742 256.003 261.01 256.351 261.719 cv
256.727 260.856 257.045 258.631 257.788 257.513 cv
262.136 256.473 261.726 253.479 263.527 249.251 cv
263.001 243.928 li
250.589 244.278 li
249.904 249.294 li
cp
.94902 .780392 .6 rgb
f
267.243 251.022 mo
262.847 261.91 li
260.745 260.084 li
259.853 259.309 li
257.788 257.513 li
261.202 256.175 262.011 252.859 263.527 249.252 cv
267.243 251.022 li
cp
.870588 .964706 1 rgb
f
254.673 257.755 mo
252.987 259.006 li
252.057 259.698 li
249.327 261.721 li
245.792 250.984 li
249.906 249.294 li
251.115 252.526 251.562 255.986 254.673 257.755 cv
cp
f
256.541 226.423 mo
250.888 226.437 246.403 230.185 246.865 236.883 cv
246.919 237.659 247.011 238.403 247.169 239.183 cv
245.906 238.478 244.812 239.729 245.266 241.632 cv
245.587 242.974 246.252 244.774 246.999 245.04 cv
247.893 245.36 248.161 244.802 248.213 244.785 cv
248.623 246.718 248.796 248.447 249.492 249.47 cv
250.317 250.68 250.952 251.59 251.543 252.275 cv
252.882 253.828 253.988 254.208 256.526 254.208 cv
256.541 254.208 li
256.555 254.208 li
259.094 254.208 260.2 253.828 261.539 252.275 cv
262.13 251.59 262.765 250.68 263.59 249.47 cv
264.286 248.447 264.459 246.718 264.869 244.785 cv
264.921 244.802 265.189 245.36 266.083 245.04 cv
266.83 244.774 267.495 242.974 267.816 241.632 cv
268.27 239.729 267.176 238.478 265.913 239.183 cv
266.071 238.403 266.163 237.659 266.217 236.883 cv
266.679 230.185 262.194 226.437 256.541 226.423 cv
cp
1 .823529 .631373 rgb
f
248.41 228.419 mo
246.254 230.963 245.589 233.783 246.47 238.985 cv
247.323 239.457 247.776 240.088 248.117 242.673 cv
248.735 242.843 249.002 242.881 249.565 243.07 cv
246.1 229.296 251.442 229.02 252.908 228.726 cv
254.1 228.486 258.982 228.486 260.174 228.726 cv
261.64 229.02 266.982 229.296 263.517 243.07 cv
264.08 242.881 264.347 242.843 264.965 242.673 cv
265.306 240.088 265.759 239.457 266.612 238.985 cv
267.493 233.783 266.553 231.172 264.672 228.419 cv
262.061 224.596 252.263 223.872 248.41 228.419 cv
cp
.388235 .305882 .258824 rgb
f
258.411 223.755 mo
258.247 224.388 258.017 224.682 257.902 224.836 cv
258.837 224.599 260.719 223.217 261.427 223.176 cv
259.675 228.019 254.935 233.193 250.564 234.061 cv
251.025 233.511 251.486 232.961 251.947 232.41 cv
249.658 233.087 247.369 233.763 245.08 234.439 cv
245.858 232.866 246.636 231.294 247.414 229.721 cv
246.59 230.019 245.766 230.318 244.942 230.616 cv
247.129 226.708 251.246 224.408 255.215 224.878 cv
255.003 224.683 254.616 224.205 254.334 223.947 cv
255.3 224.043 255.611 223.966 256.626 224.618 cv
257.139 224.164 257.807 223.985 258.411 223.755 cv
cp
f
257.543 230.589 mo
258.878 231.654 260.423 232.353 262.022 232.615 cv
261.705 232.179 261.387 231.744 261.07 231.308 cv
263.057 231.638 265.044 231.969 267.031 232.3 cv
266.693 230.584 265.94 228.983 264.882 227.732 cv
265.331 227.747 265.78 227.762 266.229 227.777 cv
263.962 225.308 260.1 224.621 257.412 226.421 cv
256.781 226.844 256.347 227.686 256.328 228.538 cv
256.308 229.407 256.93 230.1 257.543 230.589 cv
cp
f
255.936 226.603 mo
255.792 227.052 255.21 227.143 254.737 227.177 cv
253.346 227.272 251.962 227.529 250.632 227.948 cv
249.834 228.198 249.006 228.542 248.545 229.238 cv
248.329 229.559 248.208 229.937 248.102 230.311 cv
247.792 231.415 247.573 232.553 247.131 233.612 cv
246.692 234.674 245.993 235.676 244.972 236.205 cv
243.955 236.735 242.579 236.67 241.781 235.85 cv
241.112 235.162 240.965 234.096 241.165 233.162 cv
241.365 232.224 241.864 231.381 242.352 230.561 cv
242.87 229.691 243.392 228.818 243.906 227.948 cv
243.981 227.824 244.053 227.699 244.129 227.574 cv
244.567 226.848 245.021 226.092 245.668 225.563 cv
245.77 225.476 245.879 225.397 245.993 225.325 cv
246.189 225.2 246.397 225.094 246.613 225.011 cv
247.365 224.72 248.216 224.663 249.032 224.663 cv
249.486 224.663 249.936 224.625 250.39 224.587 cv
251.898 224.463 253.399 224.327 254.824 225.442 cv
255.062 225.627 255.414 225.612 255.645 225.805 cv
255.875 225.998 256.027 226.315 255.936 226.603 cv
cp
1 .823529 .631373 rgb
f
241.468 239.651 mo
239.12 242.468 237.283 244.649 235.706 246.309 cv
231.313 250.925 228.886 251.515 222.856 250.441 cv
222.818 250.434 li
222.769 250.369 li
222.727 250.316 li
221.563 248.789 221.404 246.638 222.055 244.827 cv
222.72 242.967 224.13 241.451 225.744 240.32 cv
227.363 239.19 229.189 238.407 231 237.629 cv
233.423 236.593 235.839 235.557 238.258 234.521 cv
238.538 234.4 238.822 234.279 239.101 234.158 cv
239.721 235.345 240.848 238.46 241.468 239.651 cv
.835294 .92549 .960784 rgb
f
244.304 237.192 mo
241.469 239.649 li
238.162 234.587 li
240.965 232.615 li
244.304 237.192 li
cp
.870588 .964706 1 rgb
f
262.936 224.516 mo
262.958 224.587 li
263.132 225.189 263.525 225.714 263.998 226.126 cv
264.493 226.557 265.072 226.875 265.658 227.166 cv
266.512 227.593 267.416 227.967 268.372 228.032 cv
268.727 228.054 269.09 228.032 269.442 227.948 cv
269.366 227.824 269.295 227.699 269.219 227.574 cv
268.78 226.848 268.327 226.092 267.68 225.563 cv
267.363 225.389 267.045 225.204 266.735 225.011 cv
266.047 224.599 265.382 224.153 264.739 223.673 cv
264.523 223.514 264.304 223.347 264.055 223.249 cv
263.801 223.155 263.503 223.139 263.272 223.276 cv
262.875 223.506 262.818 224.07 262.936 224.516 cv
cp
.94902 .780392 .6 rgb
f
257.412 226.603 mo
257.556 227.052 258.138 227.143 258.61 227.177 cv
260.002 227.272 261.385 227.529 262.716 227.948 cv
263.514 228.198 264.342 228.542 264.803 229.238 cv
265.019 229.559 265.14 229.937 265.245 230.311 cv
265.555 231.415 265.775 232.553 266.217 233.612 cv
266.656 234.674 267.355 235.676 268.376 236.205 cv
269.393 236.735 270.769 236.67 271.567 235.85 cv
272.236 235.162 272.383 234.096 272.183 233.162 cv
271.983 232.224 271.484 231.381 270.996 230.561 cv
270.478 229.691 269.956 228.818 269.442 227.948 cv
269.366 227.824 269.295 227.699 269.219 227.574 cv
268.78 226.848 268.327 226.092 267.68 225.563 cv
267.578 225.476 267.468 225.397 267.355 225.325 cv
267.158 225.2 266.951 225.094 266.735 225.011 cv
265.983 224.72 265.132 224.663 264.315 224.663 cv
263.862 224.663 263.412 224.625 262.958 224.587 cv
261.45 224.463 259.949 224.327 258.524 225.442 cv
258.285 225.627 257.934 225.612 257.703 225.805 cv
257.473 225.998 257.321 226.315 257.412 226.603 cv
cp
1 .823529 .631373 rgb
f
290.53 250.433 mo
291.776 248.904 291.957 246.682 291.293 244.825 cv
290.628 242.969 289.218 241.453 287.602 240.322 cv
285.986 239.191 284.159 238.406 282.347 237.629 cv
279.647 236.472 276.947 235.314 274.247 234.156 cv
273.626 235.347 272.5 238.459 271.879 239.649 cv
280.764 250.298 282.296 251.906 290.53 250.433 cv
cp
.835294 .92549 .960784 rgb
f
269.044 237.192 mo
271.879 239.649 li
275.185 234.587 li
272.383 232.615 li
269.044 237.192 li
cp
.870588 .964706 1 rgb
f
255.603 261.887 mo
255.357 261.895 li
254.257 261.895 253.157 261.35 252.503 260.466 cv
252.322 260.224 252.178 259.959 252.057 259.698 cv
252.987 259.006 li
253.108 259.29 253.244 259.562 253.414 259.793 cv
253.89 260.439 254.718 260.821 255.52 260.757 cv
255.603 261.887 li
cp
.235294 .235294 .231373 rgb
f
260.745 260.084 mo
260.548 260.515 260.31 260.984 259.943 261.377 cv
259.478 261.876 258.877 262.159 258.291 262.159 cv
258.038 262.14 li
258.2 261.018 li
258.548 261.067 258.896 260.836 259.112 260.605 cv
259.414 260.28 259.618 259.83 259.815 259.396 cv
259.853 259.309 li
260.745 260.084 li
cp
f
254.983 265 mo
257.668 265.086 li
258.688 260.988 li
254.674 260.6 li
254.983 265 li
.341176 .341176 .337255 rgb
f
251.319 228.471 mo
252.703 229.252 254.59 229.006 255.726 227.896 cv
253.543 227.365 251.36 226.834 249.176 226.303 cv
249.789 227.123 250.428 227.967 251.319 228.471 cv
cp
.388235 .305882 .258824 rgb
f
258.481 227.606 mo
259.681 227.149 260.951 226.875 262.232 226.796 cv
261.611 227.018 261.333 227.769 260.752 228.082 cv
260.393 228.275 259.954 228.275 259.563 228.163 cv
259.172 228.05 258.819 227.834 258.481 227.606 cv
cp
f
237.309 264.112 mo
232.727 260.966 228.504 257.311 224.735 253.227 cv
223.96 252.388 223.174 251.413 222.769 250.369 cv
222.818 250.434 li
222.856 250.441 li
226.826 254.328 231.257 257.734 236.032 260.573 cv
236.565 260.891 237.117 261.201 237.684 261.484 cv
237.385 262.327 237.241 263.223 237.309 264.112 cv
.8 .882353 .917647 rgb
f
256.681 283.79 mo
239.616 283.79 li
239.355 278.206 238.591 270.633 238.447 266.993 cv
238.44 266.811 238.437 266.651 238.437 266.509 cv
238.437 266.086 238.462 265.821 238.461 265.629 cv
238.461 265.212 238.346 265.135 237.623 264.513 cv
237.532 264.437 237.434 264.35 237.321 264.252 cv
237.309 264.112 li
237.309 264.112 li
237.241 263.223 237.385 262.327 237.684 261.484 cv
237.684 261.484 li
239.021 262.151 240.439 262.653 241.873 262.653 cv
241.894 262.653 241.916 262.653 241.937 262.652 cv
242.311 262.649 242.685 262.611 243.06 262.532 cv
241.854 264.781 240.905 267.216 240.704 269.76 cv
240.5 272.304 241.105 274.977 242.719 276.955 cv
244.334 278.932 247.007 278.467 249.521 279.503 cv
249.512 279.503 249.504 279.503 249.495 279.503 cv
247.429 279.503 245.965 280.426 244.606 281.612 cv
244.697 281.611 244.787 281.61 244.877 281.61 cv
248.256 281.61 250.444 282.771 253.751 283.416 cv
254.632 283.59 255.596 283.726 256.681 283.79 cv
f
222.856 250.441 mo
222.818 250.434 li
222.769 250.369 li
222.727 250.316 li
222.762 250.35 li
222.856 250.441 li
f
275.41 267.545 mo
275.407 267.545 li
275.418 266.592 275.335 265.639 275.206 264.687 cv
276.889 263.322 278.435 261.715 279.925 260.146 cv
282.511 257.42 285.293 254.6 288.684 253.148 cv
288.613 253.227 li
284.556 257.621 279.123 261.284 275.41 267.545 cv
f
274.261 283.79 mo
264.779 283.79 li
265.675 283.457 266.571 283.121 267.467 282.788 cv
269.396 282.07 271.467 281.234 272.53 279.469 cv
273.433 277.972 273.411 276.119 273.361 274.372 cv
273.32 272.891 273.267 271.352 272.594 270.029 cv
272.009 268.875 270.807 267.935 269.547 267.935 cv
269.366 267.935 269.184 267.954 269.002 267.995 cv
270.522 267.624 271.917 266.97 273.222 266.138 cv
273.906 265.7 274.567 265.212 275.206 264.687 cv
275.206 264.687 li
275.335 265.639 275.418 266.592 275.407 267.545 cv
275.407 267.545 li
275.407 268.074 275.373 268.603 275.305 269.133 cv
275.271 269.401 275.237 269.681 275.206 269.964 cv
275.131 270.584 275.059 271.238 274.991 271.923 cv
274.639 275.556 274.371 279.972 274.261 283.79 cv
f
254.182 282.877 mo
255.603 265.086 li
257.668 265.086 li
258.839 271.34 259.969 277.569 258.68 282.334 cv
254.182 282.877 li
.760784 .843137 .87451 rgb
f
257.425 281.733 mo
253.83 283.001 li
252.057 279.873 li
254.213 275.142 254.786 270.928 254.983 265 cv
257.668 265.086 li
258.246 271.304 258.399 276.38 257.425 281.733 cv
cp
.235294 .235294 .231373 rgb
f
246.839 271.184 mo
241.386 273.623 232.925 270.929 221.362 268.995 cv
225.749 266.909 228.821 264.265 227.71 261.951 cv
235.056 263.851 243.126 266.819 248.496 264.444 cv
247.222 266.858 249.589 268.528 246.839 271.184 cv
cp
1 .870588 .509804 rgb
f
270.316 278.826 mo
276.642 276.541 280.322 276.977 291.317 272.908 cv
287.637 271.227 286.748 267.958 281.75 267.958 cv
275.554 272.147 272.512 273.114 261.8 274.306 cv
263.505 276.439 267.116 276.733 270.316 278.826 cv
cp
f
260.55 284.612 mo
253.559 284.525 246.14 285.893 238.493 288.039 cv
238.963 285.022 237.094 282.864 233.924 281.185 cv
240.783 279.91 247.413 278.893 252.113 280.043 cv
255.948 281.247 258.58 282.826 260.55 284.612 cv
cp
f
324.801 208.508 mo
324.813 208.545 li
326.261 213.866 li
326.373 214.182 326.605 214.415 326.892 214.547 cv
327.171 214.676 327.499 214.701 327.813 214.585 cv
327.836 214.58 li
328.466 214.352 328.943 214.493 328.715 213.862 cv
327.984 212.203 327.348 209.577 327.1 207.668 cv
327.046 207.546 li
326.78 207.002 326.134 206.73 325.548 206.949 cv
325.525 206.954 li
324.895 207.182 324.573 207.877 324.801 208.508 cv
cp
1 .811765 .623529 rgb
f
327.324 205.403 mo
327.294 205.429 li
325.108 207.227 li
324.861 207.454 324.739 207.759 324.731 208.075 cv
324.723 208.383 324.83 208.694 325.061 208.936 cv
325.074 208.955 li
325.533 209.444 326.299 209.465 326.788 209.006 cv
329.004 207.182 li
329.095 207.084 li
329.49 206.625 329.484 205.924 329.051 205.472 cv
329.038 205.454 li
328.579 204.965 327.813 204.944 327.324 205.403 cv
cp
f
327.477 207.12 mo
327.502 207.147 li
329.284 209.119 li
329.509 209.341 329.8 209.442 330.097 209.435 cv
330.386 209.43 330.673 209.316 330.89 209.089 cv
330.907 209.075 li
331.346 208.623 331.331 207.904 330.879 207.465 cv
329.072 205.466 li
328.976 205.385 li
328.528 205.035 327.871 205.072 327.466 205.497 cv
327.449 205.511 li
327.011 205.962 327.025 206.682 327.477 207.12 cv
cp
f
320.461 201.86 mo
319.846 202.124 319.562 202.837 319.826 203.451 cv
323.711 212.497 li
323.975 213.112 324.688 213.396 325.302 213.132 cv
325.325 213.122 li
325.939 212.858 326.223 212.146 325.959 211.532 cv
322.074 202.486 li
321.81 201.871 321.098 201.587 320.483 201.851 cv
320.461 201.86 li
cp
f
323.148 214.065 mo
323.17 214.054 li
323.775 213.769 324.034 213.047 323.748 212.442 cv
319.939 204.377 li
319.653 203.772 318.932 203.514 318.327 203.799 cv
318.305 203.81 li
317.7 204.095 317.441 204.817 317.727 205.422 cv
321.536 213.487 li
321.822 214.092 322.544 214.35 323.148 214.065 cv
cp
f
321.168 214.899 mo
321.187 214.888 li
321.7 214.589 321.874 213.93 321.575 213.417 cv
318.325 207.836 li
318.026 207.322 317.368 207.149 316.855 207.447 cv
316.836 207.458 li
316.322 207.757 316.149 208.416 316.447 208.929 cv
319.697 214.51 li
319.996 215.024 320.655 215.198 321.168 214.899 cv
cp
f
322.811 220.741 mo
324.252 225.708 li
330.069 224.268 li
328.602 220 li
329.719 219.384 328.966 213.397 328.966 213.397 cv
328.087 212.43 327.709 211.141 327.514 209.874 cv
324.084 210.277 321.107 211.766 319.01 213.33 cv
319.01 213.33 319.613 215.683 319.849 216.457 cv
320.709 219.277 321.856 220.218 322.811 220.741 cv
cp
.960784 .752941 .54902 rgb
f
331.692 208.474 mo
331.666 208.473 li
330.961 208.435 330.578 208.983 330.467 209.682 cv
330.325 210.573 330.243 211.622 330.253 212.699 cv
330.217 212.677 324.98 214.368 325.16 217.668 cv
325.164 217.68 li
326.384 225.37 li
330.398 224.169 li
329.052 219.635 li
330.281 219.22 331.185 217.841 331.787 216.47 cv
332.155 215.844 332.444 215.195 332.485 214.678 cv
332.566 213.654 332.561 212.295 332.848 210.204 cv
333.048 208.737 332.398 208.513 331.692 208.474 cv
cp
1 .811765 .623529 rgb
f
402.672 208.508 mo
402.66 208.545 li
401.212 213.866 li
401.101 214.182 400.869 214.415 400.582 214.547 cv
400.302 214.676 399.974 214.701 399.66 214.585 cv
399.638 214.58 li
399.007 214.352 398.531 214.493 398.759 213.862 cv
399.49 212.203 400.125 209.577 400.374 207.668 cv
400.428 207.546 li
400.694 207.002 401.34 206.73 401.926 206.949 cv
401.948 206.954 li
402.579 207.182 402.9 207.877 402.672 208.508 cv
cp
f
400.15 205.403 mo
400.179 205.429 li
402.366 207.227 li
402.612 207.454 402.735 207.759 402.742 208.075 cv
402.75 208.383 402.644 208.694 402.413 208.936 cv
402.399 208.955 li
401.941 209.444 401.175 209.465 400.686 209.006 cv
398.469 207.182 li
398.378 207.084 li
397.984 206.625 397.99 205.924 398.422 205.472 cv
398.436 205.454 li
398.895 204.965 399.661 204.944 400.15 205.403 cv
cp
f
399.997 207.12 mo
399.971 207.147 li
398.189 209.119 li
397.965 209.341 397.674 209.442 397.377 209.435 cv
397.088 209.43 396.801 209.316 396.583 209.089 cv
396.566 209.075 li
396.128 208.623 396.142 207.904 396.594 207.465 cv
398.402 205.466 li
398.497 205.385 li
398.946 205.035 399.603 205.072 400.007 205.497 cv
400.024 205.511 li
400.463 205.962 400.449 206.682 399.997 207.12 cv
cp
f
407.013 201.86 mo
407.628 202.124 407.912 202.837 407.648 203.451 cv
403.762 212.497 li
403.498 213.112 402.786 213.396 402.171 213.132 cv
402.149 213.122 li
401.534 212.858 401.25 212.146 401.514 211.532 cv
405.4 202.486 li
405.664 201.871 406.376 201.587 406.991 201.851 cv
407.013 201.86 li
cp
f
404.325 214.065 mo
404.303 214.054 li
403.698 213.769 403.44 213.047 403.725 212.442 cv
407.534 204.377 li
407.82 203.772 408.542 203.514 409.147 203.799 cv
409.169 203.81 li
409.774 204.095 410.032 204.817 409.747 205.422 cv
405.938 213.487 li
405.652 214.092 404.93 214.35 404.325 214.065 cv
cp
f
406.306 214.899 mo
406.287 214.888 li
405.774 214.589 405.6 213.93 405.899 213.417 cv
409.148 207.836 li
409.447 207.322 410.106 207.149 410.619 207.447 cv
410.638 207.458 li
411.151 207.757 411.325 208.416 411.026 208.929 cv
407.776 214.51 li
407.478 215.024 406.819 215.198 406.306 214.899 cv
cp
f
404.663 220.741 mo
403.222 225.708 li
397.405 224.268 li
398.872 220 li
397.754 219.384 398.508 213.397 398.508 213.397 cv
399.387 212.43 399.765 211.141 399.96 209.874 cv
403.389 210.277 406.367 211.766 408.464 213.33 cv
408.464 213.33 407.86 215.683 407.624 216.457 cv
406.765 219.277 405.618 220.218 404.663 220.741 cv
cp
.960784 .752941 .54902 rgb
f
395.782 208.474 mo
395.808 208.473 li
396.512 208.435 396.896 208.983 397.007 209.682 cv
397.148 210.573 397.231 211.622 397.22 212.699 cv
397.256 212.677 402.494 214.368 402.314 217.668 cv
402.31 217.68 li
401.09 225.37 li
397.076 224.169 li
398.422 219.635 li
397.193 219.22 396.289 217.841 395.686 216.47 cv
395.318 215.844 395.03 215.195 394.989 214.678 cv
394.908 213.654 394.912 212.295 394.626 210.204 cv
394.425 208.737 395.076 208.513 395.782 208.474 cv
cp
1 .811765 .623529 rgb
f
386.495 259.293 mo
386.335 259.403 li
386.295 259.433 li
383.245 261.693 382.155 264.823 382.175 268.643 cv
382.225 276.813 383.985 281.503 381.835 292.073 cv
345.415 292.073 li
344.635 284.933 346.455 276.933 344.905 270.053 cv
344.075 266.333 344.255 261.693 341.205 259.433 cv
341.155 259.403 li
341.005 259.293 li
341.345 258.613 341.685 257.913 342.025 257.203 cv
342.075 257.103 342.125 257.003 342.175 256.903 cv
343.815 253.503 345.455 249.963 347.105 246.643 cv
349.195 247.773 351.385 248.153 353.735 247.983 cv
354.925 247.913 356.155 247.693 357.425 247.373 cv
357.645 247.313 li
357.795 247.273 li
359.745 248.033 361.735 248.433 363.745 248.653 cv
365.765 248.433 367.745 248.033 369.705 247.273 cv
369.805 247.303 369.895 247.323 369.995 247.353 cv
370.035 247.363 li
371.335 247.693 372.585 247.913 373.795 247.993 cv
376.135 248.143 378.315 247.773 380.395 246.643 cv
382.035 249.963 383.685 253.503 385.325 256.903 cv
385.625 257.513 385.915 258.123 386.205 258.723 cv
386.305 258.913 386.405 259.103 386.495 259.293 cv
.835294 .92549 .960784 rgb
f
357.335 242.393 mo
357.375 244.343 li
357.375 244.353 li
357.405 246.433 li
357.405 246.443 li
357.425 247.373 li
357.545 254.053 li
361.505 253.973 li
363.645 253.933 li
363.655 253.933 li
363.825 253.923 li
365.785 253.883 li
369.855 253.803 li
370.035 247.363 li
370.055 246.543 li
370.115 244.473 li
370.115 244.463 li
370.165 242.753 li
357.335 242.393 li
cp
.94902 .780392 .6 rgb
f
363.655 219.851 mo
369.399 219.827 373.98 223.607 373.554 230.415 cv
373.504 231.204 373.415 231.961 373.26 232.754 cv
374.539 232.03 375.659 233.294 375.209 235.23 cv
374.892 236.595 374.228 238.428 373.471 238.704 cv
372.564 239.034 372.288 238.47 372.236 238.452 cv
371.831 240.42 371.668 242.177 370.966 243.22 cv
370.136 244.456 369.497 245.385 368.901 246.084 cv
367.55 247.67 366.429 248.063 363.85 248.08 cv
363.835 248.08 li
363.82 248.08 li
361.242 248.097 360.115 247.718 358.745 246.149 cv
358.14 245.457 357.489 244.536 356.643 243.312 cv
355.928 242.277 355.742 240.522 355.313 238.56 cv
355.26 238.578 354.992 239.146 354.081 238.827 cv
353.321 238.561 352.633 236.737 352.298 235.376 cv
351.824 233.446 352.928 232.167 354.216 232.875 cv
354.051 232.084 353.952 231.328 353.892 230.54 cv
353.379 223.738 357.912 219.9 363.655 219.851 cv
cp
1 .823529 .631373 rgb
f
371.93 221.825 mo
374.137 224.396 374.83 227.258 373.969 232.548 cv
373.105 233.034 372.649 233.678 372.32 236.306 cv
371.693 236.483 371.422 236.524 370.851 236.719 cv
374.282 222.702 368.853 222.456 367.362 222.166 cv
366.148 221.93 361.189 221.962 359.979 222.213 cv
358.492 222.522 353.066 222.837 356.676 236.809 cv
356.102 236.621 355.83 236.584 355.201 236.415 cv
354.838 233.791 354.374 233.153 353.504 232.678 cv
352.576 227.399 353.514 224.74 355.407 221.93 cv
358.035 218.03 367.985 217.231 371.93 221.825 cv
cp
.388235 .305882 .258824 rgb
f
360.23 219.875 mo
359.501 219.882 358.854 220.156 358.215 220.506 cv
357.33 220.991 355.068 224.269 355.541 225.041 cv
357.455 228.169 363.386 229.062 367.571 229.18 cv
367.111 228.826 366.323 228.12 366.168 227.452 cv
368.427 228.45 371.027 228.659 373.416 228.034 cv
372.669 225.986 371.869 223.859 370.278 222.37 cv
368.985 221.161 367.268 220.482 365.526 220.163 cv
363.784 219.844 362.001 219.859 360.23 219.875 cv
cp
f
365.33 258.338 mo
362.427 258.338 li
361.497 253.918 li
365.796 253.802 li
365.33 258.338 li
cp
0 .541176 .517647 rgb
f
367.465 204.933 mo
367.465 205.073 367.395 205.193 367.275 205.283 cv
367.145 205.383 366.995 205.433 366.815 205.423 cv
366.635 205.423 366.485 205.373 366.355 205.283 cv
366.235 205.183 366.175 205.063 366.175 204.923 cv
366.205 201.803 li
366.205 201.663 366.275 201.553 366.395 201.453 cv
366.525 201.363 366.675 201.313 366.855 201.313 cv
367.035 201.323 367.185 201.363 367.315 201.463 cv
367.435 201.563 367.495 201.683 367.495 201.823 cv
367.465 204.933 li
cp
368.145 200.883 mo
367.805 200.603 367.385 200.473 366.895 200.463 cv
366.405 200.463 365.995 200.593 365.645 200.853 cv
365.295 201.113 365.115 201.433 365.115 201.813 cv
365.085 204.933 li
365.075 205.303 365.245 205.623 365.595 205.893 cv
365.935 206.153 366.355 206.293 366.835 206.293 cv
367.325 206.303 367.735 206.173 368.085 205.923 cv
368.435 205.663 368.615 205.343 368.615 204.963 cv
368.645 201.853 li
368.645 201.473 368.485 201.153 368.145 200.883 cv
cp
0 .631373 .603922 rgb
f
361.235 199.263 mo
361.235 199.403 361.165 199.523 361.045 199.613 cv
360.915 199.713 360.765 199.753 360.585 199.753 cv
360.405 199.753 360.255 199.703 360.125 199.603 cv
360.005 199.513 359.945 199.393 359.945 199.253 cv
359.975 196.133 li
359.975 195.993 360.045 195.883 360.165 195.783 cv
360.295 195.693 360.445 195.643 360.625 195.643 cv
360.805 195.643 360.955 195.693 361.085 195.793 cv
361.205 195.893 361.265 196.013 361.265 196.153 cv
361.235 199.263 li
cp
361.915 195.213 mo
361.575 194.933 361.155 194.803 360.665 194.793 cv
360.175 194.793 359.765 194.913 359.415 195.183 cv
359.065 195.443 358.885 195.763 358.885 196.143 cv
358.855 199.263 li
358.845 199.633 359.015 199.953 359.365 200.223 cv
359.705 200.493 360.125 200.633 360.605 200.633 cv
361.095 200.643 361.505 200.513 361.865 200.243 cv
362.215 199.983 362.395 199.663 362.395 199.293 cv
362.425 196.183 li
362.435 195.803 362.265 195.483 361.915 195.213 cv
cp
f
366.798 194.881 mo
359.457 206.354 li
360.71 206.367 li
368.038 194.894 li
366.798 194.881 li
cp
f
347.105 246.643 mo
345.995 250.073 344.345 253.693 342.535 257.053 cv
342.485 257.143 342.445 257.233 342.395 257.313 cv
342.005 258.033 341.605 258.743 341.205 259.433 cv
341.155 259.403 li
338.245 257.533 335.755 255.343 333.185 253.013 cv
332.885 252.743 332.575 252.463 332.285 252.173 cv
332.255 252.153 li
330.875 250.843 329.605 249.413 328.665 247.773 cv
328.065 246.703 327.615 245.553 327.235 244.383 cv
327.025 243.773 326.845 243.153 326.665 242.543 cv
325.395 238.083 324.825 233.723 324.045 229.153 cv
323.885 228.273 323.635 227.053 323.665 225.903 cv
324.745 225.593 li
324.925 225.543 li
326.345 225.143 li
330.005 224.103 li
330.005 224.093 li
330.345 224.003 li
330.905 223.843 li
332.285 226.113 333.065 229.083 334.185 231.753 cv
335.245 234.263 336.155 236.383 337.515 238.743 cv
339.865 242.833 342.925 244.433 347.105 246.643 cv
.835294 .92549 .960784 rgb
f
403.825 225.903 mo
403.855 227.053 403.605 228.273 403.455 229.153 cv
402.675 233.723 402.105 238.083 400.825 242.543 cv
400.655 243.153 400.465 243.773 400.265 244.383 cv
399.885 245.553 399.435 246.703 398.825 247.773 cv
397.685 249.783 396.035 251.463 394.315 253.013 cv
392.665 254.503 391.055 255.943 389.335 257.273 cv
388.425 257.983 387.485 258.663 386.495 259.293 cv
386.335 259.403 li
386.295 259.433 li
386.185 259.243 386.075 259.043 385.965 258.853 cv
385.625 258.263 385.285 257.663 384.955 257.053 cv
383.145 253.693 381.505 250.073 380.395 246.643 cv
384.575 244.433 387.635 242.833 389.985 238.743 cv
391.345 236.383 392.255 234.263 393.305 231.753 cv
394.435 229.083 395.215 226.113 396.595 223.843 cv
397.125 223.993 li
397.465 224.093 li
401.135 225.133 li
402.575 225.543 li
402.575 225.553 li
402.695 225.583 li
402.755 225.593 li
403.235 225.733 li
403.825 225.903 li
f
322.57 222.059 mo
329.806 219.997 li
330.9 223.837 li
323.665 225.899 li
322.57 222.059 li
cp
.870588 .964706 1 rgb
f
404.926 222.059 mo
397.691 219.997 li
396.596 223.837 li
403.832 225.899 li
404.926 222.059 li
cp
f
323.728 223.622 mo
323.829 223.975 324.197 224.18 324.551 224.08 cv
324.904 223.979 325.109 223.611 325.008 223.257 cv
324.908 222.904 324.539 222.699 324.186 222.799 cv
323.832 222.9 323.627 223.268 323.728 223.622 cv
cp
1 1 1 rgb
f
403.769 223.622 mo
403.668 223.975 403.3 224.18 402.946 224.08 cv
402.593 223.979 402.388 223.611 402.489 223.257 cv
402.589 222.904 402.957 222.699 403.311 222.799 cv
403.664 222.9 403.869 223.268 403.769 223.622 cv
cp
f
357.566 257.732 mo
355.334 254.583 353.994 251.291 353.711 247.827 cv
357.405 246.431 li
358.082 249.619 360.355 252.022 363.748 253.872 cv
357.566 257.732 li
cp
.870588 .964706 1 rgb
f
369.931 257.732 mo
372.327 254.461 373.895 251.167 373.786 247.827 cv
370.059 246.546 li
370.049 249.815 367.797 252.198 363.748 253.872 cv
369.931 257.732 li
cp
f
365.33 258.338 mo
362.427 258.338 li
360.239 281.333 li
364.642 285.229 li
368.337 281.391 li
365.33 258.338 li
cp
0 .631373 .603922 rgb
f
341.646 219.313 mo
340.363 216.27 li
356.442 209.49 li
371.998 210.963 li
383.797 199.93 li
386.053 202.341 li
373.168 214.391 li
356.959 212.856 li
341.646 219.313 li
cp
.913725 .305882 .105882 rgb
f
386.857 204.965 mo
389.252 197.089 li
381.233 198.952 li
386.857 204.965 li
cp
f
gsave
366.325 292.073 mo
345.415 292.073 li
345.264 290.693 345.21 289.28 345.211 287.849 cv
345.212 284.266 345.552 280.57 345.553 276.987 cv
345.554 274.604 345.404 272.27 344.905 270.053 cv
344.075 266.333 344.255 261.693 341.205 259.433 cv
341.605 258.743 342.005 258.033 342.395 257.313 cv
342.395 257.313 li
343.625 257.713 344.885 258.023 346.165 258.263 cv
346.245 259.993 346.325 261.723 346.405 263.453 cv
346.635 268.383 346.895 273.433 348.815 277.973 cv
350.665 282.333 354.395 286.213 359.025 286.993 cv
355.605 286.513 352.185 286.033 348.765 285.563 cv
353.395 289.813 360.345 290.053 366.325 292.073 cv
clp
341.205 257.313 mo
366.325 257.313 li
366.325 292.073 li
341.205 292.073 li
cp
.8 .882353 .917647 rgb
f
grestore
341.205 259.433 mo
341.155 259.403 li
338.245 257.533 335.755 255.343 333.185 253.013 cv
332.885 252.743 332.575 252.463 332.285 252.173 cv
335.235 254.363 338.535 256.073 342.025 257.203 cv
342.145 257.243 342.275 257.283 342.395 257.313 cv
342.005 258.033 341.605 258.743 341.205 259.433 cv
341.205 259.433 li
.8 .882353 .917647 rgb
f
381.835 292.073 mo
375.085 292.073 li
377.495 290.243 379.745 288.153 380.765 285.343 cv
381.675 282.833 381.475 280.093 381.275 277.433 cv
380.945 273.263 380.625 269.083 380.295 264.903 cv
379.115 265.183 377.935 265.463 376.745 265.743 cv
379.435 262.983 382.555 260.653 385.965 258.853 cv
385.965 258.853 li
386.075 259.043 386.185 259.243 386.295 259.433 cv
383.275 261.671 382.176 264.762 382.175 268.532 cv
382.175 268.569 382.175 268.606 382.175 268.643 cv
382.206 273.733 382.901 277.473 382.9 282.125 cv
382.9 284.94 382.645 288.089 381.835 292.073 cv
f
386.295 259.433 mo
386.295 259.433 li
386.185 259.243 386.075 259.043 385.965 258.853 cv
386.205 258.723 li
387.225 258.183 388.265 257.703 389.335 257.273 cv
388.425 257.983 387.485 258.663 386.495 259.293 cv
386.335 259.403 li
386.295 259.433 li
f
86.7397 339.034 mo
78.0817 337.879 li
19.803 330.101 li
18.6475 338.759 li
14.9175 366.708 li
14.9175 366.708 li
13.7621 375.366 li
22.4201 376.522 li
72.0408 383.144 li
72.0408 383.144 li
80.6988 384.299 li
81.8543 375.641 li
86.7397 339.034 li
cp
.858824 .733333 .368627 rgb
f
82.1398 339.979 mo
73.4277 339.351 li
14.7841 335.127 li
14.1566 343.84 li
12.131 371.964 li
12.1309 371.964 li
11.5035 380.676 li
20.2156 381.304 li
70.147 384.9 li
70.147 384.9 li
78.8592 385.527 li
79.4867 376.815 li
82.1398 339.979 li
cp
.909804 .784314 .427451 rgb
f
77.0802 386.867 mo
9.54998 386.867 li
9.54998 341.2 li
77.0802 341.2 li
77.0802 386.867 li
cp
1 .870588 .509804 rgb
f
72.8681 382.867 mo
13.7621 382.867 li
13.7621 345.2 li
72.8681 345.2 li
72.8681 382.867 li
cp
1 .733333 0 rgb
f
14.084 349.935 mo
9.54998 349.935 li
9.54998 341.2 li
18.2847 341.2 li
18.2847 345.734 li
18.2847 348.054 16.404 349.935 14.084 349.935 cv
cp
1 .870588 .509804 rgb
f
72.5461 349.935 mo
77.0802 349.935 li
77.0802 341.2 li
68.3454 341.2 li
68.3454 345.734 li
68.3454 348.054 70.2261 349.935 72.5461 349.935 cv
cp
f
72.5461 378.132 mo
77.0802 378.132 li
77.0802 386.867 li
68.3454 386.867 li
68.3454 382.333 li
68.3454 380.013 70.2261 378.132 72.5461 378.132 cv
cp
f
14.084 378.132 mo
9.54998 378.132 li
9.54998 386.867 li
18.2847 386.867 li
18.2847 382.333 li
18.2847 380.013 16.404 378.132 14.084 378.132 cv
cp
f
53.4401 352.742 mo
53.4401 355.618 48.907 357.95 43.3151 357.95 cv
37.7232 357.95 33.1901 355.618 33.1901 352.742 cv
33.1901 349.865 37.7232 347.534 43.3151 347.534 cv
48.907 347.534 53.4401 349.865 53.4401 352.742 cv
cp
f
28.9484 366.232 mo
28.9484 361.745 li
28.1163 361.745 li
28.1163 361.132 li
28.3505 361.107 28.5735 361.027 28.7855 360.892 cv
28.9976 360.757 29.1498 360.594 29.2431 360.402 cv
29.9254 360.402 li
29.9254 366.232 li
28.9484 366.232 li
cp
f
32.8663 361.703 mo
32.8663 361.564 32.8109 361.445 32.7008 361.345 cv
32.5906 361.246 32.4579 361.197 32.3027 361.197 cv
32.1479 361.197 32.0158 361.246 31.9074 361.345 cv
31.7987 361.445 31.7445 361.564 31.7445 361.703 cv
31.7445 364.888 li
31.7445 365.028 31.7987 365.147 31.9074 365.246 cv
32.0158 365.345 32.1479 365.395 32.3027 365.395 cv
32.4579 365.395 32.5906 365.345 32.7008 365.246 cv
32.8109 365.147 32.8663 365.028 32.8663 364.888 cv
32.8663 361.703 li
cp
33.8794 364.902 mo
33.8794 365.29 33.7278 365.618 33.4245 365.888 cv
33.1213 366.158 32.7576 366.292 32.3338 366.292 cv
31.903 366.292 31.5369 366.157 31.2355 365.886 cv
30.9337 365.615 30.7833 365.287 30.7833 364.902 cv
30.7833 361.722 li
30.7833 361.335 30.9346 361.005 31.2381 360.734 cv
31.5411 360.463 31.9065 360.327 32.3338 360.327 cv
32.7644 360.327 33.1299 360.464 33.4296 360.737 cv
33.7295 361.009 33.8794 361.338 33.8794 361.722 cv
33.8794 364.902 li
cp
f
37.3063 361.703 mo
37.3063 361.564 37.2509 361.445 37.1408 361.345 cv
37.0306 361.246 36.8979 361.197 36.7427 361.197 cv
36.5879 361.197 36.4558 361.246 36.3474 361.345 cv
36.2387 361.445 36.1845 361.564 36.1845 361.703 cv
36.1845 364.888 li
36.1845 365.028 36.2387 365.147 36.3474 365.246 cv
36.4558 365.345 36.5879 365.395 36.7427 365.395 cv
36.8979 365.395 37.0306 365.345 37.1408 365.246 cv
37.2509 365.147 37.3063 365.028 37.3063 364.888 cv
37.3063 361.703 li
cp
38.3194 364.902 mo
38.3194 365.29 38.1678 365.618 37.8645 365.888 cv
37.5613 366.158 37.1976 366.292 36.7738 366.292 cv
36.343 366.292 35.9769 366.157 35.6755 365.886 cv
35.3737 365.615 35.2233 365.287 35.2233 364.902 cv
35.2233 361.722 li
35.2233 361.335 35.3746 361.005 35.6781 360.734 cv
35.9811 360.463 36.3465 360.327 36.7738 360.327 cv
37.2044 360.327 37.5699 360.464 37.8695 360.737 cv
38.1695 361.009 38.3194 361.338 38.3194 361.722 cv
38.3194 364.902 li
cp
f
41.2449 361.703 mo
41.2449 361.564 41.1895 361.445 41.0794 361.345 cv
40.9692 361.246 40.8366 361.197 40.6814 361.197 cv
40.5265 361.197 40.3944 361.246 40.286 361.345 cv
40.1773 361.445 40.1232 361.564 40.1232 361.703 cv
40.1232 364.888 li
40.1232 365.028 40.1773 365.147 40.286 365.246 cv
40.3944 365.345 40.5265 365.395 40.6814 365.395 cv
40.8366 365.395 40.9692 365.345 41.0794 365.246 cv
41.1895 365.147 41.2449 365.028 41.2449 364.888 cv
41.2449 361.703 li
cp
42.258 364.902 mo
42.258 365.29 42.1064 365.618 41.8031 365.888 cv
41.4999 366.158 41.1362 366.292 40.7125 366.292 cv
40.2816 366.292 39.9156 366.157 39.6141 365.886 cv
39.3123 365.615 39.1619 365.287 39.1619 364.902 cv
39.1619 361.722 li
39.1619 361.335 39.3132 361.005 39.6168 360.734 cv
39.9197 360.463 40.2851 360.327 40.7125 360.327 cv
41.1431 360.327 41.5085 360.464 41.8082 360.737 cv
42.1082 361.009 42.258 361.338 42.258 361.722 cv
42.258 364.902 li
cp
f
45.1836 361.703 mo
45.1836 361.564 45.1282 361.445 45.018 361.345 cv
44.9079 361.246 44.7752 361.197 44.62 361.197 cv
44.4651 361.197 44.333 361.246 44.2247 361.345 cv
44.116 361.445 44.0618 361.564 44.0618 361.703 cv
44.0618 364.888 li
44.0618 365.028 44.116 365.147 44.2247 365.246 cv
44.333 365.345 44.4651 365.395 44.62 365.395 cv
44.7752 365.395 44.9079 365.345 45.018 365.246 cv
45.1282 365.147 45.1836 365.028 45.1836 364.888 cv
45.1836 361.703 li
cp
46.1966 364.902 mo
46.1966 365.29 46.045 365.618 45.7418 365.888 cv
45.4385 366.158 45.0749 366.292 44.6511 366.292 cv
44.2202 366.292 43.8542 366.157 43.5527 365.886 cv
43.251 365.615 43.1005 365.287 43.1005 364.902 cv
43.1005 361.722 li
43.1005 361.335 43.2519 361.005 43.5554 360.734 cv
43.8583 360.463 44.2238 360.327 44.6511 360.327 cv
45.0817 360.327 45.4471 360.464 45.7468 360.737 cv
46.0468 361.009 46.1966 361.338 46.1966 361.722 cv
46.1966 364.902 li
cp
f
49.6235 361.703 mo
49.6235 361.564 49.5682 361.445 49.458 361.345 cv
49.3478 361.246 49.2152 361.197 49.06 361.197 cv
48.9051 361.197 48.773 361.246 48.6647 361.345 cv
48.556 361.445 48.5018 361.564 48.5018 361.703 cv
48.5018 364.888 li
48.5018 365.028 48.556 365.147 48.6647 365.246 cv
48.773 365.345 48.9051 365.395 49.06 365.395 cv
49.2152 365.395 49.3478 365.345 49.458 365.246 cv
49.5682 365.147 49.6235 365.028 49.6235 364.888 cv
49.6235 361.703 li
cp
50.6366 364.902 mo
50.6366 365.29 50.485 365.618 50.1818 365.888 cv
49.8785 366.158 49.5149 366.292 49.0911 366.292 cv
48.6602 366.292 48.2942 366.157 47.9927 365.886 cv
47.691 365.615 47.5405 365.287 47.5405 364.902 cv
47.5405 361.722 li
47.5405 361.335 47.6918 361.005 47.9954 360.734 cv
48.2983 360.463 48.6638 360.327 49.0911 360.327 cv
49.5217 360.327 49.8871 360.464 50.1868 360.737 cv
50.4868 361.009 50.6366 361.338 50.6366 361.722 cv
50.6366 364.902 li
cp
f
53.5622 361.703 mo
53.5622 361.564 53.5068 361.445 53.3966 361.345 cv
53.2865 361.246 53.1538 361.197 52.9986 361.197 cv
52.8437 361.197 52.7117 361.246 52.6033 361.345 cv
52.4946 361.445 52.4404 361.564 52.4404 361.703 cv
52.4404 364.888 li
52.4404 365.028 52.4946 365.147 52.6033 365.246 cv
52.7117 365.345 52.8437 365.395 52.9986 365.395 cv
53.1538 365.395 53.2865 365.345 53.3966 365.246 cv
53.5068 365.147 53.5622 365.028 53.5622 364.888 cv
53.5622 361.703 li
cp
54.5753 364.902 mo
54.5753 365.29 54.4236 365.618 54.1204 365.888 cv
53.8172 366.158 53.4535 366.292 53.0297 366.292 cv
52.5988 366.292 52.2328 366.157 51.9313 365.886 cv
51.6296 365.615 51.4791 365.287 51.4791 364.902 cv
51.4791 361.722 li
51.4791 361.335 51.6305 361.005 51.934 360.734 cv
52.237 360.463 52.6024 360.327 53.0297 360.327 cv
53.4603 360.327 53.8257 360.464 54.1254 360.737 cv
54.4254 361.009 54.5753 361.338 54.5753 361.722 cv
54.5753 364.902 li
cp
f
57.5008 361.703 mo
57.5008 361.564 57.4454 361.445 57.3353 361.345 cv
57.2251 361.246 57.0924 361.197 56.9373 361.197 cv
56.7824 361.197 56.6503 361.246 56.5419 361.345 cv
56.4332 361.445 56.379 361.564 56.379 361.703 cv
56.379 364.888 li
56.379 365.028 56.4332 365.147 56.5419 365.246 cv
56.6503 365.345 56.7824 365.395 56.9373 365.395 cv
57.0924 365.395 57.2251 365.345 57.3353 365.246 cv
57.4454 365.147 57.5008 365.028 57.5008 364.888 cv
57.5008 361.703 li
cp
58.5139 364.902 mo
58.5139 365.29 58.3623 365.618 58.059 365.888 cv
57.7558 366.158 57.3921 366.292 56.9684 366.292 cv
56.5375 366.292 56.1714 366.157 55.87 365.886 cv
55.5682 365.615 55.4178 365.287 55.4178 364.902 cv
55.4178 361.722 li
55.4178 361.335 55.5691 361.005 55.8726 360.734 cv
56.1756 360.463 56.541 360.327 56.9684 360.327 cv
57.3989 360.327 57.7644 360.464 58.0641 360.737 cv
58.364 361.009 58.5139 361.338 58.5139 361.722 cv
58.5139 364.902 li
cp
f
65.0651 369.874 mo
21.5651 369.874 li
21.5651 367.95 li
65.0651 367.95 li
65.0651 369.874 li
cp
f
62.5651 373.538 mo
24.0651 373.538 li
24.0651 371.615 li
62.5651 371.615 li
62.5651 373.538 li
cp
f
60.7317 377.203 mo
25.8984 377.203 li
25.8984 375.279 li
60.7317 375.279 li
60.7317 377.203 li
cp
f
59.2317 380.867 mo
27.3984 380.867 li
27.3984 378.943 li
59.2317 378.943 li
59.2317 380.867 li
cp
f
48.9636 351.409 mo
48.9636 353.013 46.4347 354.314 43.3151 354.314 cv
40.1955 354.314 37.6666 353.013 37.6666 351.409 cv
37.6666 349.804 40.1955 348.503 43.3151 348.503 cv
46.4347 348.503 48.9636 349.804 48.9636 351.409 cv
cp
1 .733333 0 rgb
f
25.8984 350.214 mo
26.7198 351.878 li
28.5566 352.145 li
27.2275 353.441 li
27.5413 355.27 li
25.8984 354.406 li
24.2555 355.27 li
24.5693 353.441 li
23.2402 352.145 li
25.077 351.878 li
25.8984 350.214 li
cp
1 .870588 .509804 rgb
f
60.7317 350.214 mo
61.5532 351.878 li
63.3899 352.145 li
62.0608 353.441 li
62.3746 355.27 li
60.7317 354.406 li
59.0889 355.27 li
59.4026 353.441 li
58.0735 352.145 li
59.9103 351.878 li
60.7317 350.214 li
cp
f
158.278 372.656 mo
131.042 372.656 li
129.104 372.656 127.533 371.085 127.533 369.147 cv
127.533 320.536 li
127.533 318.598 129.104 317.027 131.042 317.027 cv
158.278 317.027 li
160.216 317.027 161.787 318.598 161.787 320.536 cv
161.787 369.147 li
161.787 371.085 160.216 372.656 158.278 372.656 cv
cp
.341176 .341176 .337255 rgb
f
131.042 368.02 mo
130.811 368.02 130.624 367.833 130.624 367.602 cv
130.624 320.536 li
130.624 320.305 130.811 320.117 131.042 320.117 cv
158.278 320.117 li
158.508 320.117 158.696 320.305 158.696 320.536 cv
158.696 367.602 li
158.696 367.833 158.508 368.02 158.278 368.02 cv
131.042 368.02 li
cp
.835294 .92549 .960784 rgb
f
148.427 370.156 mo
148.427 370.701 147.985 371.143 147.439 371.143 cv
141.88 371.143 li
141.335 371.143 140.893 370.701 140.893 370.156 cv
140.893 369.611 141.335 369.169 141.88 369.169 cv
147.439 369.169 li
147.985 369.169 148.427 369.611 148.427 370.156 cv
cp
1 1 1 rgb
f
145.818 337.152 mo
140.51 331.844 li
140.51 324.336 li
142.45 324.399 144.264 325.184 145.643 326.563 cv
147.082 328.001 147.874 329.914 147.874 331.948 cv
147.874 333.898 147.146 335.736 145.818 337.152 cv
cp
1 .733333 0 rgb
f
140.007 324.336 mo
140.007 331.696 li
132.647 331.696 li
132.709 329.756 133.495 327.942 134.873 326.563 cv
136.252 325.184 138.067 324.399 140.007 324.336 cv
cp
.388235 .305882 .258824 rgb
f
139.652 332.199 mo
136.166 335.685 li
134.699 337.152 li
133.428 335.797 132.707 334.056 132.647 332.199 cv
139.652 332.199 li
cp
.913725 .305882 .105882 rgb
f
140.258 332.303 mo
145.463 337.508 li
144.047 338.835 142.209 339.563 140.258 339.563 cv
138.308 339.563 136.47 338.835 135.054 337.508 cv
140.258 332.303 li
cp
0 .631373 .603922 rgb
f
136.78 364.884 mo
132.98 364.884 li
132.98 342.105 li
136.78 342.105 li
136.78 364.884 li
cp
f
141.694 364.884 mo
137.893 364.884 li
137.893 345.443 li
141.694 345.443 li
141.694 364.884 li
cp
f
146.607 364.884 mo
142.807 364.884 li
142.807 351.554 li
146.607 351.554 li
146.607 364.884 li
cp
f
151.52 364.884 mo
147.72 364.884 li
147.72 348.183 li
151.52 348.183 li
151.52 364.884 li
cp
f
156.433 364.884 mo
152.633 364.884 li
152.633 344.509 li
156.433 344.509 li
156.433 364.884 li
cp
f
157.673 329.913 mo
153.561 322.792 li
149.45 329.913 li
151.348 329.913 li
151.348 339.563 li
155.854 339.563 li
155.854 329.913 li
157.673 329.913 li
cp
.913725 .305882 .105882 rgb
f
163.48 363.199 mo
163.421 363.223 li
161.814 363.862 159.994 363.078 159.354 361.471 cv
149.991 337.939 li
149.352 336.332 150.136 334.511 151.743 333.872 cv
151.802 333.849 li
153.408 333.209 155.229 333.994 155.869 335.6 cv
165.232 359.132 li
165.871 360.739 165.087 362.56 163.48 363.199 cv
cp
1 .823529 .631373 rgb
f
169.357 360.861 mo
169.298 360.884 li
167.692 361.524 165.871 360.739 165.232 359.132 cv
160.919 348.294 li
160.28 346.687 161.064 344.866 162.671 344.227 cv
162.73 344.204 li
164.336 343.564 166.157 344.349 166.796 345.956 cv
171.109 356.794 li
171.748 358.401 170.964 360.222 169.357 360.861 cv
cp
f
170.747 376.521 mo
170.695 376.566 li
169.242 377.799 167.11 377.418 165.908 375.831 cv
161.224 369.784 156.055 364.454 150.572 359.869 cv
149.159 358.656 148.936 356.558 150.069 355.068 cv
150.11 355.014 li
151.242 353.527 153.378 353.265 154.885 354.541 cv
160.667 359.333 166.121 364.89 171.071 371.182 cv
172.357 372.847 172.2 375.29 170.747 376.521 cv
cp
.941176 .737255 .533333 rgb
f
175.234 358.522 mo
175.176 358.546 li
173.569 359.185 171.748 358.401 171.109 356.794 cv
167.494 347.708 li
166.854 346.102 167.639 344.281 169.245 343.642 cv
169.304 343.618 li
170.911 342.979 172.732 343.763 173.371 345.37 cv
176.986 354.456 li
177.625 356.062 176.841 357.883 175.234 358.522 cv
cp
1 .823529 .631373 rgb
f
180.78 356.316 mo
180.727 356.337 li
179.3 356.905 177.683 356.208 177.115 354.781 cv
173.905 346.712 li
173.337 345.285 174.034 343.668 175.461 343.1 cv
175.513 343.079 li
176.94 342.511 178.557 343.208 179.125 344.635 cv
182.335 352.704 li
182.903 354.131 182.207 355.748 180.78 356.316 cv
cp
f
181.561 375.679 mo
175.83 377.96 li
171.103 379.841 165.745 377.533 163.864 372.805 cv
161.079 365.805 li
183.93 356.712 li
186.716 363.713 li
188.597 368.441 186.289 373.798 181.561 375.679 cv
cp
.94902 .780392 .6 rgb
f
190.419 381.927 mo
173.375 388.708 li
167.184 373.148 li
184.228 366.366 li
190.419 381.927 li
cp
f
184.352 357.774 mo
182.281 352.568 li
181.713 351.141 180.096 350.445 178.669 351.012 cv
178.617 351.033 li
177.19 351.601 176.493 353.218 177.061 354.645 cv
176.685 353.699 li
176.045 352.092 174.225 351.307 172.618 351.947 cv
172.559 351.97 li
170.953 352.609 170.168 354.43 170.808 356.037 cv
170.459 355.16 li
169.82 353.554 167.999 352.769 166.392 353.409 cv
166.333 353.432 li
164.726 354.071 163.942 355.892 164.582 357.499 cv
163.942 355.892 162.122 355.108 160.515 355.747 cv
160.456 355.771 li
158.849 356.41 158.065 358.231 158.704 359.837 cv
161.501 366.866 li
184.352 357.774 li
cp
f
192.259 383.368 mo
172.957 390.943 li
169.542 381.485 li
188.571 374.264 li
192.259 383.368 li
cp
.929412 .929412 .929412 rgb
f
199.56 398.693 mo
192.471 380.877 li
170.977 388.739 li
174.937 398.693 li
199.56 398.693 li
cp
.388235 .305882 .258824 rgb
f
193.038 391.704 mo
193.531 391.288 194.267 391.35 194.683 391.843 cv
195.099 392.335 195.037 393.072 194.545 393.488 cv
194.052 393.904 193.316 393.842 192.9 393.349 cv
192.484 392.857 192.546 392.12 193.038 391.704 cv
cp
.929412 .929412 .929412 rgb
f
191.639 388.188 mo
192.132 387.772 192.868 387.834 193.284 388.327 cv
193.7 388.82 193.638 389.556 193.146 389.972 cv
192.653 390.388 191.917 390.326 191.501 389.833 cv
191.085 389.341 191.147 388.604 191.639 388.188 cv
cp
f
190.252 384.701 mo
190.745 384.285 191.481 384.347 191.897 384.84 cv
192.313 385.333 192.251 386.069 191.758 386.485 cv
191.266 386.901 190.529 386.839 190.113 386.346 cv
189.697 385.854 189.759 385.117 190.252 384.701 cv
cp
f
240.247 328.85 mo
245.157 328.85 li
246.877 333.686 li
250.45 335.166 li
255.085 332.962 li
258.557 336.434 li
256.354 341.069 li
257.834 344.643 li
262.67 346.363 li
262.67 351.272 li
257.834 352.992 li
256.354 356.565 li
258.557 361.201 li
255.085 364.672 li
250.45 362.469 li
246.877 363.949 li
245.157 368.785 li
240.247 368.785 li
238.528 363.949 li
234.954 362.469 li
230.319 364.672 li
226.847 361.201 li
229.051 356.565 li
227.57 352.992 li
222.735 351.272 li
222.735 346.363 li
227.57 344.643 li
229.051 341.069 li
226.847 336.434 li
230.319 332.962 li
234.954 335.166 li
238.528 333.686 li
240.247 328.85 li
cp
.913725 .305882 .105882 rgb
f
260.319 342.62 mo
262.486 337.388 li
268.398 337.69 li
271.552 334.535 li
271.25 328.623 li
276.483 326.456 li
280.449 330.85 li
284.911 330.85 li
288.878 326.456 li
294.11 328.623 li
293.808 334.535 li
296.963 337.69 li
302.875 337.388 li
305.042 342.62 li
300.648 346.587 li
300.648 351.048 li
305.042 355.015 li
302.875 360.247 li
296.963 359.945 li
293.808 363.1 li
294.11 369.012 li
288.878 371.179 li
284.911 366.785 li
280.449 366.785 li
276.483 371.179 li
271.25 369.012 li
271.552 363.1 li
268.398 359.945 li
262.486 360.247 li
260.319 355.015 li
264.712 351.048 li
264.712 346.587 li
260.319 342.62 li
cp
0 .631373 .603922 rgb
f
294.916 348.817 mo
294.916 355.575 289.438 361.053 282.68 361.053 cv
275.922 361.053 270.444 355.575 270.444 348.817 cv
270.444 342.06 275.922 336.582 282.68 336.582 cv
289.438 336.582 294.916 342.06 294.916 348.817 cv
cp
1 1 1 rgb
f
253.953 348.817 mo
253.953 355.031 248.916 360.068 242.702 360.068 cv
236.489 360.068 231.452 355.031 231.452 348.817 cv
231.452 342.604 236.489 337.567 242.702 337.567 cv
248.916 337.567 253.953 342.604 253.953 348.817 cv
cp
f
283.501 356.005 mo
283.501 351.223 li
284.305 351.987 284.868 352.844 284.868 353.975 cv
284.868 354.771 284.595 355.68 283.501 356.005 cv
cp
280.592 344.246 mo
280.592 343.456 280.846 342.555 281.859 342.21 cv
281.859 346.9 li
281.111 346.161 280.592 345.329 280.592 344.246 cv
cp
287.664 353.796 mo
287.664 351.221 285.733 349.839 283.865 348.502 cv
283.743 348.414 283.623 348.327 283.501 348.239 cv
283.501 342.131 li
284.741 342.397 285.032 343.389 285.032 344.246 cv
285.032 344.582 li
287.63 344.582 li
287.63 344.426 li
287.63 341.413 285.537 340.509 283.501 340.341 cv
283.501 338.537 li
281.859 338.537 li
281.859 340.344 li
279.843 340.527 277.794 341.446 277.794 344.426 cv
277.794 347 279.726 348.382 281.593 349.719 cv
281.859 349.911 li
281.859 356.061 li
280.594 355.793 280.297 354.818 280.297 353.975 cv
280.297 353.099 li
277.697 353.099 li
277.697 353.796 li
277.697 356.796 279.802 357.705 281.859 357.879 cv
281.859 359.273 li
283.501 359.273 li
283.501 357.879 li
285.558 357.706 287.664 356.798 287.664 353.796 cv
cp
0 .631373 .603922 rgb
f
243.809 343.229 mo
244.791 343.229 245.729 343.625 246.521 344.374 cv
246.666 344.512 li
246.831 344.399 li
247.309 344.071 247.78 343.761 248.241 343.457 cv
248.578 343.235 li
248.399 343.022 li
247.159 341.546 245.529 340.733 243.809 340.733 cv
240.849 340.733 238.337 343.14 237.49 346.45 cv
235.492 346.45 li
235.492 348.258 li
237.21 348.258 li
237.197 348.472 237.184 348.687 237.184 348.905 cv
237.184 349.124 237.197 349.338 237.21 349.553 cv
235.492 349.553 li
235.492 351.36 li
237.49 351.36 li
238.337 354.67 240.849 357.078 243.809 357.078 cv
245.253 357.078 246.629 356.507 247.79 355.427 cv
247.985 355.245 li
247.79 355.065 li
247.272 354.585 246.804 354.179 246.358 353.823 cv
246.211 353.706 li
246.058 353.817 li
245.369 354.317 244.591 354.582 243.809 354.582 cv
242.017 354.582 240.47 353.263 239.74 351.36 cv
245.315 351.36 li
245.315 349.553 li
239.321 349.553 li
239.301 349.34 239.289 349.124 239.289 348.905 cv
239.289 348.686 239.301 348.47 239.321 348.258 cv
245.315 348.258 li
245.315 346.45 li
239.74 346.45 li
240.47 344.548 242.017 343.229 243.809 343.229 cv
cp
.913725 .305882 .105882 rgb
f
395.195 333.522 mo
388.587 333.269 382.288 334.938 375.989 336.608 cv
369.69 338.277 363.392 339.946 356.784 339.693 cv
355.926 334.354 355.068 329.015 354.21 323.676 cv
360.818 323.929 367.117 322.259 373.416 320.59 cv
379.715 318.921 386.014 317.252 392.622 317.505 cv
393.48 322.844 394.337 328.183 395.195 333.522 cv
.054902 .666667 .643137 rgb
f
369.972 337.443 mo
368.707 337.316 367.443 337.186 366.182 337.044 cv
368.777 336.561 371.347 335.918 373.912 335.246 cv
371.852 334.783 370.095 332.654 369.631 329.766 cv
369.205 327.115 369.986 324.552 371.47 323.013 cv
366.623 324.276 361.755 325.404 356.724 325.523 cv
357.28 328.984 357.836 332.444 358.392 335.905 cv
358.051 335.839 357.711 335.771 357.371 335.7 cv
356.764 331.924 356.157 328.147 355.551 324.371 cv
355.589 324.371 355.626 324.371 355.664 324.371 cv
361.784 324.371 367.654 322.816 373.524 321.26 cv
379.394 319.705 385.264 318.149 391.384 318.149 cv
391.421 318.149 391.459 318.149 391.497 318.149 cv
392.283 323.042 393.069 327.934 393.855 332.827 cv
393.817 332.827 393.78 332.827 393.742 332.827 cv
387.622 332.827 381.752 334.382 375.882 335.938 cv
373.915 336.459 371.948 336.98 369.972 337.443 cv
390.697 319.322 mo
385.666 319.441 380.798 320.57 375.951 321.832 cv
377.79 322.503 379.306 324.515 379.732 327.165 cv
380.196 330.053 379.228 332.838 377.478 334.304 cv
382.476 332.994 387.493 331.798 392.681 331.675 cv
392.02 327.557 391.358 323.44 390.697 319.322 cv
374.614 322.713 mo
374.337 322.713 374.056 322.749 373.775 322.824 cv
371.448 323.446 369.963 326.448 370.463 329.561 cv
370.903 332.303 372.732 334.218 374.749 334.218 cv
375.026 334.218 375.307 334.182 375.588 334.107 cv
377.915 333.485 379.4 330.483 378.9 327.37 cv
378.46 324.628 376.631 322.713 374.614 322.713 cv
.0980392 .576471 .552941 rgb
f
365.161 330.273 mo
365.316 331.239 364.662 332.172 363.696 332.323 cv
362.729 332.475 361.815 331.784 361.659 330.818 cv
361.504 329.852 362.167 328.977 363.134 328.825 cv
364.1 328.674 365.005 329.307 365.161 330.273 cv
cp
.866667 .866667 .866667 rgb
f
388.272 326.367 mo
388.489 327.715 387.562 328.923 386.213 329.14 cv
384.865 329.355 383.605 328.488 383.388 327.139 cv
383.172 325.792 384.081 324.473 385.429 324.258 cv
386.777 324.04 388.056 325.019 388.272 326.367 cv
cp
f
366.16 326.627 mo
364.043 327.072 361.912 327.427 359.755 327.623 cv
359.708 327.334 359.662 327.046 359.616 326.758 cv
361.773 326.563 363.904 326.207 366.021 325.763 cv
366.067 326.051 366.113 326.339 366.16 326.627 cv
cp
f
389.477 321.515 mo
386.515 321.704 383.605 322.216 380.718 322.868 cv
380.658 322.499 380.599 322.13 380.54 321.761 cv
383.427 321.109 386.337 320.597 389.299 320.408 cv
389.358 320.777 389.417 321.146 389.477 321.515 cv
cp
f
388.508 322.992 mo
386.352 323.191 384.221 323.55 382.105 323.997 cv
382.045 323.628 381.986 323.259 381.927 322.89 cv
384.043 322.443 386.174 322.084 388.33 321.885 cv
388.39 322.254 388.449 322.623 388.508 322.992 cv
cp
f
366.466 333.502 mo
364.861 333.822 363.247 334.085 361.62 334.261 cv
361.573 333.973 361.527 333.685 361.481 333.396 cv
363.109 333.22 364.722 332.957 366.327 332.638 cv
366.373 332.926 366.42 333.214 366.466 333.502 cv
cp
f
368.265 334.764 mo
365.638 335.342 362.99 335.796 360.301 335.989 cv
360.254 335.701 360.208 335.412 360.162 335.124 cv
362.851 334.931 365.499 334.477 368.126 333.899 cv
368.173 334.187 368.219 334.475 368.265 334.764 cv
cp
f
390.512 330.493 mo
387.823 330.692 385.176 331.15 382.549 331.731 cv
382.503 331.442 382.456 331.154 382.41 330.866 cv
385.037 330.285 387.684 329.827 390.373 329.629 cv
390.419 329.917 390.465 330.205 390.512 330.493 cv
cp
f
374.749 334.218 mo
372.732 334.218 370.903 332.303 370.463 329.561 cv
369.963 326.448 371.448 323.446 373.775 322.824 cv
374.056 322.749 374.337 322.713 374.614 322.713 cv
376.631 322.713 378.46 324.628 378.9 327.37 cv
379.4 330.483 377.915 333.485 375.588 334.107 cv
375.307 334.182 375.026 334.218 374.749 334.218 cv
.133333 .505882 .478431 rgb
f
389.514 360.764 mo
375.173 354.75 359.016 357.711 344.675 351.698 cv
345.935 345.465 347.195 339.233 348.456 333 cv
362.797 339.014 378.953 336.053 393.295 342.066 cv
392.034 348.299 390.774 354.531 389.514 360.764 cv
.0588235 .729412 .701961 rgb
f
371.594 355.899 mo
363.015 354.947 354.327 354.537 346.18 351.452 cv
347.334 345.741 348.489 340.03 349.644 334.319 cv
363.194 339.449 378.24 337.181 391.79 342.312 cv
391.038 346.032 390.286 349.752 389.533 353.473 cv
389.137 353.498 388.741 353.526 388.345 353.556 cv
389.039 350.128 389.732 346.7 390.425 343.272 cv
384.837 341.327 379.011 340.558 373.153 339.947 cv
374.901 341.445 375.74 344.286 375.114 347.38 cv
374.432 350.751 372.217 353.418 369.684 354.31 cv
371.888 354.536 374.089 354.78 376.275 355.096 cv
374.713 355.354 373.154 355.624 371.594 355.899 cv
350.46 336.072 mo
349.489 340.879 348.517 345.685 347.545 350.492 cv
353.309 352.498 359.326 353.253 365.37 353.874 cv
363.292 352.513 362.237 349.444 362.919 346.072 cv
363.544 342.978 365.462 340.479 367.732 339.397 cv
361.874 338.786 356.048 338.018 350.46 336.072 cv
369.948 340.122 mo
367.262 340.122 364.619 342.728 363.919 346.191 cv
363.183 349.83 364.866 353.035 367.685 353.311 cv
367.818 353.324 367.952 353.331 368.085 353.331 cv
370.771 353.331 373.413 350.724 374.113 347.262 cv
374.849 343.622 373.167 340.417 370.348 340.141 cv
370.214 340.128 370.081 340.122 369.948 340.122 cv
.113725 .635294 .607843 rgb
f
357.787 344.785 mo
357.559 345.912 356.455 346.67 355.328 346.437 cv
354.201 346.206 353.48 345.067 353.708 343.939 cv
353.936 342.811 355.027 342.122 356.154 342.353 cv
357.28 342.586 358.016 343.657 357.787 344.785 cv
cp
.929412 .929412 .929412 rgb
f
384.846 350.027 mo
384.528 351.602 383.009 352.548 381.435 352.23 cv
379.861 351.911 378.832 350.436 379.15 348.861 cv
379.468 347.289 381.014 346.212 382.587 346.531 cv
384.161 346.849 385.164 348.454 384.846 350.027 cv
cp
f
360.393 341.184 mo
357.879 340.799 355.386 340.31 352.93 339.635 cv
352.998 339.298 353.066 338.962 353.134 338.625 cv
355.59 339.301 358.083 339.789 360.597 340.174 cv
360.529 340.511 360.461 340.847 360.393 341.184 cv
cp
f
388.176 345.183 mo
384.837 344.168 381.422 343.53 377.974 343.055 cv
378.061 342.625 378.148 342.194 378.235 341.763 cv
381.683 342.238 385.098 342.876 388.437 343.89 cv
388.35 344.321 388.263 344.752 388.176 345.183 cv
cp
f
386.5 346.409 mo
384.043 345.738 381.549 345.253 379.035 344.871 cv
379.122 344.44 379.209 344.01 379.296 343.579 cv
381.811 343.961 384.305 344.446 386.761 345.117 cv
386.674 345.547 386.587 345.978 386.5 346.409 cv
cp
f
357.891 348.879 mo
355.993 348.568 354.107 348.192 352.242 347.714 cv
352.31 347.377 352.378 347.041 352.446 346.704 cv
354.311 347.182 356.197 347.559 358.095 347.87 cv
358.027 348.206 357.959 348.543 357.891 348.879 cv
cp
f
359.352 351.011 mo
356.22 350.563 353.117 349.969 350.077 349.071 cv
350.145 348.735 350.213 348.398 350.281 348.062 cv
353.321 348.96 356.424 349.553 359.556 350.001 cv
359.488 350.338 359.42 350.674 359.352 351.011 cv
cp
f
385.608 355.495 mo
382.566 354.604 379.463 354.015 376.33 353.57 cv
376.398 353.233 376.466 352.897 376.534 352.56 cv
379.667 353.005 382.77 353.594 385.812 354.486 cv
385.744 354.822 385.676 355.159 385.608 355.495 cv
f
368.085 353.331 mo
367.952 353.331 367.818 353.324 367.685 353.311 cv
364.866 353.035 363.183 349.83 363.919 346.191 cv
364.619 342.728 367.262 340.122 369.948 340.122 cv
370.081 340.122 370.214 340.128 370.348 340.141 cv
373.167 340.417 374.849 343.622 374.113 347.262 cv
373.413 350.724 370.771 353.331 368.085 353.331 cv
.160784 .560784 .533333 rgb
f
404.364 380.905 mo
393.351 379.554 382.584 381.46 371.816 383.366 cv
361.049 385.273 350.282 387.179 339.269 385.828 cv
338.585 376.78 337.9 367.732 337.216 358.684 cv
348.229 360.035 358.996 358.129 369.763 356.222 cv
380.531 354.316 391.298 352.41 402.311 353.761 cv
402.996 362.809 403.68 371.857 404.364 380.905 cv
.0627451 .788235 .756863 rgb
f
346.909 385.148 mo
345.026 385.148 343.136 385.074 341.24 384.908 cv
340.613 376.617 339.986 368.326 339.359 360.035 cv
341.256 360.2 343.144 360.274 345.028 360.274 cv
353.375 360.274 361.613 358.816 369.85 357.358 cv
378.087 355.899 386.323 354.441 394.671 354.441 cv
396.554 354.441 398.444 354.515 400.34 354.681 cv
400.967 362.972 401.594 371.263 402.221 379.554 cv
400.325 379.389 398.436 379.314 396.552 379.314 cv
388.204 379.314 379.967 380.773 371.731 382.231 cv
363.493 383.69 355.257 385.148 346.909 385.148 cv
341.16 362.126 mo
341.687 369.104 342.215 376.082 342.743 383.06 cv
344.085 383.141 345.424 383.178 346.761 383.178 cv
354.079 383.178 361.312 382.057 368.535 380.798 cv
365.154 379.734 362.515 375.927 362.145 371.033 cv
361.805 366.541 363.471 362.365 366.169 360 cv
359.206 361.203 352.231 362.244 345.177 362.244 cv
343.841 362.244 342.502 362.207 341.16 362.126 cv
394.819 356.411 mo
387.766 356.411 380.79 357.452 373.828 358.655 cv
376.809 360.035 379.061 363.612 379.401 368.103 cv
379.771 372.997 377.762 377.518 374.629 379.725 cv
381.852 378.465 389.084 377.345 396.402 377.345 cv
397.738 377.345 399.078 377.382 400.42 377.463 cv
399.893 370.485 399.365 363.507 398.837 356.529 cv
397.494 356.448 396.156 356.411 394.819 356.411 cv
371.02 359.921 mo
370.7 359.921 370.377 359.95 370.05 360.008 cv
366.071 360.721 363.166 365.532 363.565 370.808 cv
363.932 375.658 366.955 379.215 370.526 379.215 cv
370.845 379.215 371.169 379.187 371.496 379.128 cv
375.475 378.415 378.38 373.605 377.981 368.329 cv
377.614 363.479 374.591 359.921 371.02 359.921 cv
.129412 .690196 .658823 rgb
f
354.599 371.254 mo
354.723 372.89 353.499 374.359 351.861 374.476 cv
350.224 374.594 348.792 373.31 348.668 371.673 cv
348.544 370.035 349.775 368.665 351.413 368.547 cv
353.051 368.43 354.475 369.616 354.599 371.254 cv
cp
1 1 1 rgb
f
393.793 367.968 mo
393.966 370.253 392.246 372.142 389.961 372.316 cv
387.676 372.487 385.691 370.86 385.518 368.573 cv
385.345 366.291 387.051 364.213 389.335 364.042 cv
391.62 363.868 393.62 365.684 393.793 367.968 cv
cp
f
356.782 365.298 mo
353.18 365.744 349.566 366.038 345.932 366.062 cv
345.895 365.573 345.858 365.085 345.821 364.596 cv
349.455 364.573 353.069 364.278 356.671 363.832 cv
356.708 364.32 356.745 364.809 356.782 365.298 cv
cp
f
396.489 360.024 mo
391.51 359.925 386.572 360.371 381.652 361.056 cv
381.605 360.43 381.558 359.805 381.511 359.18 cv
386.43 358.495 391.368 358.049 396.347 358.148 cv
396.394 358.773 396.441 359.399 396.489 360.024 cv
cp
f
394.662 362.358 mo
391.028 362.388 387.415 362.689 383.813 363.138 cv
383.766 362.513 383.719 361.888 383.672 361.263 cv
387.273 360.813 390.886 360.512 394.52 360.482 cv
394.567 361.107 394.615 361.732 394.662 362.358 cv
cp
f
356.328 376.836 mo
353.6 377.145 350.865 377.358 348.118 377.425 cv
348.081 376.936 348.044 376.448 348.007 375.959 cv
350.754 375.893 353.489 375.679 356.217 375.371 cv
356.254 375.859 356.291 376.348 356.328 376.836 cv
cp
f
359.16 379.198 mo
354.685 379.796 350.194 380.183 345.669 380.128 cv
345.633 379.639 345.596 379.151 345.559 378.662 cv
350.083 378.717 354.574 378.33 359.049 377.732 cv
359.086 378.221 359.123 378.71 359.16 379.198 cv
cp
f
396.958 375.183 mo
392.435 375.137 387.944 375.531 383.47 376.133 cv
383.433 375.644 383.396 375.156 383.359 374.667 cv
387.833 374.065 392.324 373.671 396.848 373.717 cv
396.884 374.206 396.921 374.694 396.958 375.183 cv
cp
f
370.526 379.215 mo
366.955 379.215 363.932 375.658 363.565 370.808 cv
363.166 365.532 366.071 360.721 370.05 360.008 cv
370.377 359.95 370.7 359.921 371.02 359.921 cv
374.591 359.921 377.614 363.479 377.981 368.329 cv
378.38 373.605 375.475 378.415 371.496 379.128 cv
371.169 379.187 370.845 379.215 370.526 379.215 cv
.180392 .611765 .580392 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (Agor) ()
%%Title: (1604.i105.003.P.m005.c23.stock market exchange trading finance set.eps)
%%CreationDate: 4/7/2016 4:20 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6CKj`ZdQdZBhUaXB+c`:q&6JTe""Jj56r=QcI)(gp+HhpKb`)G<s0Fr_X6t*;JLhYn8[u+_UIh;o=''NeS[uD`gtZ)6hlPCt
%a(qf,Q?(Ep=nI2BdXV6<s-]@'<ne(p"&8?HCCAZfj?:\ol%>=HHrHb0YuU$IJnAr!e#EQ,mWtqjl?&A5lbCTegro7CrDLph%-mN:
%hmp.@\T1;j$=!3iWE'O%X\PYHb;jj#J`ZuWIbU]*1]T]qgca;)&83`\ok75[2O_tZDQY9-8PoCBs*6O_Y'#)^Ej+&/I_Cf>Ke5e(
%]be'!l3A5D.4=?*4T1Wt#"Rd(]r.HiMd+TLhYeFKGaNj6#,KGU*.!_)5DK04^'QFoKRXa@rZ='\q[&m+cHKGV3BK;k4@?+Q%T2&Z
%T;Cruc9))gH(H90\0!Q]ol;]^9.0*hFg_GPN^&:nBa)$"U+>hq6dp.j]^Oota^6&YdPou??KC%J>4D8amTEAh"s(CCKhcQip0UuZ
%bJnW5%GpL(K?i4`X[bcX"8Q[L?FHk"SWJfBQg/-gfE@64[r/HXmMlHpilkH:O&]<)Gt.S`X+"Qjr$qcn$2ot;m@_#IHH-\)Pf2Uj
%D.@^a0QNa,/X%k_JgK#%*"rFIHT86fV:d"5I,1bBf:#?j*j)FeKkAZU:9>FU-Z'Q+keA!l]PC0t&jnm.Y%,"05%mWG0"kT<$rI]/
%@/XYG*uOg?H^NMVZb#".@"Goa\jecS8XlL33nD'c?hcPuU>OP31>q(jM`T@V)#00l]McLi#<VTBrOCNpp"N]qUXgOeR4hNDLI(?6
%;!GAK[,fcmlbah:jaM*=pLnHZ;m+IaoK?rQ0A"qP7gqq5G(Q7\Q2:&QqY(9qB'E)1Qt/cNJ:_YqrsJ%nG%0A8;JoNVn&q8FQGIe1
%j^u&eiub##[qgK@04c>14F.FZ1b>n4Ru#"R\BVf6/ng@A.FY'7]b?RC6*o:)7TWq%-Ehr&L>;[V3,I,\h*s5/&e]W<34iMDBteJb
%Bm0@/PMCVf<K@H[)X*gQ7IKeIT8@hae9KUJkf:dcI(`dgf8_rSp.;AAD#>Hk7h7YYD^I*:0\(qA1&Y&CYd6J>krBn#D,b9rr6F!H
%(Ui#o]A0HWOE`ePPWQ9\`*UCQ*n?^TMK=.C=tb]`X4:n$MTbCXPhQ25ALZ"^*nNRu"d)aaMi/f[K.tf9Hg`l7OR'^qGSGSO/^_$<
%0=P;NRci#9=p8*Ah"`heVrc_35E0uQIU"-BF_Z^1?9f-=JJo:bSap0Xb"8^Am0$.$+`i^Q8/Oi]iih2li(cM^)ftapO7m8.k&IuS
%?fcT@\,#3W-I$Qu[D8QfCaKmN?Pu]82*M_-OTgTVCXq95#"3RFa[YD<W#_N&111bR*#CYiXb/sRI8W6?UQMQV1E_??j$KW^<b]F3
%*KAM[b:[s>1*Dou]oW\g8X#"EIcletZt:U$9c_c",[$kXa+hrS<'!=3I/OJpKFPtU::%@[X-#+j)Po'qK0u8bG>kWaKq'-B<O:S-
%?0RXSb(Na"n^o[?hQTMFF]e&9V,$Nd:HL4f^)gs[;:qCoJ[bu<d6]V@+!i`V;nmPt`j/!ZXa[/\Cas'DK;*-n;0:(QZ.ul'9H__t
%#G!W\)AuA.RngC#Y;OXi+6eKAA)As+LiqB.bHP9$dk'-R)*NO@`S`/R4EKU2!em$m2eg?,T.=R!>e0kRY1umP9ZD#L<NF]A3HIQM
%R5o?'&\/<jAdY*>%"YXN0/rLaB"m'EQ^dek=6#B2Glt^iCe.725A/dtIkDBie)\iW"b-^K]p!KEp%NSNcqU:MUJsH>\MleDB/#si
%]kT:sX2\;ARCn,^o5W`3=RVl[WW&_%2bkl2ZeY"mCZX^4q:JEMh40&PW``;=Fc8@?$P$;rDKUmf2r"%nGj3a>3pHp_$[0E%n+G:k
%gJmV33c#RBo2YR3`8;s*q^j6[o;eH/2Q5AiMrui8ZZl;;UN.[5X-Bq6P\NAq$3(>AjJK][T=8a90moJ,jp'94HF^B=C3FscAeqJn
%Fr;6J7Wnnnrb8j1_5.^%]1f3AZ"P(G"qjXVUd>odd$X<)`M1S2`d]e;n_^V+(d"j'ZaZJW'X@0)VQm&.lF+,?VUF\MXEZ'uL#0>W
%J4kW5/or?nfrR)K50r=c3@7H%A2)M.ZgcQ1(g/?s%V?IrbjjYR5s:j3(W8o(?qiNhkH._k#;L,$HZK\=bFMi*U_37)+>[$onIh_B
%`9YEhXiK&OB?KaO&V&5NlX_9RQOtM'>gSg'k;WGfVpa;@^<pi\HMl>sbd)W!/U004rLpPk.4#WK3"obejDuA#'9M:]hJ1Tm3^N8m
%$jUp]HQ+p&hM0*a\-Lh==)7ac'F>_=f@RYa=]s8n$L-A#0/LM_9[/uA(+-ZU4NQDlDmh^o'9q_(?pIDY)fi:'fM$NaW:7AipAqU*
%N0t!Us,CZ8'66Z_JBU'uE:,SHqg/a\1k+$\TAhES)gF)$'5(&;?I*(7:<QtYd<GIDUfpRQh>RiLp[@SE:[HAq(<&)k"U`Pud7F[u
%XOe-*HnXIYMU%WAjGLh`Cc+)M1CGrOJ(1`miH0/>Utfbjot@$Dn&<@gfQj@;\F;"Z3;C-KIV69O=kaX+h0-J:$1K"$Qf[p?WglPH
%L<FPc2AMfYr0!i1R?&QbEAYQ10oLGu2OnH;3:X",6VM?CFOW17;&lKm;t&VT84ZF_I*8l4PJ0,a>UH#aH64#6"k0gD1E^bfbNp3[
%9L_(Cea(mDG3\*ld!Df3PVZi&PG_^&)[\AD'K7$K;W[c4j^72=2<eu0.sEc:44S@V-tV%T]iGp'[5H>Eri":\AD&coCg;4,!qqF>
%@oKO2CNpe,#)qQ=A)jd%)lB(#\<CYb/i9$!AsS^]<;MUR"kb#t[7N1r(Kq\MT-SaA_d>,:UG5HO+.I&8JHZR:j%Q>ODDtVBU>2h-
%19oKKn!_'%.*T-`bq`-C_Ek6XUeI"(a@o8%@[;j+8b(J-S2Kh`I?o^F-(-/aC6VG$.a%eRSUhHd\#)Ue9R/6_#1ITbE`)h^BUpTn
%7B,(<>a-e\b]6Qm\L@IcD)9@(R4qu\6itNUbXKW!&LUo8hP=D@/BCMC76U%K.%/XqdW``+bseVeUg0-8a@sd[^WocHC!<Qu[$I&?
%)WP)Gkq8Qo.Dor0'%9p%@sSpM\'AHQ1Up<T$O^/D7BWP/E6SuhC"-Km,(A!=l0"oYa8XmpJ&Ws?03;^s-J'jpf:876b<UZI>arjC
%R9Z3g\[Km/aNRnYR;8!;ecIPi9WH@5g?#-abZL>PCGVqJPA3$FW[1Go%`WJ%4_Z1`5_=K4,Wf!2J?s*7q/,3<[S[5AbdPo8)l7f!
%2KEtq"?qP3DPeDf7,)]aA0`.<CB"G0SU1+`_):*S*",*>G7.t);C?.bc7R*kD8f^oc"_2sCS(Rcbu@kJ4"0i\R0ko!g5ZQKDB"jT
%7\_iA9/GG91cM`VMTA\P@TEnK>\K,&1hN"LL0$\ZcX+bNASL4Y9n+*BqJVcce%a)u6gj\R$Q5QAEg_e<P@b`hX;;WN%ijEqjQC-$
%dJ23:nRk5Ps'coH,VR36DuOf*GR[.pdr??cq3U/HNHV?qY3YEQH#i1Wb-Q'pK(T\eWK[H%U1's&)!l@'r07G@o?r.e31+4J!]&\Q
%hRQ_q#A^Vb3,bos3/D:2<>2PVbFMi*U_37)BTagoP*nJ#WR?pDWVGJ4:m0:P&95h"S_`q-h=R2-s8KIuheOjd2`q&1<3\MHs.,2A
%hq<?JB'6p=$m*X<J'VDjg%k+'r:eXj,>NccZ(04)S=TINBZ+Gu"'`)fhq=Fdm*,4P`_KRcg<3S*4k4j`9_L!8f3<`c7]fuY53Yps
%`<lrjB#&;g_q8eT$l3UFkc!AJeltl>&t2rk_jMQUZPkTTnp]bX>`YskR;P4IZ>\/KXlbfdUm*WEFOP/abp$])#hdjlRRP;p,sjM:
%?0ih,a>-o+ZS:&8KuoRoZ@(F6K'"gkM8:t3Y1dl2q6*u&*qYa[6$9`g.6#R9f:Kt-`ZYQ"%,oG$Iqt$mn%@6_VRBLWEa2l5A3_N@
%e$k;+ZUEP&LM;W'p1UoY(rr)7;H/[r[[,9=an@!=DK99!(4;M5i'Xso<62f=r3i's@le\V^i^Re918EtG+%Q2V.[F1:R_da9-G-r
%R0?o/JX9NtAJTNY"^YelQiFa<Qj$fn/+B:N/1U.`UG*[;R0?nDfE7ZJ?7ln9)4r=i3I*e%'0t:#%aS*EO=oY4:OGRiL=Vj(3B(Z%
%HcTljP%hLc9k5[a0^6P'ZJ[De2DGe(OV;)<ihjEbil5#gaIY+Gq>.@&lg9pPkJl7hb&N":g8$7>=XBre:l[K.&lWs62:II^iG2/M
%DOa^7\lfc80!VRcl:\JK9B0L1_UcQ[8\*ROHhNVks!pNqDUtrf%(3KT\+1od,aeGolks+D=ZoRGUp=M0)'<X*_'-_N<k6UgDi]aA
%?EKutDU?:=kQKFp,'ho9r+j=Bs.U$CQ.<R9cG66Xb\oTJR@Zj8H"b[bTe-UuDD[,\YrTg;Eb%N]MpX7KRmU:I"sj2N<APp)l?6Z)
%`ls%Y8WYMI/S[6tFQ,:"XP!(pN\Q6ZJ2<*n9T`+,ol1E/#/i7%i%U(!9WY-RD0p^Ia-ah#->d=+EK"$?@nP_tnBcLC9F49Hs6M*-
%B1JM5V,sh7C=TVc0roaJ#nmb4(6g<#SBWi2,VhbYVP^LjZaJDcod],.geuubg?mMWRBBAa>)s'%/4FoSrPiX,Aq+C/.bT&O8/_43
%Q$Nq`h4W7(IeJD+-&W-id!h.eeuZ`0U_%0mL1Z-oAqbt/b0(2HT'<YgfM8OTQhj4C<[3Mni+D#djCT0VRalgIGAS\"mSamBkZZ.n
%NA('JRBf,n/+Bn&mi;&e7-j(G$>-S1-f%Fd'g9[E5'"lZos0psAqAA=VUF8LVgDu@@FC@QN16'uPmNjm9(n-BoYGg^qe$-@2s`f'
%2p*\@[c7K51lK=K7k?hkZI'A@if3t0/:O,_l'2'cfgNd&S,6P;2"TjAhV?>ERsB(=Mp.E3Eu>CLR5]=']X\uK*]EWQVT5=P:]t88
%rOE>=c.ojt4#_6DB("I-bqaA'7Pi2]\,d(F2C'X*V6b*'9:#sQBl`Ip[p%>B:-"60R/(e^_4S>RDjJIP9$[i"N8I4OG_(<9?3<.Z
%FX:Ym0kYVTVQd5A(m2Ej_WuLTA;hlQ>pj\n]iB@BY[4K&0'<qIeLjp<]jFF#6>PE6YBlK_[;IoU^<?<Bkc*6*)=a,\D,^Ss:$""M
%\e((.F`(H/o4eGV-N;g]2qg=VE]M>9RjHg,r;6%!fBcM[R1+XGlZ"Z5h^=hp\(C9\_&"bfnk%mH4,aQ^%'-74[^k70nlsbQpi_9Q
%`e@]QI$nleF&]:F=d_&$I-/6D.l9#r`cZ%g;YCpUhXEiZ_T]7Yb5\S$qO(*OU6ahC==6JDTqG0<15<CSD9%>CX.V2sjS<*D;mF?r
%Aina%i54rQ#Rc3#Xl?8,R_.g-cce/3BZo=30=%,elQChb*?oq=C\qq7Z/M$88VXS-pnuq_#+%Y1mP6SUAk(0d1l>m'dBub\:[d8A
%2Ms-_HM%TrYr=:sru:Qo-_K4lm=c/$*UM(EpeJ0bfBF.*.gljMQ&eMq?qrTikN+%dE3L\C.l]\q9aV+[DUEfPnls;.>487!A9oE:
%<9_Kj!U@eYO7c[pVd)=8Kq'U4#o73<XrOe+0N4!qJ]"96a6[h]VAH/If:(sDS"L^u0nMN7g#/YE4hjM.:X=@belbZm8)1lu4u_f0
%iZlXC9]I#^NNPor,N&;TX"uj%P.XYhiA/n?QjO]`EeaQLlr+$)N@fY(ZH9t<didg$?>47Sn*U?.BiFEPeQ\T2([\WP()&XM3kD::
%5(<Nk\8gr1WNVGhGS>sF/7u-M-GE*lmu&r\"eF9FU\h:Uh#1/VAE"5Fc,?sBNQ\E8b2/P<6P:@b!3,qS<grkS*0a.5g.].M&6W?0
%4I,V^EhP8D-ChMM2"_(G9iA(N[1>bnVc;u@1&`nA/)2WsAm*rhLec)tL(HQor%;d[1"CTod\PB2<d(B=N8,[*bI]bZGLP5]F2hhP
%Ai"GuL"Y0^P=+!A_3NsW::]%@b46m5$0:p*=Z$k2UtrQEa/(Gu9L[l,@5V@aH5?>o[Q9rL<iFV_*mRd]Fd?M4HVuDEdgRl)&u<(T
%Q7re,RapV58.;g*3dB1ima*@e@q\`Wf7N$d1\o39s*<//EZ\Ze<p92L:o_*"N:N^rqRal,^b,/MBqf1mDdNgK=#>D=VS-0.>n<Z!
%7d`/5$M/3*k<g,K?2?)?>,INp53<m/':ssidPmsn+$<ucL.*2;0O8Cj4rC`kakVXQ`X-^455`:,kOe!D_>_^d,PNtfq5]XYr]rd:
%@e&[0<LP)o08%&39)G8X!nYgfgF:a,?8#.-m2Q0J?V&AZS6aH`GcHen4d4[*]^K$aX/A#YH'\a!p,X2A,jGDg&,uf%dm*d#T:H>f
%[h_aeHKaH+Djpr*/_F3r<Kes($LoSF\G*%DfW&G[s"DL/"46Y2TI4#]<Vd.[G)PH'EQ[(QUC[ES_Uk#/Si\WHO*6.r4ZC,V%ta(i
%E7B4ND)uF'&EH2>T.^tZE?lD$=2S:l;pLS6EsENHT=KUM]?Tc[?fb%,H)1#)`qWu<1De<5S,PJAUcPS7nKt3^)2-M*8@fW0?85/0
%O=T#^3god.a>V0=b^sNA<B1LX((K8kKMAY6.K2IR/l_@^#MI\>L?M('SWRK+a1h>8(CEfbAJY_f3uL^%4=gAJYLT!?nb66jFK&K!
%Pm.[jJgNRWr\*uihWW1Ts7LbWelM2[rB12Z4U%"]>H_%ENYn,DNOZD&NTKbu4kl,qLsWShOU-q?5ip&dRM:F.a9u'Q,LO[+<a2.d
%r*J.JUM'F0hXO<#'"r,M\`K5)hK1i."DNLj[9=ATG1c)BM#fj6Ff0CF3ek\=3SS7WX9fZ+.W!51a.3W[K!a<$bbGdBb#PaRY$j*b
%^Ri[:WXbk9ijhHm71@6/9Ke0J<Z%*)0/rn\GP>kP4gP4t>=.Co3^G^gr"\;dK7A3XNG>Rs5-3:M]hmQ(d=B_+MY*"XeSjWZbK]'r
%q)HI_[+bJemU/[\H;Q%S=75\j>NJU;a/.@.13XQ[4L4?o-]#i*Z>h74=(S+/%qi38EX+O"BtRV,f1jZPSFOHj3[gXp,G[l<?-A!q
%6%c+Kf[4e-&_\j=X"c=Dko8aPkod'4YB:):W7u4_iWUuOjU1rm/%8aNp4?%uKooQdO=P@ZDQ@+3"[qj16Qm8T5&HJ#hs0rl7]g>Y
%'5d\Q]A*lW7(l()*[c<[*B:KEg?5Yt81iiB`X2&Mff!/U4!aN3]ldG[mfr0.]c0a%*J3(#3_IC7dm*<1g8P)6)+/BT0[Cn\hf]H-
%83<5T&PnMBGZ)&SCKdU)C6PG'[5+R3$t24S:pO)Q/AqhVX&lJ3mZ,!HRqq`CqqY?AY.[b)0M8\)lL>d8?Z,7gb?uMg?eVY1#+hI(
%`3lEpIE-EXD148fn+K(9GRpeh"(/_/pY*QpiND+i\_VeG^Rnn4@Ac0"%([g]]$,YQ),tDM7cKc<#u$)1`"HpH?I5Kr_Lf1^910)'
%0:K^Pcp=Y/?L=q(P=3h"ZfK+j]i^Z"H#enhM^2M50GpmQe6&u?'CoOl7#JS8g8YVr+@bcI_L]Wk^"*U44jjd,RQ?;&j^t]^,8!rd
%A_=Z"njYgRnu%2D;SQNK.JAe!9baF2cfNK[KsVZGT9XcQICiK.f0S%A2]-F.7BHmhTX.Wl[8$Y7O!k&N4[_LE,=]/oBq7^oS<XX^
%HLZRQRsl5I1q+M'("A!Im,n$<m5D4?2tnB^36Al5/*O?%[H=Dj<9gkL#sa0!rZM;eN1HZS\?W83Fm1TH0E+Bk6=Q.sA!ueY?hg"3
%BGRtlH,Tde@_575;[o`oQ7_jp<NDJc4]KGU1l[)&iEO8Elt"/+BrCZ#:a`t@$7ZA%]::$"C0mn2d?$j?`Ferk;D[urLIc7@B\0(a
%dSf4+DU/(&P29NT0p@U.]m@Dm-H:-<_X0(*P%_#Q-*4ulg:"$kgA(>/@o?V.f],VJ^jKo,,&FuW^hqT&gXV4<&<GL[[7<tn`I$Vg
%LHQS$l=XbH.(KDN-1_&G/I.VakbHZBZ_:VOd@BICWk%[M6\.kr9(JmK48b?oG"C80cJ`""De@t\^VdOMO5fNBG%^$Sc.LIYT[AhO
%+g"\PG2,c[O6<o]VJ[F)l;<)uU5"HWZQ22>\U.HE29H`A*a5I5GS]C%/UaZkbKtm,IaPLL[#reF6^pK<QJZS/;<(D/hs/]^rf&*I
%=rrgG3,*O7Hf6aOLr]=1>M/+t`T_2+m-8"hL$(qB34Bc4#`9ZaZJf.80^VopouaHG,_]u4Bm)/jAST^>(HCY5SV&4?=M<LM&/a*i
%+p?W?NRL"8pgf=_7l?33:4F;eF#,,1&mL19H[D^06#.+,Y]#]QnUe#[L\,>pqF*Nkm1*R=NbVPX[+_;/Zq2CkRRaJWm5g(<SWV6P
%*ILuWF>$h5(_%+18I:u^FYAU'W5_CLl^Z_B;=9rt#A0-mFZbirNCR^[ULl/dXcF$-W_pBLe7r;<*RV%E5E,<33Gc+7KPnqq*nKDV
%#%R+r7ITB._/U?ad`&=r@)FrG_*^%0JYqN:D$18;WiR)WfS@X1C5;P?#G'csC8"YSK;%.tq8MtC3o3+XGF2M4Vk$Vq"EB*1TNS0K
%e>FA=o_;,/EuJd&RW's9X_lii3F=#"P/=j+WGknk=%s"s@4b^Nb!cqu>BDN-->l]J?XUcJMluaWq/r%O7NE(i(`6b9\^II#L`cK<
%b,@44'f;/]e6(F+N4<Zubd_L-;4Q%Y;O6rOrS:#u;=iW"c*c?X`k!CBa'"XPELnE,+Ob7n.7oNW7Ff[O:!S]n4QB&of7c+dgp5Hl
%M4D*I9N,Md%bik9Zpr2.a<959m=u%seF<ES5gD7mTb8dWqWIp9\qRA$/eLGgja3V<Fb`7hng0;Lib,WPK3mtOC^@<%:SpL"]O=p_
%r^$K,/V@Zkdor57o]ATcO*2Pl=Ij=0Zo].t*+D.&eB_?S>@[crL'OdW>dG0#CN?g0LPb[%PDo$*R4E)Z(rK%&s)9*3\6gC299VXf
%*cW2dX*#Gig._aQcEr#%_ea\!0Um&gZi+!I,i`7e7YQ%.]i0Kc[DBX[WpT,g3*2F(n&EZ0-)cOKUWB:ObXaD;GVm7bmEVDmC6Xik
%HGi+<V./eKY+(u&'qT0CgoTe6qk0$DL%A<JD+q=`;8)a8E^VQ<Ta]c*;cMR.bV:==C%,n6SU^kLAf'1gT\N*M.7*^AnmB5VI_AgX
%ALn7+lqmh)QqXJ::[?gX8\KSZ2]s3NR\r.kn.1>0-o*ps05[&FOY&_'W4!1ggeP,M)&TM^X5-]:QPL&VJ9%jD:J!Hg?/J1jVe!,B
%#LA#-(44:S*:mjG(=K"_\%]93fgVW.Q1(m"=\iD^rVUWrrSr7JjUVaFc+C.qf2au&NK^4!k,mgC>7:&senaAppQ"k=fnOQpC%^lU
%PF'kLV<or1?ESJJ't:On?[?e1Z>LUN\+l_C]O9Mt?2g.>Ye%-em]L_?a@Glie`H1&SZpZ9hV.M+2qtA`<j9&>Hi0[;bieF8T6]"2
%oclWH/XGObgeXEQifC9Yeu-K@6DLsE,u3Zp4FH/Dm[&g^SbHnalM'/a@u<dro>@8sh/WB<pYD=b?OH\rq02!d2;)m3lfuW,l0IV4
%2rAj^>aXiDju9>2oGFH,l2/<_IduXfHZuU+>5tgK[!'l%5B/oE'Lfan/QTg`cde;YpYMs%B[Y`0Do^a=o]beii`:3ff%Qkmj%a$$
%nTIi*i^:91VoSQsjr[V^.e]A-ob6Y!H)33-hL2p-C>o'-eb+9-9C"nD_39)hDkAR^.cjTVW]f,sg-/Ap(<3,TgSs$)^/Y"']Xh.9
%H[9V8oC,DfYe>8T-P3f&]);KEUrPI<n%Pq?R[&5ZLQ>dp5B7]M*nOZk;>8-_F=LMSiTZM]L9))]GMa"ogj=VLhDD6*[Im%$>%I0o
%nbhB5YZ>sl)@D7\gN0F]>:[2?D_1ZADAO%s5!-6G\Eg88%p.Uf5;1-rgL#6]-d=Y<l&##i2O<I2oA4cA"K@uoS_eQ+21rWDDB%U$
%m?bd^jd!HS>7Wr@n/)BpI,e)6#sH9fr,^'@0+X\><qN;TpDYbbqt5Z&mqO]T;/QsNIkVp-H*X[tMbfBUl[dnW?<OH1GkI%t1R^%X
%pNk'o+%*0]Sju`S)G`ZC5Mei0^g`[ZCTVisj=UYmVj?qrq,&U-(OnOu*^+i>F/*!SGA#/\I/@O;=n1EA@K3.O/*u&j]I`DB'.ct!
%^OEgiSZ8;?5(%k6O/SkA2oVoV:?0a7HG8u%>dTQoimHUPPt=U.QL@%cEdRVq=s],$O4cK(&)XKl+.eg"4.VSEf$_b9:O/3f]@Lt8
%"Wo9X>\j/m#-""[4\>L3<,-D-'Kp((iT'obWE9sP`cHK`rn92DC7ls"@;C"2^\;ALs*:etQC7oVR36pfqB%c-!8E9&qjFW&#"dA&
%on1]jh=gg?'5.'g`hB[.TGVc3$V%AlGWD4LU.@\4mENMaF29uJZM;+d/c-`!h"ouq[1lH<lL"Od]I:Gl[e@#6Ie;DO`/DNJBt`6q
%aHCYd3c(tLS]C3Z_4BHVj%jI:p2</:QioR,jq56YDP#,WoW0u%&2pD*[.M(TG.rUr.eIGK\(UcPd.\V7>H\6EZFiW_bBg9pF'*N:
%Ibp4]Df7dsnQHEgmP\`Sn(n;5]mTVMq5<E7;ie\T9Jbqb\a9Wk]n:'pYkS*AnPS]DHq=cdFRPVrfRMR8?@B;t<A&-5Da)NX<ZW.u
%?QtB72\oT#AEg8'oRRdlmr)0#J)1X,^`0+V<atpnkBkr/.j*Y!m+0o%P3q+jT91P7B=YW%&+YDj+8;5rR"Rj<)]YsI]6@VcDu\T/
%.2DF3DXjZEmorC1m$:6KpMZTV+s_].!GsFcE8]?0"jl0aV0N^0+-9[^Ci(`i<ur"uhn5j=ro)/?-]]:3IkC"=X>\[G[5V).G7..=
%M_AC!>:cmmf_>2C`od%^;mkM4\N73#Ir=>P?D$8;l?Z6A&$4<*LQC5]B.nJJiO?9"oBr_B)tO!!DsLkRI<u^$Se.fXa$t$XoMdBc
%Y<S"S:ZsOt:9#b\n9#0QEh.RJ=(cGU^;7"6\U3t%FhlSX:kb1RP%u]dGNHZ=p'-te5XM5/+N<PICM<Aj*_8Eu%nr%h)GU6'e74o9
%?ogA3-_:IFTn*Pc1;HlJN+mi.qg^9iB^oSWN'Sq%d_h[!?ULPraLsDr\^N<_AON-0e5VD^4%76Qna`0*#^]7nkV4SZCuQ1WEoHk,
%?AsH#TZ7HlL?\nf`Ifrj9WBp<*]%-m<uri;oO^2lH;&WNT+#5B$^X:VRQj5cWMdaC25^mpNsr[P`nM)30u"-;Y/]U/H9G<=ndZ!U
%ni4W-NF*3klbJg_a$aHc4Fh-6QDO3j:XdcqO8JLO"&BBX-Jj7Z^.BpDPF-X+0o/[DZ=T>s.IKT57'Wc3VSok&EO1fi0o6:+L8bXu
%!%jt^T+$p<N*N_[0?9$a-CSTud1^bj]8e9,^ZJ=,#pNV[k?\(C`;'pB.mh"t/F4Du^EA1#7=.:L'_^FtBU2\Q32OZ3c>=U6=mUD]
%@BoI^bcR*>HM\4RQ]7P?%l`?nGS]SQ`B+AF,@N#0\l$Rm?tf<Eb,?Jcr%R*B$(i3+(Mh;ZZ3fuL51eV2QTo>R$KgTDkNjLj;0p=O
%"$OY>4ZD/U`J#P;pu:O6/,>R?K:oI'gj<8XlYSL;*c=32:]FTOXnm,+d-'&p+1l1N$!X%rIhl@oYO/Q*UTL[gMDjOm_E(?MR]o'4
%jiZ?6K)=[*DXi#8_=q@?'^TI>[gFeF^OZirkOs)eFL1j*k\-H)gK>b$rZrYs(AWkoMi7N@2E=+U!i*<ogTSGOimF7`hP8fMB/6GF
%I]b22gm!;;^=ZXNf2\Qc,e^%A;1Y6X`'4rBQ\n#a+0=(C300Ad)KWr0qE>HYQ7(QqGIQ;ClkX*;8R&]Oormm^?t_^Wc#Pq:#>sF;
%8b%&qr_rKC2s-=mAAGmm[smo;j8,P)PK-=B^!`]K\LOMqrV9@X/OQB]f4!h[0*+5d]T">W[c2_[UPYD/kB#F,U=_Wc#<U8sE'.V(
%+RL*nVWscX0@gH+lGM'EK-u+fo:pY#?MfI6jJMTjE83C]mXH,D@5Om!KFe(]VKhb,i?h.`;Gl;SDQ'\YmOV=hYCtQ;Q+NsWm4Ys@
%mH]DZV2]*e]:AI3?H<0u$[3Y?p>!gao<gM=X+\a<`[`&8k^T*Q]QppZY#N&@%=a1Z^3/%H:]#o/`qG>.G3hd2"t/K0;ln7?ad64)
%&"dYZ*/+7_2,DD_J$F1nnf\nM4%Ji'>s_NQgY/WSHn51>$5aUQeOJAF:3d"pIu<81E!h@_rOO)Q%B*@M:#+%/H2.#;q.KJUI<Ti0
%`Q(3b`B:\r*rL.hDmT:mf&gsBY.hU2o/c@b4J)#b!/u-?5<u)/4mDZcV>W=u@d,W)au%+eGN5>J%Tf"ShTI9uC=99b\U;oaq,,do
%>Q./h=K3=:0<6EokLj;iWs;!4Lo8crXeYL_7RTuF_ekn`/`S`I;aJK_GHrB__VO4F($pq8`eg*k)]s^+9D<YqbGCs38NqOmn`th6
%6Y;,Y,f\Y8Cu_qjK+fR\f&hh\]O/nO<Yni(?MujCFOn1tB;rGEUPZp@Ms[.=>4L!qjjfHgpOYm__7/kUBiiVuZhRX\e+\o?BR[MC
%Gl7b[/S0sTZIW@Vbtgaqh<r;##L615KuMgPL2u_;ropO;^&M5>5'hBs]Xma/PT3<;Drp!ULPS;bMm"[ZFIr$\$%8tG)Y<%8pF<P)
%T9bC$qt2l%(s_MclS`.VpgX9bTCMO/GP1?OdX4jZC`F;:YJm:8+p,\%$a#coK"Y@_]M[@]h]K(sF>WT6mZaNJs/4V"o]f^jIsVq-
%d9f!trK[3/cD'2Lm-Hq4\lARh*RUn%It4pu=?T8@4aoeHZi,EuQ7m/L#KnKU#+mB;r+s_P+5^9#q6UdQ5@D2$"n/[DS/9N./SGtQ
%1[MLI4$ONSo.C"A^i/4OHV;@g6n0":I^Q[dD\u!_1oHt9-VLX-XtI23E>CRjNn9#S]&&q-K6(7:PGN$enE8IOT,*?>s63j(4`F.(
%qo,jCX*_<=6SA;<XY.;9;s-SB$C`ia`2=Q8.j$t(jse"qm-_(V4NekV]BclF0>"8XV7Eo'eG6>ZrbDDfe&Z?I6@Imse1.)K>F"$8
%2=%sBSQYo0[r7Ba1#A/WT0M0*T7&0]["5:p1/I91_HD>-Vf5Tt^AZT&QeM7X16QA_ih;SsLs_67(3o<>b5FDC#@R+fNPe8Yg1dlu
%c->"XHY9O(E;T&E@JK?8`j[&'$AU4ZP'"%>EOb^MSfY61ntGliYeP\^<f1I[DFNT'l_'R+NGTu)_lmFmiK@i_9C%;8A36r3+Z`^T
%0'q=iQr2,[5:p^<(L2IafXJSu2$hGaj4l!.$YB*2pD9;,qiTQ$IbOe5Vl-RG:YIcT>,sTA]0jRDekY],T!)9=s*X_1nJCLt-=!tW
%QPsF!s+MP9](Ls9PDrU`"$3J7kf;ilO:oF=H(-pP:OYFGP43A&.c(-7djr*+.&r-%5(<%%>-'X[L"(qac#'&*rp/%n=;i]Ph"lJ/
%-ami5p7]Fn_cNr^`?YD.]m0=F2Wo".n#V`\p#_kd6QKPQYQ,.9QX6dYqGM_2@c``XiT-KA`R9K#RP-6-G5htPp&.!%K)J3bj&4jX
%RPWR(Md,<>g_isghmlP4q76sMRP2D-q@eF_JXs0Rd,4Y$=uCU2[.)>Xd]E`^K)FE5ki>Cj60<CFO&*I-\E8G>qoSq^pYBcHn^m']
%^_*08_fBI?X&8@^^:_$_.djt)/'YIROu)QZj&L0fP8/".D&q$%f^@aO^k01BHbD]E4^22pbhjNA(ppldM'2C+C:.KAh/'Pr$eG70
%gPu$siE+)70h<sm]C:XnJTgPBa7CCZ\%O-W+70RZ6em#pKk((UcoQIN+R*'8Zt5[&,H(%J%1pMG5P#0_ek6e%H^eA#k;L)$`&+Cj
%7-!-Ikps$Sl5d</po'BnBP7!L1&q)\-,I5iS:t#._>OOmX<VM@4H7lPT33cOIc[+aa)die:#_V#<BQPCjb5p/5Q<:4,uo6&H;p>_
%Z0<W;RT]@/QeV;/?J%>U+";tC3e&3S2?*5s,RgX%BC2>=p5JYR5N]Yi;KeDa]\Y+(p#!ou$HDKJ[i2Y,l*7W#9sO,N^;$30caO6f
%0<HAD[JmJCI=(aXLPCQH[iSO-%U76p8$q$cqu5nNq>8a8CQ4*n'0857["M0Eo[O1MmTLeF?sp@[#!@Mg'[4r*/`a5C5KOo&H5.lC
%(8a;WpHFi0p=mEPeR'P&L`Gu=lcr3Co,`b;r'l,%a,ceAi`>_HYP<Ko^4c+-/TpV`W0\H>0l?RNDVYXAr>`kY6gWOo@E,FXE'(P0
%i4ao^Rg01o1Fios'[G&%4_*gLk/tKJ#dGPZV6[l.lJ#a^o_k7qJCDa+D#R@rTcOGS$#P25Y:),<S:2ejnR9.VFLQ\Ql+Q:D/fiI5
%O4')gI9S\.($Ro$QbGW<_hlgZ_6l#d2bc%?XE).gGH^+dpFdR&]Zk=)GmIsED3[>eG40qUZhWPUf:U#ijkHEtU+)/]]1$K3W(iH9
%b9LZanFbV=h9jh%n*AZ5dR!?f@VPLAYb+,,F*PH5@2&JH4/Au[(Jd/>i54X=-ZB%.`o2C*IIYt(>8rZ7OUqo^=/<?kaO88;_97Dr
%#97<XT6su@=Xrd>[[1<DqlOrsd;aUBJ%&N_0:s"%e/hWF'ltVPpiNmN&VW'PaWBjJ]b5Ee\_o(%s$Y@IP9lS?g<M'is80,mV..3T
%a.%"g%(WiL/2[eg8Yb_2?TVP"=k%',^lZS^m.U;QeMnF78Obl,Rm5Nkq^(=VCfHaY`sL.m)slJ5Ph+oB>M*e0Is7L^]RQAlX?l!V
%HRmhi$X_M';.&"46b5rEd`,X/+PN$O&"XRJ56SU*m@HGpr-6Tfc2ofU7d!T4=s+hgHq`OIZ#nab]Qs48%&0XFY[@<5j#KOO<V^7@
%#Hh6MhX4>bd?]3m:mr'hjB]OR>pqnOF^ub;:lX5HH2$p/^`&q(\*YdW$m%81Vj6\!3c5^o>$i@lTP8)t>>+rQ%oMHec$mD*Xmk?!
%I4o15U_MV=W:^,fk.Q4Umec.`oB"E:_RlX1CncLS2d-<`4?_'cp#D7a4e/3mWC]S^[%5H.lY#r(;FXt/^XbU*:*"c'U1!52q;'5]
%"=\!\%GA`S9D:@-9$\E<haAO8q`FW5o7sgBjJ2%S3uaI&KdruH]U)DO\FJ`fXSr5/\Wp-Qr2[H@r,&]GfO&h5a>9r],Q;A]>\Fk(
%;ER#uME,$G?=!R,G0OlAm>KuUj0')8J\CpFUMr%&*BR9TLp[u73G#%)PjWF,\)UGcr2mU143)VQ4*L<65CSb7[hdR:SM[D/49"dI
%%ScX7M?'`7p"HOopTSQW5,eB1)KusdXRba_lOO-/%#mKn)0gM<M/_dN0`U$o3'f6hP#p^b2lSXO_2Q#.J)%#iUJ!,4Dc:T)l[?Kl
%e`u4uGdI6?as3&gGD`5LrD'Kb&fL$Rg?t2dK<<WlZ*PnL@GA$E8*76qamAh]B!E9p-RV#-nN1QuXtL_/3Z$X(9?gs*EC4Mjs!6e4
%\T0(=ohL+/^'^Fs#!EZ=mcOL4$(ADBq(F9d\XC>rh<07GC>ibmY2%!WEAD30(abl%gZ="Nn#krB)YdC7T5,+8jBBf5:p&[mSq\0U
%\6Nh3C/*53QXGr0*'H8"TLgQnH7]P)$$%oK?8(L,A_$5cb0lO/m<Yn/.Wok1PnQi9X'+N\`:77#ang9N_*6,TFVIWMf$3lWVl5fN
%5DM2&>sN!?\^IIb7pKI0(St+!p>-%0mqT\r)-1!B_QH<d#VKjR=;^%l=`@Z-[FBWE@;Vjp;FJpjU3lR_dUGi4q]D5oF$%+(Gg<f]
%K=tTZKNr0.'Y(+lnUa@Sc/+Jlaofbjdit+QPtVHJQS^@"buWr%dqT"S>'s=Woh:\GcjOl\X/9mN=OO[0&pn"RD3sp9>LhN/"fXod
%MjO5@1bP6:0KQkF260:m%U7f6ATf\N2VnJF*oF'K2,Z'<\eJu_/jN7-Bp4YV]@Ao9a^JmFUStRr*4)!3Qo/WLLXa$u#Ii)L@P2,,
%c-BP<$Ln9s-,n=LMl:]?77\/=%Q=pYTe4c`-lf[iMm8UQN`_!If`Hk"Vfc,0D3o_US\[?J(\;HpHP0#!0rEm?$P:!R1D>nRM.;_f
%43Oq4\!g="[BNZ-jfKQR0"aT<]h6YjU*WO81V8"p4r_4$Qak-U.Fb;^P.HpA@-kfHSj=6ZV5i.g"Wo32XUE5T%_[D5cE"Q2B\pH6
%Y0&"-":Z5*UhuJIQ]NqY?EZiK(CL''\"rpoFL^+4a_3qQNl/j*1Qq>r%me`=!laooqOHa@\?O'-7JgLYgEh+/661mfQ$^@H8\]8t
%/D'/i>TUR]p(O8T1K]0<f/"`HPJp9Letp/r5a@37c*"bZ+dTRem-TC[1)^J:9p6/A'TJ`b>Y;.PrM670HK9$75G!"+'5nd-GfS&K
%hNEM\F+5Il[);0%]sgPrf,TX;bdi0tg,ApbE]/I&LO]57Sf?k:qml)@Hdfps_[;L?h("S3X]cfCCZW8L#LrZg<&5!T4MZ<'p]X;4
%rr1qBrBL;QTHCqm.I[,9-h+\oh\(Z81W^Sj0SKWTHqT[&hU3+QY,QfJf/6,Qmhh(M1L2s.=i/<=#j0QVUdm+'DjZQSg]$4tQGCga
%%Y^a-b;00?S@n#eDU($(]We49Qn)i>St/5sD;2LUNa?&?O#]jj]H^)\!8hhu0_:%g6uJQAq0CrO(;kMeqDjUk0cc;T(A2]AR^ei2
%/K36Zl`;'2]nGA+L!N,36n=<G5kD<EJYAUHD4*C[julYi=8E`:]^emkh,=;@fWK\9O.rusMRWIC,),7u-K3nD?/,*o%cQ=ZI[4F)
%>sh6V+dh5OUB-bH98A?,N!O%lDI1]L!Hs45"?Q[s('"%>c,Fm3Qfg]]D((5-=q%)P]9o`SkViJma0G\aD8o]kbll@b@%JSWN$`:\
%0?\Q=0:+"Jn>(2u_h5GBEX&CMd,RgO_HXE!_FB-P/C3o]Yb*4tKQr!68^$B[W=NB(S%292(-RqK)Q6gdj$Sa_)3tqe[UTjac#A)$
%'Bra=\57BD4CK'XHGgEU,n*@9'*9MjaWb&a#mk$p_g:+NSo!WEH(-K["2iu<*ggX'kN;6r5.p'6J/o*VB6H(Yg4*l;-u;R)n#Jqi
%)gf;;`m*d9\t4=8o!?CPgAE]bca4/SU,Ko0n\MMYb@TX?fbV@$/FSrO+7O_<iaZ=FWF/kSBt8g,Z=u'HDfsO+m0[T]YjDRPLb)i>
%XeWVJ@#;TSJ(r7QdPbeQcpHKo_<<V>6d,[i'#M'jYf)W#hdN`Wh]in#KH';/h[c."G4U`(p^q1$!D3b;oc+0o]@&KkUI\A264tr5
%G\'ifhg;4R@b>i499'k_*<o11V8mg+&Ktb"Rt[ffIO.Q0,LCTB8e)^3*!T&X4o0BfKM7"\rU.":ee@ZZM-_d=oi"1RE\^MDTtj(Z
%ZTChY+*08UIR,,3V25^@M0G,XXQ8rDMg5@r>KF$n^8=9Dnc`Vl/8>RLPbpmlbSFe!geIlacUuc'M;H-XEG&!G9Zr/=oLVN(F?D5.
%`;cK]Y<F,o=T4^+%0<?'1dK$\dEa,hWC89b^pA1")^7_9#R1l4<e6]@fQel!mX5uD?$\\fQo81^o,.a+c0%-$k>Erd8JAee*Z6U[
%P!h"P?]N#R0@>%n0^a>qia$+^(/26S#n6p4-?QrNdfa?S6`C@ROiCFf?_[-g@,1WOeB9lrQcr[O*-h0R?tr$[Z>W>,]-L/s!q9_`
%T]DrK&cmCe4$ol?&U#6'9Q\%nf"Jqbi&Sl0)%D.n-ZgC$o?"X(4dd)70'OeA'590A"(UR/pDsONP2<_&KH_.nSC%o+[He:ZU(p7X
%Bfs<MIYoNc/1H"a^;F>[;Atmn9L:m1P8OG6G)\cq6B7t5(=9F[_D@]=4^qecnAO.<!jACUXu<+I5pW?b"F0<;,?h7'N/lLIWCeCC
%6L[CVLV^-h1p/O)KS##+%te0"cA7f5+e[jq9kr)fQrFSnpS#C'l&;Z:.Fo%"N/#,sK?fS>@6+\rn73h.cP[j*%(,Vd-aY^j\dnta
%h(M.1.nrT+dlT@^+i)TlY(_Jgi3UrTP(9HG,9iL%9*?Kca#:>)N]I[S`k=#m^Iq?.0AEh(JS,JsVC$DUZ7j-\-#8Z3$%W@GG_k$!
%jN9/YZL\fAhkfH[*S24"cQI%351`%]9>H7)bd;ZW_ZP,2p/(l.C&^Ti@BcfbHWQ_6B\K:p1^&'Zp)YDOXs$[i(;fMii0H'K6Wc\H
%7t$0/Y%$j*IPS0F(JeWKm(2RI%.(TtQSu!oGX#Ng3_BB^[@cYH'R1@>mtt$N9tSo>L&eF3hSV(-iMXpN+7?U&?s^gf=RAVLLOcO:
%ls4$TZ!A/g*Wioj9+M,g*"XR*ata5CipIL@6<HS)a.7teY@Qg%@7$)FQ^H)1fX4q/(n0N;QSPNo/KrrW9p>XtW]ngY..A]ehA)q&
%)K_r-%09eEQ'YUWfVjZD2F3W7(9@=#kFo\l=F!u8:i+K)3Y)C#\!7a:KqqQ\achtNX+<ip:3R`\\seJ"V9+DA>[fGjT\jG?7AqTY
%WO0nh!?G'=DVCI>#8h["Jq\E:.G6[dPQO]'$;=1Y=t#1p#,G%J,iIqH=?B6C)!99gd"Z2_G8Mn!HPu*S@60].cH^&.0K#P>g9X\'
%IY>IBC#>\O$(Add@HMD^T>Eab3Y)D6]e?j300(+G+/CtPT4,ObI'-CP7-H"OF,D4TN7LkIZlD77)#(ar[`CWUL[5Ys*dIBT?tr$k
%V18-b72"hn4(h.UmnCjCAdgN$qh7*+2`U]TFRuA(CP>2%VoOZ<(!P/Ng']^aN9#b.EO0V_#SK=`4%;JtGDL@OGc6_`nIn8\7C`P9
%@SsHKUN!.f3*+Nir>Vdh9s5+AP3(nKU'/_I\tBk-6C&dXo[4:?RqBu5-#.$o[%(`;U_&W^<X9q=3];d/N^IjAPXpdlM5;@hXDh3;
%ZP]6PW&"]/@]:V>U^M12=_?o5kABI)cCL2sU/hE'6"8%Q@2m\UX<lIfQ4reliH);mRjZNc0c,@<.%$e)_7(u;!*=.hODnG.E=%JE
%F:3Xf;TH,.I6_:&2Y/`P=m/A%(:$_0XM""u+f6]B)D(t(aIV#8(`BK)5#@+j!Y>CS)R_3:>r[q)"<\uf";8@Wr';T%P*MnfLIL&5
%N]7Q*m]KS^`5E9;Is?i)P]2pZK&hbZhPh)Tc^-XD"A867>jNUPb-H_-)@si@^co*Tnf]ZlU1W@&Lq7"d4W&!cfLU#a`57:CVLTMT
%VJcU5RCZh>8^LL\'uTqH.%1;so/PRHG'l4T+c720X%#_^*QQd7T:ZoR$I8l2Vl#$.\Xf@%)d6"I;Yis9OGkZZ!A#A)'b1go%KYgs
%%&E-7140'],ht#>"2rmNT$l$qgJUnkG%.%[$iiF(WLsA;Z7%Fp/F=_0^b-d5R)ZuFbRE+?j=qnla)KT*X5OBER!N>mZVXRo+A<l1
%TuB;#,^J>C,2Affa)nc[61%,X.Lg'<VH/fkKNDCd#n8^75[C2o+YH`3Ya%:3M`>j%d*B^<4i7`N#F;@75s34Dc;JWPda^@/L12pe
%YsLlLjE=K`S*=@d%4)IZAe"I,*Dbc?$ce(K!Mo%\`&HRN3ZjJ*lL(odYd>Q]3lhWh<'b'5W`6ejZeQ$h?'0)"Zr7C6XcqCt$RJOg
%&+`&8[F]i!>1SK$Y$Yk!SB]M-10^>c+pV-%XslADQs=-*AYfacjX'F+OPTSkP"Hf9-G=$nHTPl/<o1e"7rfdG1?i9OgJ5V5,_.\9
%Ht%")0T1ZE87W@K[qHGB(9N7*\H%^KL))Z[4?7I%]klc3g,,U)UdY9D-HImp7=NOg8L<-h>p:HFUOdf-b70OANO8!_##<Rk(pYt=
%A6/cn.8ql/1TV/M@hJnX_WI)"#N?+i[iJXtNt"ZViSot8X/PZ0?N;GD5RTB0^<6X5D;.Rh].7jI6r``Q'%8RhI2Z7B`Qh:cZ-r+\
%%J,JZqLlqO\EpW3<iB!oNSRY#ji.'kK?@2kLNk..Hf.WhR1ieuOtF'a(,71b(I!)tU5?CU/I2I4"Khec,W^H6m3UsBL=n18.%sBA
%RMnY"OoUfKg(;lJpeH!ea%m>dN$8.9cXrR/du4k-LGT(J2/W"lWhhIua3gG_aD`>BhLsE_="qgjVqV]!&MS^5D`0S,->_mQBpZk"
%+C,X7jNc?p7O$\h0X@]D%FauM7hTu=*_n7U&i?o..mp7=^MrFn^,GB\A6h6P;(8IThZ+2le=&;#V$SnFalU0^*Ek$*POYT<AAJA8
%%4!J`mpWU0@%,_A"L*_6*g$!gX#++i0JG/.S!!8IU+l[bL\ZVi'EQXDk_-(<!)i)gL>ce_C_"gVUac!b@'3;6'%+mFGtH-&EG=qD
%^_WUm$WmRiVN*5oB2YZj$3<[t0u/Q8jA%6_+BbWl!IWO%!8'V@]cPAuUo"aJF_Eru&&Dfj!.<3R!4]Q:U&](eKsXQ3&kuJ:61hCW
%mV"<Y-1_9Mm!U3(iT'J+>_nWeOL;T)`pcM,HB)/ehf1Ys"dmW*Ng<S)]LCo;(.ok+HkV3Y^sV%F^"-_PR\$]kOr9Wp-K<8YF)9tV
%+1H!0)%A8&g^Qb.KQ!?W`n6U4M]NCW&$gH(29>7:XQTG["mu&G:8[89/BVC)e.mdn$'E\YHlg?b28H[E-qHe<Y+l!,oV<$AD<!.6
%CFQOLJPC8K%ipKN_GDJ&/D!#td>e9ibKKSpEqUf(P[MFQe;+BG0mAcM-Y[5u+CWrXK[T3F\0BP:i(CURjsMBKq^58+n0:LhP(G!:
%.^]cY4dq!6/(2odg#`J4Te^IT_h;34T5S?sa<A.q\Cd,,,k?1sNNa$6A/[KP_EoZqbt:nDA/MsXTg6`I-3,P5:sOS<pX*=MKSk3Q
%Y]J$M]E[s-@q)Ao&.l(]e^>r)29CG[_nf;AJs8kfS0?<<94M.61A>1cP-moN-HEOtF92TQ0?MS+6U%_j-GS7m*50Z,9A_6S3I-pt
%UuA@q1RIg1e/TrTAIH"YdX#"NRsiH+N,a-L4/B<47qfL`rJV-O#^X#!j0S%q^@HAKNT;5u6[fOt[n<=ob_=1b$]$'E3-3gEb4#s%
%XRS8?9JF6u,Qg4[1Pli'ligK68^dtmV,XIGb]O*YCmtI$&X4t*&0G1jeR2NXD&b;^PgKdF`tE\S6!@E!6+rt/RYqDTL5eOe)CQol
%i;t94KT&;D8+7;dQ2B\%@MUU(q09DOVOk!X)F)Q7qR3f[o9DiYb4lMRMt;-sYUS^DkFn*?d>1J&%gpb6HsoA;nm3Ytd4h7@a\a6?
%X:0f`"6*uZdSO8B<(!)?J$9Dc$^O>)!+7Kg[YM*Cobu=OT*q]2]9^RQQ%VpArsOAflkBt7_I?(:H&<`NiHcsr$D_[FRJ]3'S!6&g
%@J>'T7\\GNrD6ZkM%^Rn18.5\q[*<<^!</gb?'ZcD=>ntXo`j"Dr!I1=Ydd44MA<=[XggN3c&Rc%[=>R1>mp,TK</Ceh"4l!_sXs
%$eIIg?:i>X-k<cCA%UVG@Ru8T3Xd6r/;D#u@#.]'-&O#n*HlVn*:=osJs!l<RY\BQHN;!X[+orIo2SJACi+2N'91);Q\dHT/_]HE
%994MbjKfGo,CVp;dtOS4:e?h*[@k%O6[.M1in7l'n3/eQ\4*W#_XrL1k[9n-r5_to&7lt:($(5b4\5kbf2Nn.,T7;O[_'>7As,D)
%WsM$\-=:b9Z%90%*r+7'N,<BY$]B^e::nIl'QD*[\=AKe,+=\i`8-0%Mp73Y""(mn-^[;`aedND0e^6N:1t8`'%p5@D0T&#]5_[M
%6?4_$9]15B^7f9[CdddsD4_[Y[\^2c&(lsOR'[%2J27A+#1pGBPn%j.]"V^WY0:383oO1sG"OWrX-*VD!C5LnO/3J?((sBH7YJ?%
%<Sdk\^WRC^6)"ukh&\=VGR1.Lp0&dl3]rp7S51qS#NF/m,,6ELq=l1nA&TOQ(]W`8ip&bQ_8[3qW<+=0!\<&/?>X5uO<s3X_D4:V
%BeqbIq'N9Ej1?F0NYboMI>G[8RiXRe%Km.k)n8gkZu"78_]B!iF07$qRggZP!!ZFpMosXkREqQ_M8RE<Kj,g.KNW+l!cWSXPB8p'
%Gj=?t@o=ZZ^4B`h_kfeg%arTAk$a^>5^`Xs+P#&hd=`Ot0Y*C"P9C08$nUCG%Y>dVBV$O#j2nj<En&d_?K7"O3C^]9A,u[cb@5+H
%?s"dC*RXYP_rcQkU_/\^B8F9NYt]mBV(K#XKNFH<l)G;N:I<S=(L!&5cOn5a&I'nDn#i\kdNU.@JD(M\U=u3V&dL+NFU3$#,oco.
%I*g'4AYS;WEKl(Y)T5<d;d7L7<mn"&%tB_DI:#VS$aPGV,fEprh#@#TgIAd\q[#G?&Y?[cdpYgV40H(g<@'JGql\LD`;a@E.'X(?
%#$)$)$inTdljJo0ng-Ub#/]pVjG<1L<"t"VM_Op&M+Hu-4:(5VJUra-*pl"PA)SI:7#U(-_F't]$UdO7;mNLckuf\sko"c:6G_Gs
%+F?pgJ2eY[5bTZd.=I56F-+Palu8t8H<r!f<D8M-(4Hma8J+M4@6Jd69b*:6%oDIuB^$engV@fsM=V).C3m^5$)<JU%AdM[p0G4>
%Kr4qXI]T=j\0(j'e\UU(3Q+H0qSFJTT*=gH:YJbpRg6ef6HdE.@G=@U.a"ji%YM`K<T\fa(*iI(M2>LS\d`d(&A2qW@;MdX4b[_Z
%!9-rt6G`Namj]76$5h)t',#s"`b[J$!l,=ESMUc*9AD5Hi%Vr48j`G$%8\+RSk\!2cSlhU&?/9Hk\q:*$pbG]3$5/I?u)_#&-h-5
%,X(_`4<Bf>A7i8dP]AKuWpd86EjQWN0F,GtU<%se#ucgH'*4AM@ONp1i8CkJZBSdR,mTP<k,HQ1<KmZVNMHW9e8\6VKU"-RjIr7N
%#@iDf?)NE8^s+jD_-&`s!:DemGNl,(1RpbFR`*8FW$[/!#h0;/QD87+*#`1DimM0r5t=K[e)6%Z%==)I<1=%7moDh.Ys6kTK0P$%
%OX93Q//`k"7RP6!Xt8j334.EO_(Zuc%-W'b&'0\aiTA"u'+V.K%C_Ts6^5K^%1Gr^5mmcL*QEt&?3Fa!/5/uW!27F5:BM.Pf.,S`
%)j0XNmg+iOmqNQk$j"f-`e1<'7JMST#V6CEgDPTs*)$q#Q\Ge]`:J%h#_:VT#2$bC0(u!;f\E9_Y[mS-)[*&,bg'`;8;!fF5Fg<K
%JO(hi4%Z73TE40aVD(lbBO,cOi:$aOAoQ['A*JeB>ZA9W_n_"u647M-fV8O)*!u]/nAJW)?$A&dcf,!kSNURp_bdE;Ws%](ZB>&'
%'-ku+$J#LD`:=$_321(09l8[Ql9#2@2n$U.&0YpG^bZj"dg+,$q)^"lKI=l\Hg64l(i4TF5t]&6?9GQF7i=7On+ppFj+d?SnmU)&
%`&nS[[d,*["@r8'n1e=#P%7.Uj@]?NF+.NZi?#_?&TF'$e/F`U0'aEG-*`SGoJGir1H]&V-s9te;d_+Z#T^Mc1E=Hp>n2RD[Ba0B
%,66e7>\#I3b#"rECtb2Q?j;Xs8S5fT<WHT9ltAT%"eQW0*T"\C`2#!HaWZi,j4I88q'3-0/Im(<^rPDkg@`*r==hoKq.(.Cn/2B9
%;M"AZ\gGnU@K7HTiIX%bd8_+fVDkc2!D<OqS,<:F?^9Er=[q`$(IBm,5nkf(cpYkq!#!'90SlV4^524B?9Vg_Cd6p((+^i@JLM<U
%$SLfKV2ssrAWobu.3O8!KIqG3O5I19%W$0MW++aOZMHn_-$_qA&]*^#fIAlF6Q-,'EmHF/jZ49G.*YmlfI)uYoGW_o9jSpI:N>B,
%_r<LP,9)ngYS\]$Me$0rC9^:77q$%]r7&e(H@\bqR;K$hVeeHcO$k7Z77]7Ba`<ceMSj.6&0&!a3:JJa7tIn9"%A+N@PEM\[A7'9
%.turghQRIAnrcchFDSp<E=O3)B,<%8i\<[Ha@['9-Lh\kZZQu$nTe4>R#u-Xo;F?K%N/BI]B(R:V@BQRP2Nj<8f"sB!mO)/csoC%
%/lLtri.,)`TlsGc"G\J*"NU'>DA"@+84@"h=5qG%>q7.q"*N5Td%f5pjL3J$X)M/X?>>EZg]]bOEMV+%ET%%<1qE*./.(eKc]FY;
%)j6AUm_]l.pqTDa3[HgeX9p#:!P8k>?ieSWi'<KGY]1M83I@&q3lK<\T0j"kflga1qCL<t8&?[K2)tQt5QI0hSXIENouAa3bi;OE
%@1$ImZp"bHj/eUK.\:0lP,?8s#8a6bM-CeZG7q1l9)$Q`.,B-fCMqp,YPEY`i,ujI?CL+`W+fQJ8^'io"32=p@DNA=*GZk.`uuYQ
%<BNcVisFjIOpX`q`5*816=IQipOV%Z*nf5Zb+@0'/f5:B,;__&*28m\(Np.E/X2@h&OUV"[)esJeMJGi86"P!89t%YArKW@2Gr'p
%]F6ASglCq'0W;c11KmA1BXsXL"=h=b-["^k&[qoKI;Q8dFARNb[5dSIcA'-]OCK9X&BM$m(;TE]D,%fn=T1jH+hq:d@h!cuCmL[2
%-\\LOM.:t(p=aKc3?]';4imZfi9\4]4.2+E3F#_u3(R-uXG@)`RbOnu?'=PJ+@E!R3F(apA!XQc;7(ap2!t-H.NX/J+V4jiJEs$]
%T,6h:]>r?DZET`Kjc;D_"drsTE7k<!Uqmd^E4G;>*hn3"(2Q19;'V%HgFE+h9WShH4SEW2]V(iYlm[S)NB#O4M'_4ocZLC/UgVrK
%$jg6dS(O5E3,S6],^tn":#c`o=/+XBr7T'/.ZtuPd8rUAK?19*."DKe@q^6/OadWS%cU*&Eql^>5-`"R'T&K.CmFu#hhVFL2B+Qd
%c+65YE5PWr2+\pt&28W;[+\d3<_55\,M7Ci=.KfB*8?FR6>1X`B!e]l6Ar5d/IuZ6RZ&aVPRZmD_.*/'hEdI:MCQJsL"ut7ADp?!
%Z#Y:)@Z\*8N4?9KLqrX_)@E!1<%3O<ol02Q!4hK3Z5CNMK*5O'IcEq%*lk*kbO_P4@RDF6W"`N$4JC$Z)[KWC;ALP;'/8f:GaC$Q
%ciCEInB"$H>saSqN`6gCBsBf)JJn]F";OQV!):X8Q#o]17KF]5m4]BDTID![];1NZr4&aK@TOsgM$POm5<s$UC_Qt*?"d#c=;#Tk
%S7Fl1&L@QH!$VHu<j8gZ-o@rSG!_?.-:N_p$mCO4nl9;\W!$o:,s,59s1lSR\3'p:G7Qe;#j>6C>I``-WbsfrZW&m3<\?=pC_1)$
%6]h?m37eXqKW[oh(ChOS9?o-_"]&)?,,gA:]?'?t.<r!J^k,*q7H*Ds(\5NmfLGuj0K>-&LpeAm`X2tqY3*qE'NO3k^c%FC:dpXt
%Z7Z;U@?=]Q)`%b_#Uj2Pn!E"QNQ54%OKQ!aOE'MU5d^rt9rS,[PlUQQj>*\pS4k[o#Yp9HD$E&Bc4J&FK@Bq?-[A&j`6n@ll`3ZC
%_M9i-)V<X/6tP*:3*K></4@(*>%FSICH(0`$VPWLe;44`NInnuE!0r)!(XPUqc3>0+;25%=9p"jO[u>[JRB[oZ`P2oKF;WITXBKU
%80d(7K-Q'oQA#DE(,cR8QD,h=?R@^!_CMS1ifO7X3#ds%VP4hmJ>fm!pR=m6AdB\$MR-RB0lq"$C.7I.CHocPHk<,If!u&=TTHK5
%<!\hKSWK8]b@a@O*SM`U,m^WKW@Q6hL,t4-\m)1fKo&'9%]nVFVaC`7fPJX6ofQ4f9W2W_i+-+?$*4Xoio$iU449fCb`$2N!5m+Q
%V93racu?Nf&4/b^4@:,\o$6f?;#nF5i/K&95SC;%eV80bIVgj0gMG%0-tNkuFqI;8C)cMTWGGK54\-JijY.;^fY]LFNA_*'a7DER
%kMW#S;sFc)jhjlUO6C:5@8)I"$R:XoEJD.8&`@[8S7d_,:1'>4'P'%0c^4uW"6(G"G'3o<26U7b;5A%mP-lS&?t+`WfG7j+6qKC8
%JkH*bBA-C,2(`VFZk2=5#t:P=Q4*]OEt_J%+>Q^&4.+l$5[3Oall\It&ZeN?-%S/u3'aqJL_\o5LGW"9jK*a`*eoS.]d,^/Q1i$d
%9^>0d0G"m`g:Y/C+E=!g6"Ti9\3dp3P[R23YunhF!c(i>=K\6V,\@N+'B<5u\nH(a`+bmFKF>F6h2m%(O(#sT>3mEj`8VY1]:@Y4
%3V6f(5X`@rapq1T=\8C-\VA3Z$#sVJja#L:0_PqA-W?@T+NHEbQCuip1dYZ:'UT]nHrh@RDdUC^Ekk!VE(Ci[;,9Fs&62:U6X>d0
%o_gUtP<G:l\4ai-n$^Yr*4Qc?B%\(\pt/HcQt0\g,-0,J^RgbpYQ<#1q&l0'g8[,ija:=*GG;C5OS@i+[_dTgjtF@r!_tlt(Np'V
%O*Id??^n6>%d(huk=]Ci,`bT$0=[CgZuBE0SY=??,+0YeiMBi$&T:]R.&k#i$J-i&ktKi.onRBgq=n>F&,ZiQi0pm^Hp`TKTF_:P
%(pUDqBGcqc1$Y!Y\%?K*okG_0(7X+clYANA;fP;<OZJ`HPHZ"WQ)8a"&5Fs^daUJ<@H#"Ye=%;t5(Im43d#t]EH1:Jj80,2#elX6
%.=9c=hDOM)3iq*^Nh<_=LdX-R(<K%S;P(Vc.eB&j*g&Or*$\4a0#olfhV<(<TE,=-,3bEN-/to521W?"CFKo3]1_OT6(tQc\m%KN
%EQTR_Q'K72qH<0Pb\8D1WIk)F?>=NSWRn_J+LObA.SdE(jfh*0$M>_\;Fg#\m8-Z7hB))cYQ\knqo?K(%A:Z(1rE-No?7S>'(GZ)
%hme>=]OE>nDfk6B+p4F=b$Ql`d*iC+Vpc^5)gl=.ns*.;+h"4#8g@Te*&!D_i2W9C1^@p[ir0$&K"PWKGjk^`m:6qZ@&HZ/W[!*'
%!eCZu(A^q8E#IXYN/L:2/rkQ6HIZCIUSn8O&HEki.\La3M516FPK0#7*<]c8B7\^7ajignF'J"kq9mdK9L_gPE1ADO@4FK2+<OD8
%r.eM<i,Q7^bSlT'o&tju?T_&VS94-M8t=Q*k4%:?K>O34=s>596qTN;Mk#^*4DBTk.!=WOZ?tkl^(b2Eqasfq&HfBTXmTVq>"LI$
%O&nMuXQtnDp1r]#-7ckW`8WqMI%mI;SL'^:Bn^7Kk)T4r3J\ki/s9dU8pKWd+Yg5a7&fN08T>E1.p>?*-\sTBR91K>c2>/M`#AIl
%-Bs@P<gdD//,4M"C4KY&mQ_%-Ah+SeFdNt%kP>$J+$\#Bn@q-<9sCnK+gIE^i>*Oh2mjZRIGZR32=U>l5I%Kgm)J`tgX!q+RTu!-
%UbJcFOX&`(BD-]9"T@)F#Jju5@8NFugYE1TWeX8s9Z_hFb$3F5W^MAg4bt+NQA_ak@Nu/W]b1EK\C;J'$l+Q&RI_`CX'mg&_^R:j
%_"LcK'lQ[-PH'_&ApV*]4W#VuR(2F:9ks4a^]Y$l/!N=P4BjFj@BacqOMtuk7YVF:cfZFlV_B8$F::a3TNDVUSV=ab_-rB*.)i(,
%DFE;C:;JUtU\hQ]M<'V/#+i#-8#_=hj:5)-pu&N3UH0"4@.Q1MJ[`aJ1nl+O,2@g-W=0gTCZ:"__7Ydqok;HpCcYSk_\7>#(=!A`
%`NMZn\`DI.0$`<>5KW@81-KblFd?emB7d[1;[S`n0i@,ZPfdSqfc"HF>9<.Qpm.p5`77-VhjXX"R'&1sf6%MIEV-%HMjMWKg^IH,
%ji+M/Qf`j/W[!^T9h@!#qd$FoL#<b[dA.=+i0YY9*49=!+pid93hRAJmUWK[P%k-iKrOj+$O37D#+psYCZ@caqR(@b&EPKp_cU4L
%jO6FC3jpZ"A6MlaI*<Wf7PiQhS/`l#\Ju7<4Hr*g2E8t2FtSd[CeL%E0h`<6+AJ`Ui#j:ta4Z3HCOd7&fZTIP4X(il!]JKbMG>3k
%al6PLX8i_qes3ijI&WIJE0XIF4k3'9W"0FI(ZGG"E%=A$[(1&W!DSRYF0/]=,Q(IMW![[FR0RpV&c*prX69"i:GIbm[L%/2ATjB_
%ZmUlqS)Rn.P^DL^F1D_CDq$9l"EP$/CdiK9h%t#pa*K%PW?];]n-Yn;KZUrjO)*ZY6&4i;,\hU>V&V_l]N+VD4:7%(c0!ur.Y_AO
%`0,a'JtScoYdMLRk=c4GEDNPp:I1XTe@+JkQt9GN"ZI,/>hB?JSF*VL5XH_`O9NbkLBWGNkGgg%\[]6VdMqhF&q#F?I[<J<gdmp4
%JD)U?c8^=ocN2B*6M[5`#_MS`>lA2hP,L]8TgIN,'uN)Z7i4ab\jhmEG<qg+]X-VZ3kT3sY6@O@k^l1oL&u[Kl'bE-Ye%oEEYSSk
%P2';Ie?P66C27O!Hcf%ecna-o:Rm@L^5C6nqQ;kE+]hD/.g-='LFaiW-C&B5\iQF?P97N*l1$bY3l4n[2s0WZXMYTVHKrHZ![j!C
%'tBL4nk<W8d;0g]n^sBI88^_D;0(MO/2k#fg^gkq&?Z0q=Pt5aGi?_pTm_=oLPb;M3j,Xc`$[8d*sbG\[*1]6#7aih,4J5:hpC>3
%^1*h-%PebNNi@$p*Mf/42F)Z>5fO$j.tToE".(/TL$u"f3<B5QnmbtDkdf&%WZe_$`ToK(2*T\_SsgL$+$R<"Q64E0K;@PZ4M^(\
%K]]&Pi-HA1_9jZDQiT\pXq:M%52maelq)>CAZ?t-^9VB,koCb^nhCAGdn@m(*>X;dR,it.q=6(<DL`=Z'3NP+K>8,Y'.!]1Ou^<F
%DA+.QU!$sshW"#U8s'L\%Pe&A'_coGP`q.7!M^hl&m:^^?%Zog\;jINbg<<(_(VpAlR[.f)V9<E'ol^$LZ?tlTcerJ[tFflE#*K(
%WRcjl[-dK#%@:p"<1*8VV*87*g-4N&2KDi<1o(2M6A7Jq21T[W&C-9/:-8Yg45,SR>:(=I`Aut%a?F!RS<jL]>7%BD$-sLi%ZZsk
%E;/h?O,qct9-$e)[a8G$&6A6p=,"Fa7lR_N%n(@J=t#110>4)Hi$<bN3H.1!iH%5t[`u;33TPoV7a+,:=tP0RkeUg@R87ddgfF>e
%X#KeTip*i/U`.*VStj2P(:F6=r<tm>k+"+H#Z5YKVOn8Z&Y>%&Noj1DH\i7L:_A6>T>q3-Zl5Nbc)QgDB\ZJE.$S.Vmuu'(n(^nr
%A+bq$JfqePkN\Y]"6P%jd_.3oD',pQj>0cV<et[!;iuGGb5sh==ilFNHo;_G/6\L>Tf.UAn7YXSVQ0<-_-b%SJRRc!nUVKP"2RL!
%)].A8ebgH6d77fG_V7$!$VYDE\mZY3C['FYQla]a>V4I&(T(1-"9oZ;JKfeLW_[&/]T*amh_<RffcEPh`td&K6S-\`iES22cr!@P
%;,WXEJORR/lYoGu?f4`c.5n)(_[rQETfOC]U#0>B\]b[kZ9u;ca)^ql)s<>'>=D[O>L+"'>XKNt8V<W@P?]fWj<Hp4qTVNqNbc[A
%1C(Yu/9IlY.ne!.WC,,e8%EX.e<I3Sk,?A'.9$leG/PpO3c^gEN\:+@V.@,l'`>;,[??\\*kQ(sr%;G!I(&"7qj$Fh)e)+hVhBGR
%,o8?,@.1CcM<n3/!hQGK.Qj,VeZ*\5*NN0Vb`k(s,@GlNR%kk1AAf=OW:G%i2i^fCb'\/fcubKUe+htW11RQbQT2).Oq!j/nKMR1
%4MCp>7:KXR=E(@/j*_&,ec)i4i%c)e.NMX\`FY`L2o'>b5:?C6<@(>(!+7jDZ#b4"+3JPcJ^5ZtiVL]qi<[611ATSJif<@=+j8N(
%b,@%&Mk*#Wf!_<LA;eKHL/t`,L[b,@?5nfo)4g6kg??F;94%u]QIK`qYt2k$%&bc!8"i]X>u+*!KS"IB32VGX^n.d0KsR\)@n5(2
%@#/_k-D-.m1Dh"<jG4:Dgn_'s%TpV]=@`1<B2?&WQT4*@H9)l*P'Jh-[4i"PD$=p!=\(9njgPScLo39bB7*4aU!Y[08A"b(+bTsE
%OsR>h_]1krEfiB$8HlU7_f!%8Sto>im:t]B:kV*@X\\F+?Y'=BC_fC*gNIBIkefX,@:=aYAL>dXj$r+_"9>P,Ch-B5Q9Z@E+2&X5
%*26uUMcrLq=$R<@_N/&k_hF?5@Uku`mTBc;:301!*pP2aH<QDP:of?#a*3:$-jX1Oil!ub8CM1%50:0O,=o$Ni:E'p]2Pe4#?b\&
%H9M2@53F"Y6@k!4k8$V7pXQ6-0_Y=r-;*f#_[X/@o/+"h.Dc10%HNI#gn9h-A86+9)qQf6eHkXr#ODcTlPkOo&dUZt+e(o%W&Zr+
%Mp'KbS1T0nol8N+dISf/oQC=)$l`B*Rs]*^6QrGuLLhYlJbtpsV8=;oPN+G`.*HaEL$K]iQuj<S6%KJPeRUOF33Xuo\ee$fcdC^#
%S30>24;0I[6^\pX'UJ<IKR.p:5,Rg9K*R\a(K?-bJ[3/_!l'FT5[cb>^d2/:U0M\5L)nsFkL0g(4pZ]K#i:2BnNdHYIOmV,/f[mW
%%R:P90EC`b&WA:rdoOkC"3(Th&m$.l!^BWPB0H;]7rj11`\^A;`()4*q+"*;W&^f8*:->4^P6Lj^1jV>=b@s=>Zfb-Ah2K5<`^E=
%j?_8QpO;TP;.XQ1]C?2mk@qt+Wn1>i:m`.e>%7.?%,n6t!\*c`XbZ*1d?A/;)WJg50k#B]chXFL)sYK\Z#2taTauOM1@1a^(RudU
%]kI[kR#fKOMM%j\__FI(gf;/ug7*8Q5DWu5:K)s#?-Lnu3L(Xu1Ea8>lF\FpM\7Zo9*90<%0-WUEn&8p9Ee#VMTU`lMp$QMp=^[V
%4.p2pePdcg/`\9;'K<:W;B%,C^--!8l3bUep,>!8!f.24YuBY]'%FWlGH/q#O17cUhacVWL:2lr2`U([0k@0F"?%k4l)<MQT5j[s
%4XYM,L^2J%n:[bEL2Vlehik-cQ)*B3*^kg&.FJU.+g[eTkq`:eNR%hQH+>.4qH.-u!\@1;3Rcsrh(Ho&\\.FFEWm;:9BEn;DrNQp
%IQ\0X/^>PoZUGg)W]On:?U[XY@``H:_F-"C7G2%^ncNk3Kj.2"j\Ni&>h``&R[e8,W7[CVV<03C#hoQ:@m-a]dCCM:>AS\L)=l"6
%DTF;^mAibh?T;%WIYRE_OEuZER5Vh)"Pi'@@19s4dVj*8?sR02\?$\R%U\/P2]2$L/9)AQW$B+Z27R;G&JE^aKqj$(jL7at[fnX<
%^8nnp!qMUnPDf7jWgP>UJW+"OSNFFnU\6]j-WB;Njd.WgE5Wn$;i*jHEW:d%SPq&DXUR1K?GKHl&l`Yh0DOT^PB5SY5\]fDTA\1O
%)5Di1*G)6UNYZ9N['1DooZOita*0jD/M==/?0*O_FHBG'FH'7;K.>1Q#UGcIma)Hlf-Dp0H?b1E'jh![G?;O+<_D>(h&K('-n`*)
%m^+BuB6^GK\g7fAl^H5W'V#.'aDY-fCcnC<cGm_(r2uBucG&3!lC"q;a&"[KjS5_^(;T<-p,(!Pd$]+Q=udO'2OA(]`:=n50&dds
%87@(OI(!/P:+?(aVPE]YBJJlCSAY`kdGostG\/9Ii[k@3f!of;.B_NrP*=UJK.2Gj!`X%@Oc\`9D4CloL\VtgFqE;%S=7jPT"(o[
%>UB&7Mr9qb^j&*UQ;<K7>O++Ih0nG7*j.&(kXqWj$4pYB%dFYqBaL]u$/YA*m,mecH+aE:5+gd:?*nWp>):"O,'\BmXhr&)if./R
%]EW3&,OZX3B^co_e(3E%Q/&>9$Nj6k5eZ$5ZW1D_l6H_YV`HeDB=e7gYGAmpK[Y$=-b``n3P^jk3iU/S)9;":l88j;7]*@E+Xk:h
%_mSDbI^lAkH63=D*#?RQe;I1C*@m$'8D@/50]L5tJ-^DKN3PEm69IdED)mB6)k65?]PL#WjrKCh?fbd[GAO8=-pE/NFPE-WG\Ug2
%n4o%B&%?B0;2W^9iQ7K%8p32J:3LVFCT/*fRY^3[Y8g?1f%HQmB;qWUI"pWNpT4S(]NEAR^<3l,F%AT5Ai-'<cB`Qs2Mf/]e9Tc<
%k\$T0M%]emoc=\?s-*2[YEj!-G2IL2rt"qE:mOs/epB!%5M/ICClTUYW9D)8@iq\ck,'FC[J]JTIUgUS4(@ZLpYO+V<GLT0]'AXM
%nQ<&fo.fBp1P[S?_TYjma^uK2G/Y/\9ki8C[`MJ@\/p*AK4?M#g3ic*C!$5l=Y$Rq6E=HV7&+M,ER,p]Wu[@Cm8!PU,ZomDF'a*D
%H)q#gS*a'MaM!";5AYS-kCHEf2ZO\rTf?P]^5$J9.K]umN?BTRk$]igk.)rQHV'3A+1%sm:Hg)So;R/]"sf'?N$XZfJ80RuN7&r^
%RfaHej9[lAa+=^4(3o,P?WE6'Hair^%67GH3RoQY$)5qQ(5C9f$hFBpL8`Wf:dR^Ei!.oPLK/]^%T<<l,fjL7_Ae6=H.?B[=-[Mu
%K6sfUff%UDIjS;oWFe_]<4l:W"t9f3P$kYB7*o.+BZ9^^F1!L&X:<YF.ERb"'2dPrWf>:<MAZomA@o12ZX;51M(Yr?Dnm^qRabl^
%''hFN,Mt*&LuSC.U$8Te'j;NN-C<AE[`D]j&OEVBH][Oe&su0eMfoi#[$k?na5T%[iSB;B^E8I7,?cj<Z"M\B*1Qb*Sd.Uj'Qm+F
%T&NoG?k`]c6)$,O?4R5`1hTgb*%>JqYPg%!q>7b_=\/hkdd<%1RWGH&$'j(2DD8eSGk@1'!mDp&g\\$eMhOFrXQ`D",DI/gI'uG-
%-'Af]i<uJL`/SV+a2p6FP=XW#kG>CDH=QK:Vd8T*mAs%kaR!><=*69b<-X_5h"(c"md0e8MFfc!6"dple*T_H[Jb`B6.IEW-BR]$
%<Ls-!SNL&(L1FBFrWlpCZ>^FH+[leQ,XW&NfYp77+ukPnbR4-gYTTki4BrVi\r"BK.tsdT<X)0en>1_lX&1>TDM)dY(V3LN*>%+u
%N?95:`PaIW,[i^8\5-_%b93Z3ra>k5iMatrW]YdigF&i]AbbclMSlqN>J%`_:$4j-W9Po@f\1cMAs:)i1,66dI(:fhOjuJ[>?(-=
%I`m^8j@;?mK^c:3+Y_-b@noMb-rI.RGLJ>R^u]+rCaqt!!,tl5@.T/!EXM&g1C%c+\#\G8lROt;-Z<J5"'ASk;6+/J;lN8?Vl_ta
%)Y1&:,5S%f+*<cJi9kh-ODamu]t-DKJ:BR46i(bA#<mV)XTQaYbl#[oF&RC%G+jir\qpE1_X'GeGP2e>Om7rP0]I.hGoKgDMI-Yn
%Gq1VL_C[aK[3^rFJ/Ct'k>\]3c09@:^iM`Xm+PFO+n\),g7Vu2feX(d")%oj5#m;43;-ajIV@Bg"gIW?1HmHPX+5Q[lqbVq6TA/4
%0(<T&$$L@JUG8ln<L0XM-k9j$Q(FtpZ#u'sYn>4m@7me3!sQmQ44`=4f(Y4j5ZZ7Igc%0Go;N3$A%+LFfWgg-RDcFn<3VW_"\G.D
%4dWt@/C'E[RR'I=1mG5G*5Zq_G"?fP-Ta,b]Q&>`f'U!&\&A'YN5anE-6T+IF:TD]+b$Vtkmf<o+AUkOqf):,E)QmPY_7^\L-H0d
%"blMQ`lE-JJ+ZA$%JD`Y@L[oPG\bLTf"B\8/d<;,T+6u-Nan*LJ0`P.6:.Zs']PC8B<SFp!3-qg!2QL8@P9e5VZZdJ:aV[W,dU*6
%!&7_f%]W>fU`CFN+5Tb6)+L#c/J&)Ln.8ug]@b4H^\$muW0ftN<Q"@<8r7C,O%9eODN9ECNb]ck[\Gh!;O6Ydg:S[Z4l:H<mAQ,=
%M#6,E[6;:trFMDR*tP9,PAY*LhcIcPSbl][2A]Q?,2cFk9me5*"DTG-Odfpi/"9AVFc]7W@MY`gaSF!7P$X2AcV#.m-^fjbGQS[=
%g9)"8>kgHelViKlo2u.Q,i&?2@;aP,EEC,Lrb\@e6<E,2AKCX@'`!X``k0N'&58SF:S9>aMGHL^h7b<P1=#&__c>H^2'gW7g]G$c
%L;5NjP!jZ]o",GRKO2KDR$$</!9iplE24p%cT>kHNuF9hM\r(t.WG3h4>^*JVBuBohp1To90&M8T::^N3Dqpe_jsd-C=sR=OS^;S
%ICORdcbc*/kiSWqnDeEo2-$hH`Cc:WJ(F*pQ;Z%9!?@>7R-Rg=>N(1@pHa0YCo2QFOJ%$36:qj5i,'df&u%uoC[:"e_q,oP<;oV;
%BKc`R9Q0>T+j/kd`nu+]P6(5q?,$S)kUdKFR65_:6q#6u^-B@FKWJOPS)H8s4rU<A3$7R0S:.*?A!r3ABt5W+^UlO]rD-Y5+c'"q
%n4f5-J0ZDlfpnDlcP4sqW<I4L!kpm;!DOl3()%6!S1"Is<0<\^]Z.R;a`6<sV_j=H-KVkJ#qt"uf=X`nOBPlqlCsMDG._h+'c-Tj
%qt>7s?B>r1K@L/h$tE_AHY`:.I,KR]lX7C^Yf4$GU_`ke_eIiR\k@8d+DS0f+$tCQ*3eIFmhE;(o_>=JHU:.!1s$!2?,s9uCBign
%ZBXT+q^&tjY04<JLrJ6JUDXbcCG7QJOuf,f]n?!bc&A9mEBki7kr`!5RC9`gj-B#Je!L\PNgSQ8JT?6GB2K6mpX+j/O$Q[[_5"]Y
%==B+'r`P2PP'V#<rmY^*5G7#?i//rP;44+m5F-[PY+,2")i]ar:3!-Gm3"4JI[>HW3)aMMFI<En:JZS[H92,*fao$S8[3TSRcnfb
%6jYF<^qAUQ96&/e`*"FfmX>mUF^j2l*q])I+"sqBIXV>?.cI)?8POlAIBBR#g6;tB^*Plnc.aIMamM+fq=FMO;iG\o\dDfQmH%F)
%Dgs4KhgS<%qE_m9ZgZhQ4V:'<AJ0W2P[K!;9YXW?1GP+!2Zr."@O[K]A86L'UC)c/_"CW)%MSc\lcXd=[isuU#BNiGD]o)fI^-6K
%iJI"fZ;mijQbEA-=6N`?]dj#WWqU$h`MfsQKG@+g$0RW@<+/I9BQoiU.ZpHQ*'"]]^Kj_?TmQY,o\)QU^M8`fLLPm!>4_+'H9\rE
%UcRVTMA'j+24Xdi<]/1lcKQpR2-r6(7gNDQ^XH.UMf3ff7CN$*kDJf*RjcT_7TPCGLX09PZ`4RhJls=4#g\IbUJT#`Z(Q:W!g!UU
%+bZrXcP9(+1-_Yk-aa1"&;+RF5MI;ojEc_'G83X*o&d;X=kI=cW<Nmf'@9(H1l#sg/J^NIGbB$@bbCaVC%Wm8919u/*54c,+\@4+
%E=.UTpNRqQ@m&4E)tmKnPJ:#Y,)^^bCob5#U*35iB/Kj(E+&.G;NUdA8E]EKfceo8r$[=ae94ke8%Tm`=cn!?Oi.o"Ie/.'>.f^:
%lk%@-Jf'KDV!(3t!lhX-TUo8iM5(K\,_3&7*WEu#Y/]B+=>7n8^T6n`'3,J1C#0imr_Eb)0YPGV6Aq-W,TR3p<dEA1!/D\mRsnl;
%`TCrs/f7IL9s\\8:SIIF13&.4<Le(1FOTf/5UL.!LT3M-Yhj!_#?+W]Vb=?`4(!,4d^"]Om_V(XHLim.KW[Al?Apd!X-<<FlZ8'&
%L)W]pbdA;lpbZQhH6@C!Sld2+actDYY3*eddq%h-[Zh=K#(rbS?P>H1;5o7ZlIs?Ej3AlhFF!^a'(!A:R).\ujJ"NJ!aWVh@chRV
%N2ArigOU*WfubMb.S/Ws</8)YO=*Yu8Eo/_3V#ME74s!"Q>-%?m[HU'r<7!eH8KSZ,l>-!gBZ:<?B4se?#&Rqc&9'lCd.^](Ogb7
%b+g!)>S,GBGZcJVbp3eg>q7"$]I1hKW,*5Kboi.?C"CFE[1&AR/7u'GkH*2rC\q3DLTRN*`:=Zj.PKDq6SMD7N-&0]<;_o$'mc].
%(]Mi0:c:]88R)jkNOH?OX'KLVHCcuR@Ee15jpO_&KFN-J<lV?&Igu9/kt,0&aLN1Qp#_9,Xa4NrVNd>Z\PaufroL+4%u9JKoD;G#
%,)^<*1aISd."@t8c6`%<pfEU^<94[mG,_YB[32^j?![-$WVl,R<<I+TSn.RQ;)-ZC)c?D8,/T.6'+?B;RIk^GJY8rD/s.2$p[sFA
%<)O.9R=V?aZ1j+(D;.ro.8]6Y3I&GQ4\0NENXKBDjNXs7@U+&p>N4Wa;qPN/=OYeb[an+`d@JWM,;ohHPk)GTX2P*ZEe^2!TSWKA
%C[adLG`&R<d>1Ls)JD!+kdmY`aVDN39m2@GB!Pl/ajjU@h/HOY5cj%hBe&u!!>$L_a;Wch;Uq8*3?lk9PVcdocQdoZI6['*^F!O6
%Fi'ljFk`&[VHH@7V':U)"/n8O#?M;LkXMP0Af@Rq"FVQ']j#6U=,k9,7$q_N>fgIp_JmRjDi.(r0Ibk\![g]=R4:d:,LS(bf'aqA
%CKh=Y18eH&XLq'BE?=<\01m#'N]%^Lg,K6Sf]1`L+-I-r?#&+HQSlY4d302678d)pM:,WXdcmac<4?rc^0cP&B^d`^nZ`;:p+/ng
%3e\BPH:s]h+f.fr(Wj+>JpA/a#t.S%5703RI6#!F\MhX=]ck%sQ[!pT-Jq&^.Z@[WcqA'CeoOEj=8JnK&'9UOC%3>%Y%$8OS5lgZ
%>Y1@nb@H;Wp&fslk&G95]a_=#=d2J[,jUh(.FQt@qT(2j]8L3]Aje/HW0.h*XrVor7h<jo.qY,;fR"n0X?LMsN*P2)%_*sg>SniO
%hMJ+Ws7h\'fZfcXT[RJ>gfeUVdGbY>h=YK#h&T55Brfi?\-pVMfNB-g8LX.P:PnAG<4:>E2Yemac`WI.V(5?&@\R<ch;9(@q:acU
%,ej`5CZP3&BAoss_!&p"H0`%O?[CG?4q;5m5P^'?)r_L2Z^@7VM50&!9;@I(8/laJiP%"H)&s7r'X^cs,l)Dd@9N%Y/o*e9[s6DE
%ZlrXjjGbB+^;=H_oOP?f8$E]WadB;?)pXUNjQIqk*k1kK@8YjTqr=`ngo"1LlQRFQO1&N/ZF/N'V`:K"qWs;slVW=9pT'HmSbYk!
%e^^[?C'>-?8#16o;GiNoa&B%G1`@DVbF:oW(Lb;p\g-&RA904)_pbq,l9t68a8-d6_Pt0'G[Zrp9P7c]-P;2kO-)8aJDfGkQckJL
%D<pBt'cGPgeEZj-7JVgOMb'T[2>oW)8gZ+%?aH^MaR(]#OjpRQ'1?g$;kr&eH*r":cOtY5"<Kp$1=@.4aQt8?0o+fZ,KeNn>;:$W
%.o)'E7Qd6UB7``YViM<Rg_W+p\gi$poVC^3lO.2RNcs7!/"1o&kQB^K%JBTMWcm8:)H@'?-d)j@PXq=EQ23ld+=)6bTW[jAS-1<#
%o]FmRKC:B6C\05`MW=$Uh(FiF'_Wf3[014,iCdlqlYla[S]nYr-*jap#^#<@5ifCoQfpo]=,;LuG$0[ie"`l48%HYQmMrd1FJH-/
%7Pq4D`kD8djaf)T,3b5sGo%NMnbsYi*]osCn'n*MdIknE(i/hl:%@7r0Y)q4,0+mLP3B-Wp%)2.Ce:NP4Uh!07*Spqhm09O`B7NE
%%;44/Qqb8?C[kPNKUjDFLRi`)Q7*(7rZE3=%r[Ma:N\(WJ$aeKDsJ6:gg+C_XNeXhq*IXYaJhPlrHI$S\!!p2/Yu\,+%3O';Qap_
%":TSA]hRugV0QhL8YD,ko6hAqh=1CdN8?T:J+(d[&P'l3lePTR:Pt5,p["&`oMr*hhf5-4k'W:Pn,/^A3.K`W"JJ4OK?_hqSD^Fq
%A=o>s?oPSGX\l\%=\.%:No8skpK,[gIgX.XV$d2YeT&LFNr%R0rOuH;k)?=tb,h:XQ95;4HpEQV,9j=;LI[c-7ZD5kB+gm,!_NMH
%!(fJa5uP"'@8:'Ck4*68`EdO>Oa][77&;Y;2Ut(kngC^_%Vp)Q%5T7K%,#a%Ou33K?WP*H3q'q0$hFu@>NDPd;VAgPrm'L5UtUE9
%Y;X"o8$L(NTh9??2O+g[(n2rnMkTf<R2&lK2S_J%0N1qi^B4-Vq[(@3:^+o!`'=Tm=qD%8H)F27U#pJp)/#lQPn'S;6W*Z)FsW1`
%W%\eL$hVI"<0UgNYhQ0XQ\hD6\/7O2;l%J_)0%*<VDm$rNuB\ocC'f]MkHaD[EK!T/Vm13o,M*"cGsRD[.9UmL/NOn<="?\#[bop
%o.X6rC&sPZ$\_g-@`CPjY3>#D.BW*V+]InWa=&rNDU28[rDecYJ_U-064i?='ukH\MHa!"HiqKR'Xunj_@dkZ(XtM[iaYD(dX(De
%iCt]'3f4lP.!%#oqcSXej/D/C3`/?.<SmC<%siZ`k6B,Ol&KnsIp>A`%iO66"1hh+$ibr8mXBZU`1P'KMmQs(O=DEYY:!I0k>`1V
%*IK@16Lpaa+)`KG!fZ#%8P%H%CVrA"!X]9R%;[<biRt$g/a'7q+W#B*P)/a*l?S(eXr=;Q[P5WpP*)pA&^NT-)n/'uZnk#!NaGjY
%F-Ld5Pm9j.W5C<h+PG)\^h:OCX/u^3BKr6?>qX7C]Eh$JA%*N>oJ9VH+D9T@(#J=;NlnTb$RUUq"2$,]oY,)Qpql"3BOjshTVX4+
%>Y'5G\NlK!6-dsLQSu%DSn/i.&lAtqe\d[K7pkD*;fY2YE<[Y;jER[/KO#ODa#eZ=kR-O^5j*gZ>!VU_PGd]0D:MLd8'Dc<jI=,m
%H;RA#iBZ[tDhORfE#NOb.Y=Q%qA8AqPh*d8W_3Vlba8WGB3,I6+%@2fUc@`tQMKSf.ak\%@./nRA!\^SW*.U0TStZ5<&aAD1!QZT
%:ai<i>J&jE6"Lhk9>Ggae1j_;Pi,#62j*"Zjc>CFG&\;[jk+gn0_`RueZZ/+X.E#n"tV&d2Y*d+.U&0=bgeSlRgA@9g&`s6d_o;>
%\"33:dA\>*5<CCK*CG4I_t-DO##YI;#d=1O<TbR#;t*0u.lgFZ'2fOY\gbbeB`_Q!TKfRS$+DlS]nP)VJZ`Be0q/pX_T`72+_srU
%N0jfH!$IsZGV*C"2f`iDjKIo`Edr3"1tC(W19_)C-RC`FdZeo1PWp!DQ7][*3IXmtgn+e7&mT&".Ha([G^3Qu;*Sr#o8UsLKHl1\
%9fo<9IIDVj;]r!TpCVu4!CE"Z%JVK`mTbu'b\38+gmUT+C'''c@=f+[!gc^G9[N9lJ;e!PFWD`'rHuQ^8;$E1bfq#+9g3X,_i7>s
%0pWFY_8e[k]HJIb'_iNR2H#H*F`cm670j2fnrt,gm4;]T?frjUOq/(Oog%CeX"J4biBs6%"QZGgf:`/*:^F9LoQ5,NUYiRsQlpLW
%WI_B$]uPP7NG'WMN3L*sl+ZBW"$_5U3Q;1uauH(bB"4@WS<De\P6UcI<7bfMeF44M#u_`NWcImCLfcf'oDLUH?Y<!GT5s,l:hWgX
%6.o;NCY5M'Lo0;7BXq]#*%Yutr0og8BTIg]TjjaJVN-)3@j8(D/jE*(goTjr'6E[!_Ka$VrA-Tm*`>BS6\Om,BlBWt;6N2)A0o/H
%Qb`irLlt;b\7rBMc9[`N7@GuAaV.dhBfBte2YWu@lDW?PjE9DV'^t/+eWQ7afC#2u9Af`F^O>uN`2ElD))fWRMi9%/aJn8_VVL_#
%><u/,&Ko2rq3j,bCTg6#T6aqPOs&abf$>7sIIaHZP;S-_`r7W\].P2R._AFuJoG38A-U0,+p(D?TB==S*-a6QJ^!=I'_R?4<d\D0
%N_L,1+@-Z#]s7rE(&`2,&2MH5muKBAl.EqD?W]eIY?t!ff4'n4iA4IO)Aa%m9"YH87CPIC==..RKlbk425:CUMpW$9Cs[aUjM[#Z
%@EI0I_[`uG/3gFk^][PkJDE^<LG`trn_&VD^]g(l]2*NC&cG;^1L8N/Lr>Yu4c/JQ8TSW5Z6m#5<HSXMi>klh2(Y#qm*.!Bd7B]M
%@SJc_Atp^9dp.7sGnZl"*)cFq#m]qN&;p<!Ts-jS[Lc7B"$r4dR*@=PMC!r8;aTsf8<Ph@767b$Ro96s@9pGV,.aIJiBb=J%Z$,$
%Ro<*,/<t&UkKnG66$5qn\D+Nl$et!Wj8MQ/arX.]@RK*<+EF;IG#=)q4e:K\YM=(NE*3t=$5]I$(6fI2D%1Q/Y3#Z%:=iS17!<uj
%LM,T6?^X/4+fNoPd?0SD&5*iF5jI=Z#.l$<@>AR9%8/*@=e`1\ki?DRI#q5,+bNir.8heTkUe\[rQP%s.+BAJF(l!I&e&k/Jj$er
%<@nX$RanJGF[_`<;5>ZV"-V0<l*G+j(n.nAE5g:)<`Gc2Les'rmrU9Q19/IW&Lmle2-X\6@/0!Ck$![lcu@?a6\*$sN*;"E<hp:r
%b=$!.kQ7G;a@_s]@?TL\+XQfC%%UMm/BL[YAkeT`*mkcr'#@Mb\Qheg99jDa2l!k!do$m)$6'hq8.o-RPi6,)7CCmM7t%Ip3Yl=X
%-d+b`iKZ3;:AUGiGeID7l.[GqF5PI5$qhc[#oi[_+6YVK[H8np856WGC8K"kgP)\eBIZqBK2@ib=;i2Y_*HT5fst@/0T1NV)7@Z<
%f7(!/9g*?]@p1P1E+i1iPDE>d_6AMZ7EIbVM21\cW;VMq!4]DjruB3[Q0bF;"'PKZKepdA+:/tcMhOU^KglQqL+7KN^<lgjdhHZ&
%=!:%>4KPl_CI%@m`5AI]Doeof;u$X84.1'./8>%>=WCWH&qB36?[bFpq7HZas0bh2s"=R:-'X5k\"O6OX09`DA4Zn_kYodc>q(?$
%RR-r!s7_ktD"/#FZu:@2C5[RTYdsGIL3p],eUUm%,=Cl\T*@I8o)lo0WrM`W%K52_Qi-TE5Q$GKs7UpPIIs-p:5.I$s6O+lS,_N8
%07Wcg^\`60h]3O5f73hps$p=<rd4P5ci0D`qepuS7Hs_[s-NcRs7uCBro"B,Df6AKFlKu8-Yf?Q4!1*pqB%=S1rR>or>CpC_V'(R
%PO,Q^V\\!l5Q0c=Kmu>u)f#7Zf?X3fK%e4nq@gBmXg7KlNILq$c%!aec'N:VFri:2kKj,+Qg!c5XY-`j1'lLG<l(Se^7M:K-eYt!
%lhC$oX1Rr,YLP]."e,>["e#39]-:Eo.sm%8?BF.]AGhBlqfmM-VtG24F2>UpgE[7#iAL",?.sec]M8UBpKd79f>EoiVtK_#ej3!E
%lbn<&?d7nBl`.I?\)#[djk&X;hMn&G-[]*)Ddt_fdNn&Z2N<LDN,Nk'r7ucQbgAdbB+Re0f%7OU4kjj-c'He\FM4'n&..cWZ"p4N
%4msPTo=D[(l[Soq%j-9CqtM7$JqJQ*HZk>BbeAO2F?;]^#Jm&3Mqc/Kphr@qrP/=.s5i;0s0)Iohu&DAOB[e(A/Fi!Rm>]oXS0c!
%HLW._Vn"JEASg5gMq>I1WQJL`O)eF<^OGbNMo4q3Hok*45Q"G'q<KTHh_F^eIBR+,NW!a%rqlYts*L+2^L,F_ja['r^]&0+Q[erm
%q`k'Q?i#!HqJZA>IOd-(Pm_ZT<8p`:Jfak/2H3o."7RdP-,XP-f&G^XP")AV2<pCJc;Fik.KqLg8ZZ$V\.MM?ML#aPN1i!>0^TW6
%M@BDl@38so+D1mIKi6ha.f*,u!s04YJCeUjO,'rtE7ig62)kapHDEq<5Ct_Z?7Z[G3hsDb!P:6k%u3B^1I;h6.!PG9"WA*#`>k%@
%Rr&RP1KY9qaj4e\K9Q>sBNVT^9`4eW(<^hgYpt-%;@^=B:b_J#eHl-(eEIcJ_r;c,*8LC#e&*heRNNCG^_GbI(R)es+.+D31O`l/
%*3XaW.RsTUHa::&[I7,4j8Qfr'&F_VNc-E+hp`Jb'LN4![KgA4ge./OQ1047FpkG=0:KKgrBaZOTPsSN6u*Z9apNZM7N'X&61)8+
%[f.aKpetOdmoI:I$m,>al`%'(Hbq-[iG72-mbMbV/(I]nGTr-Q:h!tEB3o83CL99;Xp/cZs6CWHasS^uj09W^<5QDL0g6I;>JD)>
%>3R;CI%Cs7-hDX^_BGaW8pK$3PJ*km,(]],0HTBLqMWVaZP)-Wj-P-lf3Z5HOO$muJ*?3OBD`F.n9mJen4i$6oJe?Ed9i^0%LSf6
%dJWjRI\(LCY(XjknH2BCLYrRO&kK?ui_U*%`:7BjBp^qc`!PM.IQn=XdCTuKo"i#SIeJ78C3V[]T^Y?"#RE2.4$pFkSe<lUfhF()
%3S-q.OpR^3='.g<RLTSa&+pUgQ+V1_e=h2&%QBsh9-fuV/27o1SfV0TDeCH6gS'd.V2O:"&$:hSV0Z$sa<3ZHV`@cDW10DA=&EGD
%<5C.hjmN&3PBuWi"%kRP+hsLJ)-!p$A%3N=@=9F0)m&c(ofA0>GpAp8*9H*I['r@b#CbMM,KhOc`\AYQ#,hn%TkoI7WL22UX$QT_
%C#UdXLW)J75CDeG%'fS_k"%&I+.+?4cCa6U`BQ1X_E\&S="O<4fb1anpWo1-"8BLOGhi=c=2s!L+)a*CHJb;.eXuPk;g>RVlTn]'
%*n<L,,JGZRqgXn-_HCH2pc`A6m,hDuH'"U[LU7!!'Z=AIl_!m,2p+J]a1bU*ib*SU\$]u>ND^^VZ%MP%=6dYDLd$SArd#W*P_EBX
%`GrKXXe4qla1"=:ntiN=93sg8+hf$/"1r2miM=H"gp`d^m\SK9G0aO;+hh/DHXk/Zh$<Xn>(>#6q5,d9*kPV+Q63]L4A>F?GDOk!
%3`6oCN#*;O+\kPqK<h(cbj2W2rG`MIEEt\eNuu`fTf.g-1emR'qHums>E'D@:2&5j1'LcuR%W)[^PS!mF<9L:n#mi3T84s\?&FK6
%HoGsG/:u!lbf3mU/L$Vf)'WPc8<To"Y2F2Q#FT[cP)OtX5d5]o=7kL$:/nV9-E)+j_@"q;,b';eA/-+-]du4Wr5GJsD&n)rANbsA
%>96FX3lrGoCP[>1HI[Xk53Q\L]ooiSC_uL;`PQB;hUNiI;,V3gj5?bt.*Ydd%?Xloe7l[p)ZRlPd*N%V,VD<%DHr57#ZDrm'&clC
%]S5\X[KZcHJ1QpZl#)*"Oi%(;DrS:JM%%=(*AnqUrUYt)/&J120<#2H<I%WLHu2/EN1\AiYtEk?&lLS-pb.`.e$uK.N)tW5)i4p,
%CJ<>8/o.jc#*Jf<:q:khL]L]I#CpSnj#8Mri0<@9;d!L:;^/[kA6Kb?Nm,Wc;t,=a[OkW;TZ'4&Nf5!7kP?n3X?\-)DW*dgX+X=E
%Be:0U#?lG3ocdo`b`''[".,BJcTqW(qQI]kIN)D_7pkDM"KA#GbGM43R%o.Z7N$cT\b,kla8K:OHD?49o\OW"J0;Za"XH(Je-%lq
%4^W+J88D6\ctGMfi_RmJs4'Qg`7*ChW1N@,$HETU7*<0%V*pK`nPk_mZ#.WMmJG![qt1Ke`(/ZP(&crKU%9m!-Z;b3/+Zu^;b#s!
%1Z(DQJJbu)4)l,aV$3u\,gIh%nL9<cDa0+b(R1F^]%&h.8d0i/D%emt/2q$4/]5JtS@o&*IP;Tq'.K*NQ:s+jo]Di6VIgC-6?_bN
%,:VN]&!V=dgb#T!'2Et3I43`1@*Tq!@AJ),mT;i\;g>?tn`K`H=H[b,n0g@A1'LeN[sTDU.NCfJE.tLu"SsH=^=Yr.HDl^tZ.pi6
%+U#!L$:EP>Rjt9baf5sEqp\;BdU35+<5#(m`=)RP!0:c**`iC(.J.o'];loo;'NLVAeJ.4a`mW^8(-HTFlYYEne'H[,)*?+?<aGM
%J57iQ8%K#F/F*,*D*\UKb@fbW&NZFkN8_Q.YL1OpN$Feo16p,`R^-e%=.>AE[7WT=$P7.9Bn8tGcJI686t^ScZl,@3'Olq1jZm)3
%'KN(eQn$$G&@X3GL\#6jg?rQnG^Jhi3SgWqDKj7bC+9ntX^Ur;MC9Db<jP*1pZub&EdR;@^.RXED*LINod1><TUfW0h?[&sF@Xkb
%9T)$gFX1o1Ta@N]:)X:kW?Mp"Xt</hQO8VKUg2jAkE11u?`%ke]!9MYeYSESoLD8YTFE+bPH)K+ET:Zu!0h0kP,QY^(i\.\XYpnk
%e"\m`hRj5VZlE3*2r+)fr[8M(mNsIP[6'/C7S,$dj+c$$_%<.qOVD:HM3D+C;E['-c$m0DVYHVDng\Yhp(%m9KL\DaJ4Ok-C-C]V
%0Pn$RFKMT<M$>0jY3+OgWZXNkS/OsRC"6]QFrf9OVFFWc@2DL4*6o8Cq":*MQJ-t6C>G&Q<D:,qDccOK`Ir`0?uJ8$6L[7D3CujW
%$So;!.S$1cipHil4O",FM4p)S;\H!"@YQ.U.omP20WB#,_0`'>ooH>5ih+E[EorhH2!.Da4[X%jEdUdJX])NW1-aH=AqLZm_mKU5
%BVe"nSYAML;27kkE^P<j'%EV-XT>hb!jsN<8-*,)_a+/nQI9e2Y^Jpu<*!nrN#J%@UIt9[AGS.C1+JfWP-W`tffVh`Ko6u*Pn1(m
%V%g`+$?"(XrFF)dQ3neT>V[mK*_0MM@9]ZMAUCgs<P4!'f]%V:1&Lb1CaKm%V:+t'n:5Q/ic[KT*DcmNMEp;H4J8)9VDQMLn:6,J
%$1n!eGedlJVf=(HOCX"@j@"63^\8j589edq\FU_'\+N8d%TLn81<L-="%rPfMPK"k%O<3Ej@4?dZG::jB=\21GD80:`cn)5goC-s
%n/Y=mHha$ki;oS*<F,):4@g`TWp%DfG^uSVRX-;Cct*d3g^"Ga?6c'h?Pj=%,_MS$4=A,NKEM24`d!TPkd]te4@iAT[O^A=YA!9u
%B>t#[=Z8WkOE<CYEZmR77EhT\n0!QTIN*LJK-r"6\+=^_$?"61M).2.oG94k,XK\Z)eDnC>\has?#Uo?Bp<j^j#_LS!*?aaT.WFI
%)j_BK:4*;jq5FdD==HbI^21oDOk:cK4]Mn7,+XUo#Gnhrg-@ch4DLMoMV8&Z`V[Q`-J5,]?rLkZd-O,AKk[*s;,Cq-f8-9Ai1.jt
%QkG8+Hm:R@e@h5^EWajUn,5jr^j=g9hrPt>@**N@;*W,2W2.+NlF`2t^i1RVfT"\E^=I6=Zrm4W:AploYN#6.@m>9sh<lVSqfVpH
%\MX(h8GVHc,YP,<LZH??1OI=.bG]5eDN4St.PYY$GJn;UDop?AfL](8SWWG9:u.S6gGZ]Q/Ep&bo8G65A*%ojEDA*HbFUrfG!sQ[
%>\(=g9f,^OhaPs"E+2g')Edp@K,j12'cF""^k)\&6VDXT$#2'IkrKYY=jiG]=_]3BmtOeP@U>]$IURm*BsnV],.2)Ql:631O[CQm
%FqZ0ZUT-fG!8J%R(eX=1#@+,En:+h+Y^pYoN]eNU9iDsU%I7R)X_54+7V3@AMV+JdNS**irCCV"@Q)3?,gKW_k`S;rdIW3-Ni,m!
%kFB7k\]2?L.jd<I1Tf:CLYEu"ic*AX1V#b/1ram#a;//RXSFhHeeWZ//"=..;*cU1-Y]U_-p<b_P!j02>Ml]3dDtt6-abj0eQhf$
%b0tIp/#0G9H-^2#<!m<h`cVHIOMq+,fd9iJBTT38h9<9>8*eWWpsYMbAi'cB3-lM2$Lt%!.O>t,r[=I&jZlrO&"0j?BOs)mHDi:%
%%7S8<?iZSS;5gM'4i73+\;:)q\ffLt:aU(lhPpOEC,dd;58@Q>#%=D&JC='Z3c4m8U=Kj_X,DH3Hn]Ms?S$"cpfE@2hRtaQ)gDr5
%3$dYtqRA*&cR7Lp=t!a-Atbl8Zj3<hHp9)s%@RCa/L3u*0`ZO=[&Ei?A)8Si*ld*f)L*jr%t2!ms6S3QVKLT<'9N]'%=utFI1D3m
%<\_Q3g@Do/O(=^fIG)b9nkkYbQfY*dOuIGI<*oCiZ:eZu:D[,_0GM9[`l=V%84htU'BC3XST^*l'rVC+'/lWXmU)@2k(1\I+$P6s
%Y_YE+@c<.a/#cGq&@nT0+2V@rb2BtVb)ikb[92UhH?P&HGZ+.$I2>6*[2FR<&n6L0[<XkU"b?=%g(8jsF(7SWP;rHHM&\H,Plp<L
%8)GW?!^5i\*c:l;/A-DZmI@[3Id43(^="I<`^BrE@2@&B)NcMTX&#i9m8h2+p%X;3"D<;FF9cXm,GGk9,bq;1>Qka6eL5@!ibRD\
%08)d5US<.p>mO:0N'?e,U.?n99h-FG'"X$b.H6r2?T+OJ1`p&&<m6>r]jHH%08Se`^@JN^hEKQ.foK;aD5-1phbe%DKIWlgKgmd_
%[]g[h6FY8Bd<OOoRT#<[N-`3sJp+,a+*C,72sSDPOJ3ZGXLC\7BF*kpgD^[FLR[R`h(QBgdHselhrkANY]<C/f5JD1D[kjqQrm4p
%NuG$"\ZXgb\>8;5^.`(*lhm\KErPdEn7_=Y;7DUt^%)$f[t`]l]7&)o;30W0nQ`-fF4a^%7>'VC!?Co]',B%Y)cD8e&+7fCSqOSB
%hk-Nb`;+k2c;t0!qEn1KG\It.c6=cb-+l/0nX2mgG9sbTe2NRUnO;m3D+^YIq?P\@,-j[j]krBOO4)CY8JX+5`D*4K9X[hEIRD.m
%?3lV(hd8M9(-2?@3`"Y\7^<&imb3lo\(c.?H6IR50q`;(Be2`!#Y#C_G4YK,F@RlT@eSN=a*33-HO/L^653rL[AVbd$LbGC,-ZcY
%Q1TQD!4uCl7Sq.\J4]^5Go+2%KYb%cI_#ERn:!Hg(c>IY*7oC#6_CO5hILT=B&aEi2np%j]Leg4D-c%P,BjO(`nRQ^64b['+)o!n
%V===64DH3L422/NRK=r$G9'!lXc?-2DLX*_I+O1#>N^3i305c]\d<"lZ2+.cm4X/(mij==7X]Lt*F?b']5GJoR+D/rp6WXOG:c,b
%rVEZG#OTD[]Erf:.5.%)\_mBaq!bFTTtiLgmolsK4M9s@SHn;#o1S'89m&O*rg,Rkh-5>QeKI&'_#<tn_T-kOip53!=J;ZL^?L+:
%?$LY]EViDf_n4jS;bbcb]BJ\:*o;#Q@T:Y<IIhXZ9B"u<s6=L6k8QI&])j+m]F*0M_Zk=m.gsAd:aLa/Peku(0L7,BK^T^#m%/s6
%SSip+]\fm2\f?(1]ShG_TT,:^h1_cIhJ[lm]Y81?Ii@_N0%Gt5f7oiLVoRY4Ijr%CM\:-<Ne]f'b=p$EGMRuIa.@0u.D3=ZW?B:.
%\f"7q[CJE?FTR6c3W[=$Z$5/Kqb,oHp-6;SD=>AdHM`-_:N*uU:G9<:r_dudqe>h#n%+SZl!8Mll*:!;?OEuDqU=JFRK08:hWN4a
%[<LTC@Ahje$88N0S5dhPF:9RBLd$b]^WhP'nGOQ,AmN0sLMmIe\"@l$bI`e^^V&kb4?`Ceqb,o@?,uG?hK=eVj^!)hl*:!;?OAIT
%\on#6?,tT'hK9Xk++(TtV==&Yo73G/R:7<#EU6#:*BR7?Wt3,?;L#tT;l9M-Ue\&*&+lj/GN#N0pY0$^YH<5EkP)5C^&:.eVmkQ;
%V\e0-Ijr%CrA8\qGMS&RoWGgqrn,]e085a:rPNp%N`nr>BlF>2dpQ'h.6iddCZ56cb7["RlS`)4GMRtNa51`a.D3C\f"L6jh+$T*
%Y.O2qf_b%hKpR"3ii[`Em;76sXh>,2%6NDF;KupCFV=cNT6$7X:17k"I'V=/pjNuVQ+OGD(ko^&V=8SRfOX]"S_k`Pg?R:6h1Xt3
%hJRfl]Y<^N'#p["2HRB@b).hUL&r:W&ADM)oNSjHrGh^-iViJSB2i4%nh(ou1TG6HhK9Xk++(TtV==&Y:Y8he=cW8kcf9';Q(Q+Y
%-9MgTmIlm`laU?c[$IldXV)dqo/_\OiT[WAgKt;kn+r;qH&!OW-+\OBSk%cH=Y0ps10In1%B1Jpn]trX<ujPYb*TJCM09$(/gli/
%4Q)0*K/nH3C`(:,NO/_jqABEIEU^52DZNhu7NP7opHpp$(CR/g#tbAs/_9+i!!:5RrS,kZ7rIu(<X#;Ip<t/cNXbV."o1'7lA1!Z
%[eHn8iF0WB\pRd!k-1:]Q>^Jcpk@etlf0miA;,,/Ydnm9Mh1.+4p=T=DlV$0_Nla(0[GW^\1fqKD2VomU!qnK,8G&;c$IY>rUkE2
%h3*Jf#jcOf@YbZ(-?rnLGAdRk&a5Z,TYmW9"9'`Yhl(#7ec,u4nU8M&)l3<.U97U(*t#V,i&CK:.$nfsgu!qf(HjeoK3kOW_P)i\
%iU-au]31e%&uBdF@$Tju`[\KT)b;KV-jd,V[Q-)U',3h3gJfV)71fq6gf.p?jJcE=nlFcK"l(aT^kViM]R^/]"T\fK<!X$U0Xj(p
%HIO^FH6@TL+#!KaQX:au&B-I(rW2p\bZP*PJFdNNf'Kj3mKWC0b(IMn;8&P4G`s7KZas%*O!P%rfJ'k9;Y3\h9$UWEI*jKaama_^
%L7;'Bar`%_`ELNLWRC)clCUL;!W<+c'al6`8;rK'VE"/(.PG5R/hWm6&UDAYSCF%Qj1HIo$9`:N1T\u4-FnQO@):uL"k1`bet%l=
%Uu"X+@5k%Z.*E8%C'.5GT,IOp$G:*U#@YK_!i)W!^6jK%@HY>o!67#4QKnH_W$<cj5pb%*.tZn8dTJe@%*.PVNCkeUWi)3K<P=:t
%?Ip``+VgM5Akik.+dJcWiMX:P2_Sq])IYKGF.Bon`R4D\9;r7h='st@_dJS<"JXiGpJ15m16]:^<d.bE/EdSd.qp>*LBsrD28.mK
%^kBHn2H;MC,A3MBeKC;O@KLBW5b=<<s5$hg2O%LS`9tt8QZ[\/Wf(eqGsl(E;O=9LgQb<U7qGQ+aDBfqeJ2@INr/kE^RG:S)]>Q#
%&(%(Up=r?t;s&'F5'`ZLZtt1RC",>5M`RKi`qq+);(D2LI1:pR(T:<((V/*`mG9W2mH7MO%oEW9cTE'T0L]#W:W+)m1+N&UAQJ;;
%_\fMU.WA==[dOjsCU2Qt7#T&cGU&!UWKWi;;-;pdY^Yo?8O[OqNO79>F\^,Z]VbcYqN@Ph&Bk>\LAe5SY>VUbj11(3Gn^/`6n<=R
%.7Pj.-F"b3'[u<pNnQT&JT<Y\krGNk4\g\X&L8YfMkMgMjZI,Uk%k5b^#E+9LeY+t1PP\o.`(b*k7BJC+Pio9I(i&p"f0B/j#J$l
%X'o$L(1dZV4813N5kt_9dM>$G=!bhY779^<i$$o!W@Xk9X=^BH8b"'(fVK0\_\B)^Va:`[qCnGiq\BiLhqHF`d(b?[d&%HX9]Y?D
%QHSZOa>7FtZ>p5'&mW86%8@UAJQ.DaOBXlT^C:Yr7X,$>j:A5<ZZ]Q-FUhi8Q'YJG=b)4s*%a0$];crC$Wd]PD%q0SPV#BRN6R/6
%/%[@s@<)f&pW4&2lTn$iqo>]]DkrjMquI$hMF/<L:pR;G*bO6kWmXs6b3t8[ZU'.1DGXRhS^:?K@d`#^n!8Nm7^i"6qLV!2lf.D4
%Jf3[M;\[QP\3/;_881o&%0Tnr'/e3Joir'+?ojX7B\q+f'H/fjk0l_[bVbmjHXgcVOs$,t?.5>iBh/cVGU]`CQI0?89gcI(m(H.3
%Gd+;mQn6K"ha7ZOP)caQX,P.m!m&;,/D0`L\aHfb=JM[4E`$[Xi6]:$.=Z$XAB)@4>lsj)0-VL<$;IVmS$>;(SO#gSWq(t=9r1Ok
%*_TP!gI[C^gg[s1.;<E>;jgp&S'=))LW._m?GUMYV@Y.Y"L^X@Vj_KBjl*@Uk0;@E3?cp$RdI+jC!2HG9P4!MRH+80PnC\B5*WbT
%VYcC<fCp'lqi,Y>m2PcahdM@(GbKYBE6PTFqV"Oi->ArUKF)lda#@Vdj;?d$X:?c7#WeRoRRn[WBFY(&^JqH8>09gOg:makV<E1U
%.@.[s.2@e(>H'_uOA,[Gkm&^Gg2J@*:@9AZDHksj)L,oM)<A:O8CUC]qPoV&m)9b@iKua<9'p&LjA"*:2k!T^P\ePC;_5>)\Q)aE
%#Y<UBQd7`%<$uYZ!8a(@b74V/@TI6+OC@T]e8hX\2km4j*H&D0pF9&&(l^)KJt8hUWlS#:eche`Jb&?3mJjS^c&!]$H)S2#h?l/V
%*U;p-/0[n*9Y$6E;YC8cL-i*&&4eDScc-.`<Mk/ucNX[&`OIN*^tq9:I%f$KOmIO[E^6*GbdmO;g%SODk[Hepc7"ihe;tPrhI`!.
%j&T,ap``2k%#_/*NXsgV`OVH[\uY^L13u[o!i:Md@eLk1fO%p3`tiLEFW4?JY564We'3:*p>7n>pJZI!n+8-HlXY>aRnN'Sg^_G@
%ItP1^`.VZ4]p%/<3TEPK1tm;b3lOUGFab"uO6h]U4CVR9%9,L!Bfe:?)hQ5#,K!o1hO7>QB/g3P0A;Z6NJU0I3!A%IJ^Jk/#Va25
%":TL<@AKu8ZOul8T=<gWU>Iau7JldP_Q[VdgdK?=r=GUGlp?@CL4(*GZ6>Y'FJ!B%RAZ4^ibmIeF9J*.40inRj$B#lr@N(;mq^nV
%&)R'Fo&<-Zo92)R=f'=e'/^,b<TFXQgJY&<`<;S8V8\\RLY=FW%T#SH\]Qn%2g**RS:-`]Ls\/-/h8B]1bq1oGk2K7W_3K#_p@18
%BkP"N2.iV\-UXXCYEV^Vj<!]/6RcAY*mY^ngj,odd(*""bRem%#$%`)Va=8ndM_Fd(!E&'\hFd_[aEVkO@\`5#0.4cW!(fOAKm7J
%Z>pb<9#!p*cfgIQCYtQ$WnYl\S.^Dt0H-cY7m;7h3ZanT3FHbte\0)-oMqW#cPoLNhQ_$BD6^$3ht8-jFMg>L.m>"4n`/92;OM9I
%0GJ+Jr%FKbC_FiK%[Lg1IR226jT<#^Ch\UlD;Q[.2UX_eMct$)<%0SB/t)I./!`*#T-kIlr-fsed[^\kROfX6UnlumMr.I6S6=97
%4sk0MlAM<8qShWa=NHY-a1i$!ide*2AjLRuoGso8=Wa+TW,eT9Y7,9p<J!h43eBD@7'5RpSB&J@jIq=hYM6%e8li`_'=Prmh3[,M
%j?eB?o;_4Z#5Q0r2VS6"=1=Bpd,nWA2u?sH`EZkcpCffrjR0E]RI*ZuX\uLF+2,#jT?8*Rpb1$9bP`Up_]`r+;9ou#;Gq67hCqJX
%]!l/1o'nVK?>ebWkV468P_g\U(ub\p19>bk_hkD%Y35f68"[I0F,iHK52Kbf5OUtq7"M@,/o:SDO2R_k9DIHmcAOpSf>,!D%tZ3H
%HlqEniD>do`/OiZDfWAOGT0dYML+K`S:U+UqecoJ!hO:lhm:cE[V'NEpGQI['lAYLHJ*R:A:u1#C]o*gDWF^e'JX6oT63:BLME,W
%!,p`Q9D-Z]m-l\3;,d'T"eN?[>aAkZErEjmh7EbK[@@'1W^Z[:RsdJfa(b-o[TYcb[G7\#RG)naB1W5<9NV-lO,DiL5>oH2gM_/c
%Xon/W.B)_mN-SLtEANIq@$n+cPn*eM9&oZ.'T2Da$Q&_gF.+VTE*4qCQ(:jL&Ao<=A\[2[nQ]41In=C(D.*K_XbTCh3ADOm$HG2f
%N@i9q6[=Fs.N4'(Kh##2/t"-,k4-+39LL\:l`i>FiNfe_/8L#`OP,JPNDtu4acD0mMa:f;:hu=0*Ic;gp[XC4AeZ]W,O#mt]TGo,
%-7<eE(e2[QaL"<6X&JGsQ1UiIK@"5g;`?r$%K><bP-JAS-]Q=c;:c-[:>%t<lYm.#e5lV^E0Q4XT;5>h"G$khg2b'cmXgg[22kq)
%Np^D)?]n@F^;1*+Vi-H``uTU@.0Hg&BUc^"*g9,0]t!$&L2f^I2Yb<h)67H\\S3qaEd(Leo-Is,i$ggd?>&0S2d`&P7k9joP1,aN
%U@s1<^X`7Vc5m@Y-m4B-1;Go7XIOT#4W;XRZToM.?(<?:JcrK\]-9OZErRPhj62tderJ#X%1^-I,U+85HKm>=`^>H1I?0Uog^\UN
%J*u$bp2S)NUbQ.]+!&mhh4=f%.J`\^.JYgj^OBtXf+esKCjQtk*mAL+P<gK2W)Q6/TBs2.TkQ(m:[ok6B;!%[:\K'kMi%h*P:;eu
%1%QC]g%%#kc"JcT/KCVa?p1pN%RUS(&98T]$5(C`2AD!E-h4n\=X..t_*Fg.DsW)tj*/ZVHA^4^H`u];f=Jik7=s3?Ci"&)ktTWN
%@3j1X[mS^FV.$81Df5paUp6$RZ_AJQBkNo3XE%+;5/jtAr+^WSE*.+^)5usV)W<Vm.*>h5F&,liOD(eED/<,@s2(,P@N>)JaL"[j
%?dH\:Cn^4]Rs1>S>1^BP*!Pg+J73mc%4BlMT<sGNKb;rY+R"4,l2UN!4$DFnmEFYhDE?plcWKt_WuOaI*428,G!&-Z2-e7+IC<[u
%>!Qj$e%BoeVo,<;98@d!$G.V*r.G1@RS#@NEugurg+Z`5KEQC\l+BW!EKK5`p'4ce]fY;.*$R*Yo'/u%<2.!:MGGtimE5[(7=cd6
%h6k,nK3=3OJlouXZWYKpMqZXbV<3T,!V%UTirq:TkP>fST@U#U0,9#moh9&Np*YD@L&kI$Wb`seR232@N]&I8f3/C=!RKA(+TM)\
%$c`N=M_1,/_MTpW)TVuH0T9!qqb/R[4Nuf8K(*`I<<PO3:Z:U-G5jdLqJYV0,O_)JG<5>OR_c+%s0Q5hUDQ5GO)3lpnKRdo&47a/
%99>ll`uK-oTaA'cQ6WK?)'u^LQfp`$E;M5<NiFa!NSjcFP>6p!"uf<jF,+*]3FnH6%7:TIE*`T4/:+HM(i;?mpem#8la$%NTJ?c'
%E5T%b=:na;(3"">aD%O-M;)jeqa]@V9I2)jJ'kLGP3dtJ"Rd.]m^/mtUP1Ap?J--(Pa+E.e@WJ,8+($Tr;B"XI4d\F++?iO#D8f4
%X(5pE,<"Mne27<kJOeAUTboPQiin+Pa$kN4Z;%T1pPj!;R1SKdpK:oo.L8'P*(>_kVgiA@YMr"-LiiTi=[1+!I0H_1S>I:aD$1Fu
%Sf-#eW1'_LK6,_P+A=5;2SVfF/84".p($8[e1Kn^5qpC<Q"6=@5KPH9S%.^o?70W*?nd,SLcb:>U+^QnX3jS7rII,G6VJe`c"h_m
%"WUp^_M1SlM3&Tch(\!TBfnS'E^9O`[9n+SXhIEYi(p.u(I9g4Mm<Rq@4+hVp6m/<K,!bbD7mKXmu'[&Eh\.(?c`E*!J\j6c-A99
%o7Y@?$$JR5gL4bd[%n?kRJ,[4*[o^Z4gCe15W7FdJUe?G['F9lbeu6kSRT=AMAM`dZh2&M:h`dF2o8.NN]#\-jcq'LjCM%tY8C3C
%^^Hd,lS?P5)JJchb(6$$_^NX+e%cekWFXuhRlt@*WsF=-C%Pm`78K]K\Ut?^7S9O3X+ZnU8lj@<1r!F3k>[-R8Y[qG(b/DUC7"0Q
%6fh);7:Wpg`l)',*k+me1qps@'!SY<ju6.9QhM(<!P=u0N!Fk\dk5E^-=F0[?9H%6jo?Ba#n4$6('m=u34VUTKf`C!aak%mhO=b[
%@;^q/eCSLfoRV'Q41tV#14c$Cl'&U:T)agEgff8lM.9Xka2e8ffW:6$]fh=WWQfN+\9qbkah>EHd\_.,#Zk(:!El2%$Qe\DY+MWj
%mJXRA^BGu%e-#J=_TLN+"T3d.1pD)g;e;B(%HjAV_`Xu"Mn86'd^."f6-rcHJ'nSJ3NY:%l+.mK2qWa\GP5\?]3=OT)p"-uC+,1[
%OGgOOgAm`!5)l@'69?So8UK3prf@mOeo>jBIdcF6J+mLmHh><dY9!;&\Rn-!.qfo-^S6JLL;@F`KQ$jE&Sc1mH8ppD=kLOO2A@1e
%DVE0OGRUQ!D(DJ?gsBf<*;:0C)C6"Z(3$Nql?c$B3>a3cS,8ikTj4U1;qrg0J"K^*[ssntoe;cZTH\^qTuF1`5blK&hd9'fcW.[)
%<ni[7Ee22>Ch=Q\aIQ?71Bs$b7]odQcNX"pp>a%d!Zb],MJ@+5^;"pJYCA,iWSL%H5?#J]B/s'C5u8HS'*<mh?UgsDB&^Qk!FG8g
%(non<5>"22d4S4UHb\#+4@#Qo%_;/L%*0dj*m/O3f>-6/=LDl9(1bQITY`Q>!?8XHUf;qQ\`3pH>qu[E=5+\2OX9sq!XA-RqPKB7
%NiD$FG!1`R-PPtdV4VuP1b?enU+\DHa!u7?k;*L*8lPp2PD_fM/AHY`Y9KXRHPV.cgEQ2BVF_h!GBGfj7L5u:WZ9YI1+2$J,/Yon
%>>`=kIUlg)HW'T$7t'%V?eMAu"rS[t@-+f5+6Pi2U*I^r_cB&>[:8o=75^um%MEPW7.RB:&DN#V=pfR8_nAFUoBE;>\'rVqB69CO
%QZGe6NUFT!9.N,=qilW)NVJce]'`Bt?!Tjna$e#-!E\-4qD17cM.ec<S\FH3m`!=)'r^D0?X%RF_4#$b+%crIAT.-;XX2d+4H"8J
%A\Rl%C36;;aAJtjrV0*:\aK@&oZ8c/igD"Mh)-rY_rW!s46/H>)Rk^i']2_H6?Qdg#a*1BAH,ZJYm:Nk`Uei/OK5W,WRe!jQ8mQ7
%&LOfZ$u3V*NAH8>3[J061+J1c8T'j^96?fq^")mNBe)UlQp(um-4MW`g9a'X#.$6I^21c7r8sdCq1F.^1t]6b*W9jbn=R@(iGe+W
%El1?Nkgr0]:-qTA?[e-%PD&q6!Y+c5@Wk`k0\)L9@Fe!`Z:A'>V^>.d]1coDUuYJ;C>YSuq&$Zr(fNKm1]ftm?IZSMT`7F_;#=j,
%_,>C\R]qH,RCK:\Eclqrc;@;s#]<#?`$D'bh51G^USQnt+aH/(WM`*sdd/TJ>R=j/+qKnWBt#AkgPFhEVB7_UEomDmme9(>Pmf4[
%)M+T8#8]s3@sR%a/Ld0[q$b@VLG49QC*^JsfLDB[M4HaXk=UO$ALu/khuHs\$^sFl6%JR6EjX3WXQb>onj#&h#k\0#bi$bs*BO_[
%&qioqL$M7uKL?][rC54!`Tt/;-Xg=(\W-3:R75s_h'Yb!9OL61%>*IcTVp*Q;0AV!Ct`R\@9^(I7m>Gs=5W)Hp.t\<iVe6M^Y7n0
%>LCjUOc=l?Z"r=S7XfI[9eZTJ-rf>.ZS-6hh:XqX2,2QJ$Q(*D5Sm=KO:PWZq3k8+!6&IO7Pa_tq!3&-q:8U<e?m!5<o^YMCZX=p
%9nRWq/Wm7'/=@*JO<hPU2mC22)#sbl>7"e9j_#Fp0r>bN16dHDbcu1^<ikPi2.+iue9KOaCTo7dekSjQ#>%Ulqk?j+7ZK/AKA&d/
%Nfb6Tc(Jn#/7J=Z@LVL7`Y*TPdMRSa_h]r&5utstr8i5$iC6d<oHi>GPg;XtH>lHd`]BU3aI&Dr$B'>"SmQ4?Rq7Q'FH%.!<qW\?
%j.D\i`n+?qgkuWnXc28mh.%`I_cgq&P`"FJ8kR\f,gU+\K_H8-kgKr":R'%GU]>Yk<SB4C\tVHZT&\;a=>I!KpBf[d_`FhX"Y3;O
%Jm?Gt*<QqCN*JoV/hj\s9a\&'Hfl/u>utj`p\b3Up$Gc&^1UC?C!5jWTmq3=Mg\cpY_BMfr@3>oUNY3sH@^fpdJ^?HQfeh;)`u/K
%Iadd&(oO,^LsHFa,D=3`+e9kb5T.ZqIG7('l1V_O/cPM)J=(McWfT-%S841^^'o07dOmLI2Ih^=YVLToI+2?8RlpD^HW'K=^.UYM
%NbnO]ZJHZLo-AU>dpq/!=[)OrXWNt?&p>q@PZBc:9<_+F%`-_tmq]nF3+kn1-'ik<P?58`D_?JKFS[tp=S&N'XB!Ef+m.#^TV\]9
%APEf`AdhT3@GZ=2kCJ"#n&sG*!)Kl_D[ro5Nc!G2:-i?TjR69TJgF6O+ra1XV,5+[(S`s3_QNG&l4)XYL4>RMq8l0hN^XBU0GoB9
%,bZKC`u?Y^7!K)q!tq8B+&QB<%L&MtOQic=L7eNSXiU'^hAEu'.QfWUYHmB*5_b/)W(+k[6Wd.$kKE9Dl]B%tV*[+CBFV2.RAP%r
%%etW=:fAL>p:48>@Agnfi*"m(CAqLtodm+na).NA%6tN1mG-9pcJI2tCb%M$AYie:fKJ;+J%5l-:"p7H+`)I<_E:DP$_d!g(U=lb
%\WJ`U389m3oRdJ]H?cchCqH>cH_\$TPn9b\VtJ]Z,i%08?LCirYWP0rIq&SrZQFm=r.TCDHC;N+W94V_K))T))q2&eP"XXMK!r50
%=IB1f*Bgj[6meKN\b,cHf5,/Me[t/2fR>i6fG>`5'&%8^W_g$W6]j]O2gr&%/:L5hM<V:Y^V67$pdu#Tkh5P%@=Lkn#*tJ%S?&]B
%@T<^tFq_SsKTMTjnYt:!Y@RBs5DPA.@up?rA6^YDP\A,'6MQ!AE_o1V`7s+OAG;SnHkO>1O[Haj4nB4k?UUbr'`GU+oS)XRo?WQa
%htrfkhtB:ka!bKMEMJtE"=3GgoLaACqp3%7Y\!\[b(N"(,YjZGa`%mLB?gDC=0bVo8LR#0rKjL:bIL"ns(s7AKr8X+^\t"u3gjmV
%o5)!$p,ni4mlJ^`qdWt>+6V*KgC(Jc5>A35J=WRfI1T11kWWIZKU6EG/'d(FB@1cHWo:lK<PJAL_@bJ?8[X*q;>-.;hRYbYX(3Hk
%pj[@QEk0)QUneX?+L.V#P<2WQd=Ee1jp[_kX&_ZqPWsd"\3s3]h7TjJ2F[/2'YS*M"(J>NETbMLR0#:OT-Js#PN4Na%ZU2/F:Af:
%jQae<-nFj$pB,NJ$@,Lg<Et9S7@rA7L:8AmXo#-_;Y-iIdk=t,]#OR$gecZ9a8;CQ"`gD.ZS3/Z=<q3#cI3[gD^dBpqApj1#h`Kg
%c[<gK7?3M!&.-!?HLPboFN7Iu\ZQ=tC[t<2MD)%90hd2\A%N1=<Flcj!QXb2,=S&0JIDS$l>bjuN;SAsfE`i?2HQgZqRnnq;!T+C
%n5(t4`B4hK4h&095Jb^rb*kF!hd3SK3_S?oBbd]H8<6r1eZ2en2T;!k5pMZm(Km$X/=sg$0:NRu])bq<=,Jj5=Z-/AlUr^k^W4AH
%eS6@D0_.,$kH.8PA<?:VKn6+AE4Rc]FNh;.[Uq;nNQQ7<\84IPQk_^,d4c@eGkf4Pms_WK3Wu*BS&l!]M#nS,XbY.jD,CmT1*uH0
%:!@+GM)IfK%"Ds/FSD(lW'g\qiMLDHQ)#cb)q[^PPcIu:BCcIm<>b#_7^B9kbqCcDS.9Le;@IrB;)EG\!+_p/Ll$E`h[qWO2[_Vr
%<Hd5u1TF#.9jbRaWtB$A=$Bk*^+2up[&?6-VjR#9CBfoBEKlCHhQ[))/@)L2TVsJ6GA7JJVM,@pA7BQ&imaGVhmg57'X4d@qDjfa
%6cBbYD?(d(i*31rL#S(`aZhn]-$(#,,IQ/\=_ObrA[?/J`T07X!'>'^%;f-EPmO!+\?n\Qd^8@4lB0U(j)m:Z$<rPu[M/J/!NbDs
%nZ4,d#d![jE_tFio4&MF6E%CJ%a*?g/i86fa]Km56#U('PdUX*[[IM=[jL_YnCab6mR($jU7h7V`ah['?5Y<dU-iOH-RKAUTtJZs
%a*cQ@7r.Pk<R!$=+XaN[4Od"ndQ@[u4QnUH`,_7Z,Y6IQ!Ek]U(#"tS[?sl_V'JL<1i]][19P)Q=kkb$>])`jQJ1d-GYs;nFo_S"
%><OnA7+<YJ[%'QWH!(_";+)3)MR)U5QpaH3K2#KT;:_>j21:M0hGQqRD^nk)CDgS)]s$t23!T`>.ruc/h6Du4g+6`M5+0F2@cp3?
%r.L?^,!gRSCpB+oOnHicZRNXg"&tM"A)UI@Ah1i3YRt'UUqB5hFc.2_M_uop6qdg,,VrYg">W%a\LUp*T1]I%U5m9Yb9A63?@Z\M
%DW0UU9UE:_:T4-FD2RLgB?@Ca1:0#uNM"c/j!01]/'=c9p*mrCN#%:>e!>ZV2j3*q=JYHG%ic:H:b>gc=IUENM;l33YA+DKgIJO;
%ZNQ+A[oo6f-_,mZrm7WLp)blNjIMl*7Y:&V?=(t@V%cShC!6L%&T3-UA%S'p*Ym.X-'jXO9'D.M7OU_RPTPUeOeafXXZ!d``12s1
%3.OlHNVbPjgdLQ%au'HsQZ>2gnf]47@lSm67gn'.Q>KOd;FpquM8Z:8Y.-;Pn=AP+QJr,Wg,AB9G72<`N[[Kr]rCM6F2p19!juS@
%4^i[q6]nd8/$<KH&ns8?:D#Q>&2C7p<@-%eNoWh>S_'cSO]e"s-&c/r3r/U*1]Vr<M\*.pA]2!h+iNE_VYe@C_)\5T"KPn%6g\-h
%b.;XR[Fl+K@i*O\)[us<V96aGbit%l:kW;t>*9.6V9H,@@aE$0/W_<&](Wr#Q@n]ChZcJ/;Ij0iCU%s3!%>+%Vl65Z8ke(Nc_ZU7
%4_ar3e8MD.$%Y?*?1q+*Y!+@*/;&AAPW7"T3*&gZEU6J@(-2-?:Kf0q0@u97G6N#!1Wc//f=lNQ2K:hh'jJ,\YYXM2kiI6$K2-j*
%J=dr*/hjDj=XpZD7u_LjJT13T0D&D*bK(J'(f<t;`'BVgVB<4W3RX_J$<_AI6;i,hZgHn?TMeuoWeFH<0Hh.#op2s<AX=W7>'2<q
%mP94VfZFQF%+8sFl%n?b<$BK.Ur`-W.0h5jDLD&8"k`k:ZDq$P78dTI4l86a9unC!F:jS+>+/^kY4P*0_OOQEe*mTR&P8\9.;b0-
%##Y%fm7g,9nsG)\i2J#c*LBg@1!AFhWUPAl2he0%h9bL^fPje_G0?RP;GqZuqi4sX)`c>(]mA%ZJpS7p#V)dSDN`:km4fam>0QK:
%[JRM<.Oo`83ZqTKSQmmi6),H$Pu%HX3YE&[8^_\pIpg"HFErTMT>66NCF'isSRj4#%alm0!it=U[t?rnRrDCV\eC,"l;L2-+f-E]
%_sB?)=!(N#`LlYN@,N['W<L#)nCC8^@oLKG?<edJ;b7r[Y,tb8YkT^1"3F#@H9YZ7g'N0Ej"qs>RFS`WD9(JNK=VTjML`lH*h4l&
%k.qb^MTb-^"a4"(^iD:-aa`K-!4HU7l=<4oWQg9U$^4qCq,::%f<K#c33p0-8M9'M;!;DGMn`KkfKm97"gXa%WMf4/!r4Im].KdF
%LDk@1njP..J?tH16/uAueZa%&D(C9!;2/SuA_&7Fs4Fr'q]&ek),%QAGJ!VmfSI_aGO*YimbPnf]$Fj2jC?KRA:p:$X#1pUg:R*+
%`ITJC\VqesQd;*a'?>Z3Nl]pE^^Z;7AB9/rBuoQo\Du5(&o$r?M<WjoXFjK_kOuS0KpDYrHW,'S^fc'O.@ZPN(=p_\P;2Vg]S2F\
%]p,NME5mf<Nsn2P`eRVNf]T^fQeh-rQl;-E0/Xl8bZ]#e=aKp<cM\@k+"(K>L8p%NVBeh!l\$qg9pO$f)/^YP;Y^U)!!pPe\XMH\
%-g!h-knJP,*Mrhe6"9#2S/kWcjr?kj/ACo(.RcP&pa$ni?\Zj7$"a"-2L)8bdrKX,<t;NIb@F7C'"I*ae^>f+KWS\ZI'5!kK&T0Z
%.n#mL@/[b=Wl\-rJm4Hd3TsBnm#RLdF)d=q)HGtZ<uWcCE4mg3nK8D\mIE^d#]lRi;\EQ1VoENHX4L-XCGc"Zd1K<Claa?(]Y0>@
%Qg/CO;0_^qRR2k\FH;I[D7*[T&`F)B9artL6ndj_)`[#M`q_f2ckY'WgWU:R445q*+fXeCn\cDIG$6DoR>c_@BCKcH9?EY6MaGQU
%)lL(g2('#>]tTRn3H/,Td[o`<Xj1a'Wr%*k>5"TN=2pPrc,#$\[Q:Rc<Okd^3m)%:><E$<&%!p,0r_V&5.rO-N2b`saQSkibM&,!
%K7+-^H)5ZA.rPg'b+4//dhEi8DVGH".4=j$RBIo6TZD;+1](H\Z2KQ763M'K7s/pa_Vlg,L6JqrI3YAt8MsUnOPV97Lq9b`.J#M9
%3W417/ur[(d=b(@6"!<GL<=&,oCP&L"\RhKaeW*T+e<sL*n"!]:!oHU;\.'T1`cjQ\_b@hN>IrC&J[6F3+#\Wi#):b^*-rL7:T<>
%48[A;`M,,<T;KiQ;uD^5gmd:_S/?gl=rUR(4$"QN7[D/crAKAMPb'a+>;m_QH1SpWMYfAmd3&dd1CDHaUCcM8_)^23;1K(J.'s[;
%,AVq,\<DFJLI>Fk!Q47*&U<_A(l!'%'O>=/Kk])$aX9Q7rP,t1&'jX,Njtg-Ul?2`E.aUM[@6!/K2KXlJFMqA4DUegKi@uj/tfI=
%CKEE11N-m*RoWKt^#`QpV9C)0c)#:n'N@q`n'VJ:_NBo6VVLAaOi?BpN:KA*m)\/VNA++KIAn&;7shPCI)7imM$*RB7Oa2>TH6%p
%d6*>u6WJ54O3:K@Ageb<D:jlB5H9klZ!)Cp<5EagDdu*uc*b%-$_d*J.RioDIZ:nf<1-)",gE0&9f&*NE%k;\b1tU<EEuc@6aR#f
%]\KKeCd2b7?7gS)(Fgnc16`AVU8Z>fie/7bq<@c!B!'7]olr]b3`Oq`6\!kBL"C`Kc+DV)cZ:^r`g_3j:U`])gNj.E"3QAG@]'ke
%(_UDc9!W6(`s1(*+q_OPoRR%8Q\Qf2ECP&63eN45,C84foM>f7;_1#3X<\HN[\+m_/Y"`tW)0j+FD))$E*FI1T82l\S,$CPR6HRo
%TktZIL2bc;SX7_14*p$.52OB'7Sm$2;2YtkL:/Ql&Z=%!Of)mf^''Bn6.IQIPYhtKO^.C=<H<M0dREdl;5-ljCC3h\g-T.Ve!39m
%K[!11BtPaj@--q>B[u7eih'p*\oZEQTV>fb9*B/qiRlPb))Tg7DMNR;m!Ze7rMBn%q#56OU>>[lhH=Tt\^WXjiG\(c%Rp:tQ:K=\
%B?C`F+L;BFOj#4VKJR\ZY`Y<#MVO[.apH_()IV'Zn.r)UFB^(_A<(_nP9O^Pq0PO9%cLV%b2a6^*-.=q=AI$.Uu>MgNoZ$=m0Qg5
%I,83><Y6ZWXYm-?iG@%Id;"d20:ai<d'.]j]SG5%q?25?"XTotqo4A9o*med-e;mK^`(1BN%)fSb).sao$rbDQc.*C4cTSNVMI_J
%eA*FccA0YbiNm\#Pg*7XVXk]p6/8e6kOh\d+9iqQ:QbVV;'<:i:XNF`F=[e7B7(')cCAL#5hN.TA/A?61:H6HRA*(1ENf048MgJ^
%1Y#r<=Yffe3nba3B;*na8r+uc\err7hh\+KCen91KA[h;\^i"PD6!RRN*)HY\N*5V6MnNpo;a1B4a3'&^0%\\/Nc%n_io@8Pd.[Y
%bDI-J^)>N:?M]I\9&c5-_BTi;9o!-K\.:MjKJaS%Kk),gGHn-M6%thFfu0@C>ijnL<u?4W=0F0qaMQ"4*[IgiK`N<p5B9/0WL>YK
%\[.-I]g@9K%YILW*JdIjM28S].W_Z,?n@VaVBN:/Yd'4&6DI4`E?VA>ngtuq:K)&#=US3*(V3NjX6Rtb5AnS;-+&PYU\l`f/1E]Q
%A`@MQn9CC<D\pafGPME!d#VbXTXL7L-_<Q^q(A5UB25"JI-0"tQZh-'X\ZXFHK5*#rFs<Y!%;'d_?;.nXjo*k,V!h[K*``a#(D:5
%!eNCfdgZtT?SZd7_ZWi,Jp.#V$0'UaWk>#.'q+@IKG#!#-BBZL:]Za#RPd\KT?>ma#plN(^Y3cr$0!8enei`%JB39\'M8qV)Dd,?
%@"Ld/C20[<9[n]qT?adBiY0r8Ce?RaVt4`i+J#G%9^B<U.njnsR>hkRO?G/8H"357iq6Ne*_S:[h!R/<):[,ZS0/E3oRITS4DLI-
%K(G@X2k2#AH&aWq2k2"NZ-hkD-TEu]`X+"P6*lPm`<kN[QeluF"K-FmHGTtP:"-Qj1AcFjfbqaO0D[6laP/iCZVqb5-[f$CT)GD0
%:9h7OP<LK1B05Fc$7;WjeVNFRH.HVJCnu(!B,MF%NG!YTB891URm*lnATaO8=]*XbrMn2$UM/t;I9,,YCYeVcq:K`%lEc?oDW@P=
%C*IQkUsCfKmH6RqZRcZg]n\cZr=sD7Y0`%`1X2se$\lYHQ\Ro>#fOu6;J74k$I/IFd4SF3)CLMFiPqP;PX[1;XYB<a)D/1^<_a"h
%dU^HIL%]3cq"SXn!9%<#9D`"i`EB#km7j@h%F/+O<M29'ZUTlA/[p2WBYUrtF;:F\Bsc)ADsW7Z3^jSLT[?LX5h>V6D2sfLqfH_/
%(G4`0:Dth.$^KqOd8Cf5l=/X.>("Um[37A1r-i^X2-O!Da:B1@>o<)(ctIF<p3P/#+*WX8eS'XngfeBKh>:!ALpnA<S3UoR85u'b
%MAn8ZDHs>6M;mY!5R:#mGBYR6#u*LJ0Te_6gk;NJFp_#4&@`7"=9fU<gk=R](ed)e=SqlY9m)fSTt'p4c/nk&bLc51VGje[<cgZa
%J2N>5^\U%oq',Ng]#7l)4)'C?s!h?]%J99e5C,+je<!GQf(+MC&]k'>TnYaRkt`^Fo>&89't:)q"fch$q/TBgmb?8tEI3#m<H7=S
%lEX9t3[mFu[A;TK^26tsoM3W.diTA29c!F+Z7c87iLl==/t#'"]-&Qq'(R?/p)uJQG*dl;Af9lZ]<$Ms0lCGbEg@um9HqqCI`!44
%<'j06?F(6,a"6BHC"1O/,l-hG^(G?3ER59_Wg[$W_'hYg>d"Q?<uK4ECYNa`V.T9/2TtSpQW4)7/(TP]^I4@E[oXRe+nDOerDs@_
%7B@)u0tg5JWGs?S4hP^0Bcq4`]cF[N;FO:9U0rnmWd\m8!mj]n:QjA,jt,bCfiUB_3eg>B(1g$@J6[l0^A)2lY^!W-2qlTh`?:lm
%>#/WF+/CURN3V/^^N$W1S'.R5<W!>?c&)OmWn@kbiD^<!#X6uT:jBu>]L#!`q4-(4o@\!O]=41Q+h=C9djqhn)o!&kMG>U+h8^'J
%4a!E4k_5;b+hU#1;^!Q=#uX)Y.>/!Rns"2[O<,^Jh:9Dm)aTTti`9<s>GsMk7;td8.FSd^P,B>1>H,oqRS>N'jb*f.TkbT;N2QC7
%)]LV48dp=JdmdM">i=>_NsJ<R,G\Q8hB;jsHA&8D31Oc,I&k0I*p03W>>%7R,V'F;`9.l96.K%Y"eC&LT;=#M1HBNdTR66dWK>0Z
%Ed$`-e<?gn=G7&m7C\L._\M*70o>PD:_TXjNGV[&k!".g`$87[e"pr(lEsR@"@\8QYBT4#f>%.],9C!srC=t3p`[u?q'rp'oV><0
%MCJorANGKWYP'"rWktO$QeT)t-*LWNh$=]?JBKQRJ-32In`tlF';s[=ih2*=dY:CCkVSEGV2_6Z`*b7%hh$*2*'[1Y>S\$<Bn9%7
%A?`^?EnT(>lm7=pmO>]'?7*c&Lpnjc,"]^qhgAoI.U(Op%YrtEOX?re&-^:tEiQom4/F1cP(lNnn1q=M.L`WeYsqV$V%CT+$E1>b
%/LtsB$5fDhdt&K3?=;H5TI^IXPLbjB$=s\&/E(^;_F<2+m8:7tQ&*Am%C=F%I?Q:#JN?XRT`E/Me07i*DKS*:-'sYpkFiTMiX5./
%OJ="rfJA&#4RXKNZ(BDE^]*7b"8kqWVhC)*B^]LCB7jr':_/fQ'ZOCi,u('b\Iu1o/%0CZ*$PHYSe5XWGuT/+NK9UOXIMY<Kmc`Z
%OOm'coY0-#lOdUJ.7/_VPu;pNKtn4g:'\2J'LiQuNM:+W:bH>&qXj#Bl@er[=gd<BX448p\jW*g/<?QF;6F9V="HiRGXq"t9n4-F
%l8ZsdWVL[;-n!)J^>5W;)CklSlm5[2L=b'ungTKrY7%/_9]r4?@04mFk7n3pr]/Oj>9..S_t#F)ibj1'I6k(kQ4qnim-_d_1B7'l
%(B(`,U'.PG?:1Zmc1$<Ooq[!?Y@8#!o$'3V/'QntU77!]fc*Os81%PM8?,CBl['.2k9mCiCLno>G!s%#W+BVI$/(*(eU3r\.\G\E
%KOOEenE(X:qujZ:?l=(WO<%tilD#Bhp<?nE^D3iG@bh[h7UTM:Tr);jmFp?j=1/R"j!Huui=AnSFRsDm/r[4jK'/.VOd?d*7VRbm
%H.ojOgG\5#PotV+(SRN7.?'-pI0G:ZR%J-UM+AODF&fTlgdG1Mn1ob4_'--Yh6N3FND7C\4!C:g^n-De6J+DP8P+cJDf5DN%5'83
%$#ea[]mAWaQ2Z4.]XQds">M>un9YVKX9)"`O4r8W,U6d<McMm.Q(1jS7EY-1`)P#BD&jh'Wlq<,Gf3W:,3"JY&T44+!urN1XK%/O
%LEoWuS>WouRKs*sk$bV>b?Qr/Wf2;5coDRq;N_)KoiX:?`;GB'8(q2)m*<=oi7lN0iR4PjAnNAE0K:8.D`*,fWY7#!'+,1#kM7F6
%(.6<ogG&ktlT6BS)<38"YY4cmXJZcHCA5'f`b)/1PQ@:dF5-H,HpII#\24phAB@HQ=/FWg^l2bqVirf>8fOhnc'c^0Gl#Fh=7o!(
%8[rgZhN;Qq,eh7O_r8sQO"&-qhej17EaR1IM.\_S#mH;T=C"8!5QZS@/dg%*j\Vu0b0@u/h%*'mL+ZQHD%JN)DIC&XNnu"N!f,t(
%W6Du!@,-L$Zad4RP)A.$2f;Z[&@StAnL;"06,<]PE=49V"r<AnU0SWU%nR*,<*"<-X,B;%;[QM@WM2C8TU^&YT/5ECff*eJqW]#f
%),*bXjF'TDRam"N@.,(,-o<JH[EB/UQ)IuuWs)a_"-5@)Ums1C=ja)Jd'1MkGCP="`H>i2V$9C/U$BE<aUgHfDUZj[*8Y&YHi>I6
%T/Pj#pAXPI$]`KFdrnI7P@m9c#uPnD(YZ-daDU=XYLM;3#_ZF_kK`>S6@hXJV'7&7]"^e@r=@de<d\LF(X\F3[kM]X'ri(-Y$2Vq
%m?b$!)pK.aqm>2h3X[_i3Ao3\o-%O@e$+tYMaYNQh`U/7p,.&D5%^OTSqNoY8><YOA9]:.AH=Ok2AbO+E'odZ[]=?sFnA*870@bU
%kk_(i?7.cLAG=jK_N5KKgd(#8Zp;/\qluBk,qqAB%c"6`$iEf!KYN"?LjqY'q3VsLn8WPE^TH9;G>cGW>NAN1Vi.K!UO)=@M52Wj
%_N5>@75ACC8eRgDQik;dJe1H`&tR0-#uia5Au8oBZ^^2\6G^FC[LG0IW%ZIHRhZK+[TH0)[7L%K$%WDQXat`47uU?<pLu?kR*\nl
%H`44q$1F0J:<3KG_I7-fV-K%W34>dqY^1HbX9jV1'N6-VIdCl"a3t\cU"HEXgka0&#W/qZ_.0HIQ]a;CbJ=)Q]Kc^VWr2`dAaVW:
%RH])$M)0F'HJij?P-qI+J9-Z*Y`LilRj<"V+iuV8!d"_Q,nhWi.fP4Mi:G`#5F]*66L>sB]5lsA@M*,"2*Kc=QF1gZTsSXZ:[9WH
%NH!l:eu$-&184(DmhoC7g%)A^7Sh2Y[]+2f*"'G_-jiOoI+H)3WX8!r$qKF/6%YnQ:!I\A4SIKIq!fj\+7el-Z:3[bSWKC:j(ep9
%o9kXW(nFkM0Q/Em5W4X5T\%UX?!8K)a9%,m],@*Sn9(SWQ>2GN?S!bFKboGN^[/NN)&6G0S5:Jm)!Oksi!DNH9Y3G5UWC_6((-@.
%KY,mWWQ5J/V(nYj5U+E&X)=_R$r]W<dG/,\+2bHPC['b^k_gu6]p+Jg^-$Vma)=@H`jTgV^OJWO>SJVTA(;EX?.MGVNd]>nD(XTb
%;3V?cmug_<eXt7><qP]05&u;lVOl=8ZoJLAH>t?j;K*q"mRAA0ZuIn[L")h3qd-[_=[MnkI%&[OLNT\Y('cl/80t3cON;jjNCb!G
%H+A6C9U5a3;W!/i&<irKOWY<i-*gh`l=e"c'u<"Xm'Y^fPMH;nc%,7W\DHdm12`#U@lC<I62mkK4Z<?E"ERNi`8hZ!d98J((LeaA
%HQO3"MSL/!Z0_M>.9ES?.rq1&a1J@P-=p35cHNQs"(-QD]mU&89KQQZeNUG9I6&XW9*uFM)8f?qJi$e(!3WUYG44M*LU8u!7[Ze^
%FL,^ZntZG[Xqn/u[`i&^@aj%9*g#@5!1eA,f1r:JlLO%$GZknllX=Y]%LBXqF3TY9&bMtRq^j%=f-XDkXocDRhe6c)F6b9Fm&uLE
%0FA2WoS%]-VBn6O1OJfL-n/,O?:)KQk^,k+R'*_MJ>sloL9@jO7:bXDb-oE^p%3(T>dg,qgo-;WM*dddFC;/I_24Sn2fE+^oN#g,
%W@.q5WI6@d)DdCC5XHXLC0[V0-#C(Y1(QqtLU#ot5%)$TQ!(4REWK>rj/++_L^?CdQ=FAWiRO>8J@N-kgG!siSrLEjX)bS7;)p<i
%%5ou@!+>I8QbfdZO0&I`$Ak$DN6p/2YJhV0qJ68\/4g-_UZbrsYU*i3k9.]mgc0["T[S)AkR]uc(:9uro,F1JpJ'WPVnd`]]4UWe
%[$OT7@jfa>Af*V(Gg^$S,93oqh+W/@9o-kEm1JEhiiqe84tK?hW5Go2dZlk;=S>:C;P?mP]nEA\Me-7Z$D*e>HR*lpQc^XEU/]gP
%D9p\tI627l,Z?Vn@GB9/9rI'o[[44bI^e\jO^I:Um?'@Uraab./AcBJ[XHErDi]Mbe"5IQqWltEQV];iPA/>kmCW>=Zq&Q/aF'BK
%cboXjVS2gV+,8#1jC-0\Hnk#&a&][MBs/&7@I2+C7q0DKR._;KC2fR6''As_RJ-JN!I54)?8%gY?>Orpjeb2op?LD^qVAU39NPZf
%_m]<DD<#*[1Sp6YZR=L6_NYNnB`A1VVV)iq]`]_fBA:.@9XB9jVS*+<<`YU]\khCs-e$r@P<sE$m1D6k$JoUr=A7amgHU_RkM#W5
%c6S+8NI.l!Ie6?q`='bek)45_O"]g0g`n7/g(33baX1NeADHWp`N&:L\49HUppsW&8913e@bj[*@^E[h^],QgGI$W_8[4drh<R6.
%fhU,37S<IOPBj?oZ=b<(HV'HmGaS5g8>/27pY+J[[+rlP3\jXpoOd!]CM.Ntqd)%?,+n4Km7O+H3:(u`P_X51pWnKdQS@oE`mZ&S
%e(qgC.WC[9h82\1k1RW'20OH*/H"?%V64LB=SN/c&Di1rYFS%^_M<hPFn59UZ1'&==RTeZ,L"<E4tM)-DCJBMYjf1M#onH#n1,uQ
%[]mApO/s`ek:lDiN_R0QLOlW=l<:N<"95p`51RHPkVG!f:'No\W$(NM^dkj-GInghl><A6*!X+]`=KR"pf1nN<kfLH#^=0;h[KG*
%nl6aN@GiAuq.eh\-3r,X^97]RiEUR/+,TSf%g-1j#hsd5n/7CL3dS7(2,8GP%=C48Ddc,Y^jkdX:GqWU_4',k=SNO&Hnk,QeJbRq
%)>Hb.$T<`jO$mPic3D"0[Tj8h\gZZFmKUD:EJE^1$bs"/$1E)Dn.Ct.\Ee"i,F^^[(E*"UW%`2))u*Yo6pu5Sn22l[mQ;B^#ZJqF
%DW%iL$p6W\r9%D`a(XEfF\3P;@cF^ac.2^E`7J.iGhL3Wf.$/N_RkZNQ'E95LP`2ZAX87.cN_.@#NW,YOjp\Vh87be@'B@]`+MMW
%@fAA]Hu3*\CuR7AP.%f_M6C2i(<'_ACEJ)mmVLlu+H$l>_oC:J<_^KL`ddE`s+j-.$:/NW?*&D[Hg%B5ng,1H0_4m81n#d:+&*s(
%:j$@1,8"hlYji=lVgQ).p^"dR(cFR@'bs#Gip.5Rj./kk>uf>/`+S)+*r\Emp`*p^*i=89p`]!J)rHg-2t8J5(COT9U@d-&KeISN
%7I&oAiJ4"o/f)/b_6aDTiR<X\j>q+),c.D^Z17Qk$CL'gj!,GY[N7=jP&;<4DW;sXZKMc;hi^ekAE+nS])0Uh8!nZHKT3/oqJ6Z]
%s*<K!`Jj^::[+kuoE!6=dCeVNF'A:DQ=!j,5@jddOW^?Hhg?dr"YJ$jYO5cXpn]KbMdOQGrSMS8HnfEKIi0J@n/d0-bQj"K*)-G8
%?+RJT16P;g(956S6\(5REfN`4%3k6pQ5RK7?];)VGP8O4jPbE<Kms;mW"p/`r8)`+qB=4hG'pfKPuFRp+_lYP=oUV,d@^@%1O<9W
%&mI1Q.?@A"`:rV*7a2g^Vr(2M]]]0qW?49Ppn&a6\:710pG)FL&O6^I4oW4icF)90j#GBB%Hp$H0*Vh4U0$6a@H9d<Z2k1XYi/6J
%+:&$\1f>$,."S1'ptr!A\#S%kmka#JB.G7eOT9)rS[Eh;XfAGfnlF2?#W<8k"mZ<UU4VXIPt=l,_'NQ,,ucAXahW*6_.31$]1=so
%R:Th+Esa5pq^$<V.E0@6=auEcb/c+FCDQ<Z4Jg2>1r@V3Zi)mg_qG%OAkNbZU:PkhNE@Cj+A5'/\,FRgO-=U<O$EC1:C#Q#kEZ@P
%!dckn!Uj":;r,LS0A!oKO9rH[pgbXs2i;UB-cLZ)'*pq+9t`Oo.10X]R0"i=83#2;A25%WC#*0P(=oe..]KQscW`PL#M:ak,cc/g
%eM9!ESp[_G+IcKb#Y7ZlhO`*XcGIFnj?NZs=7H)(&-pe=M^U&u9@$%g.*:6d&?JR4n##d@/8p8`]ehUOmdE5GDd_IorZ!KkeO*0S
%i,ti:H\9fKHc%(u+J]s.+duWK<p_aHh=QL9QI2s'a!)KB@hC7feuEbJ@$MM/9\>c;s$R$QM<s*>\gHlkY<mIJ0`=0@"#`\]7<e0p
%QJnlhlKgni=R=dWH/>@Pf-X*8GW[HefAgpAFp&#$#J&2IfnRC'2)7."L`rm?;d@(o,_D0g;5G2$.\)W3gYIbG-RXTs/*Suq:sN;B
%@8Zi;EqP3-fT<@HgFPoiS]]Iq@L"2ToK-4,ZA=bGEHlZ,*lWSaT2HB6LS<c?(2K8=>)%'6Oq`.bU)!&H6m=#,p[S!^B\D?W[#Vu'
%Tgo)<TEM*R!-=#PHtq;9'<OGgoje_h=B+k8#R3e\KZolY;H/gNZo)>J8YZ&DDgfC?m6hX7P^#hu;YIO8p(:.J<K.j_23h*);t;>Z
%;/A*Tq$truO:[>1n8?-n36:DZ#a6r9Ya+QtG(a7sNlgDBk=\NM3dg2p*)o>7H?n]'%Fp%DWGZ7k;U66("-ae<ic2bHbRlbEp'ALV
%5":>4b"=9i$$r_RQLW<BD!3QhV&6%U3`T'\dF,]ciWE.\[P^R:+I%ppHPo^P+:fM1hkJ^Y,>j-2O\)7uaY3o,l%"0/J@L,d%#/l&
%DTLQ6F)3mbYt>kO@3TqI.@msdO@CW^Vni+@"$@D#">ZmOqrP,CfUhNas1>@a)_R:TLF@Y"7VED^#Z(r>ZYhBsMDn[D[-U(AaFVUP
%.WWsGMQ"i/"g@^;S9,MaHtSRlioZD`U2,A5IUn'?8A1;-p'DDHYQX$Vj]pB%*`si-*asDtU@plW3ej<s,rc.V.cU!NCd?cgP+XL>
%)djJL?I2cT`2$NQ#FOeBP_pS`6QX.HC21IAM/Ti"JH9232+<<)fial&b3&K;h%KZoRAKsIKIDOETp2Z)a1PlQ^eAQ.gt4_9QeHC%
%)1pb1]#I-B*ff2<<>]RIALRst+SbDgg&"pS30J.:+RE_P4E,m"bD;(s'Y'[[j]OS\7<<*!#pV($B[Z[e?bZ1Gp:YZ,ZT^3%E(ht@
%>DObU,$HZD=3P-+NMIH\3SGr[(3L_EVHYQpAg(B/GaD?KUJT7)LT!<u!)H4g]=)SG.13(/5u-!a;PJ/blI\oq5,H>P'h[WLB\f>?
%4.).H1uUHqTr&J(_fW3NkEnD?RS"J+IS-4O_)`!5",aukqVYJg`PW;H0%F7$SD[FbI7e[^e2cGI#"MO220N+e/]iTBTJcG+,[J-H
%@:d;+iZ4elE=4tNlbjHISV].?2c_BJ9MI!!E5-pah&tlrqLSs>gUKlI6=Z0f$oG6g1$8[NBTinQE<45[^U\tk56L=2><RmD4@PBA
%0q52l3,pCS/\8gQXS@?Ge.u:8h+?36^X_$,F.%(7<aRrf5M-ubcV!]M_@J8fbW_>."Irj=4_C*R!9q:pB@RZX2IOB\Hh&2Nqhu1*
%HaQ'C4X=suliWnX=YM0m0o0^7:YL6rUta?;HeI5`lZReAaIIWFmgjK+;h1%%C<j?'`-X@c*HuDtR.Oo"-2<+,IsOXDeEjq*rb`c&
%hA49;M\k7:R#sIi,512tQ52h8G<#DHBWTn64E?P9<90tC'"i?PQs\KDKY/YjrIn(MMsfRU`kODr*p<j_P>)W\Jh$TTnHF6]_d,8q
%E-X.Ee<X_&j6Stl:G'0j^]WAMX`Lr^f5uIVD8#:u\pe?tKP'gXXkTWtgS\kGG\eu=Wd9upjD_N)DC_.+dh9CW$VWI5?I(hV^>"$d
%qIdukQo(#C^<;YMT'Bt%m4[qon9gQN`;T10jBL9Ff/n;L\V%"K8Z7s!DkW+q(N9X^i4;TnJf?BQ-5gX!heP-PKUuc9Ys2\El'C<[
%0[llN2#B(185<70!p![44;HI#L.seX6$?c#1_sN+ZWTcOrg=6]R>uO7D07A>`6_jseC\a"roD\%B&\IT0=*&t\9'kKDqDkLW;5AD
%AI4Q;Ug]a/J+?l&"h]i9ATlL6aO)=i@LCImKW",S]K%c\0J:^/]Y>#D6CIMb*JU9_'_O>l@boT512(rXau0iS4o*8RAVX!ZZ=@Fi
%>#U7UJ'Dmh6El`Xp>'h>aEa3Q#d.PZ>fc=9^KVUmC_-4[K8fKM<OtI3BMsU+^K(_"2r]/QhWK@eCJF]PRdW%J;0HDs:k'JY]m=tp
%9X2e-s)D1>dSf%YE*>5#d\I/FBMf)^eu@0tGY-:=EOt0bM>=)<nGGV:hk_TG^E,VZQZ9EL1[(k1>t'4;)uqb&cUFtq'q*D((P#l:
%N9g3#@!*56nQWtlL8qP\p=0j(bfD'2\coKhXR?/E@/DXeL-k,8Wsr,E7,#o$>PC,+ie?[acX%:26Xb`bWUafT&BZ3\aXZ`oJ(^ji
%Ps#nn=>?mp3EOV.@*rW8-hB)co5^/T[%ai5)NRpuL\$YhZ='!PYjrj[L8-jhZ3OpT.J@X7@-h9KR&d%@L-`p:qs7eVM'`FKkrm<p
%69iOMTNn/JJ>i0PY_[.toY53;b-9;)/LoG5YQQF;#4N[^?ObeqN#P+>UR3Wf\W0*,p;.0pf7F8bfE.(7adP5sP'-DtZ@pK;BoAWN
%-Z&sp1nY\:.Q#@oC"$&CWDQY5gT4G90%PANc`bU,?e/b4i(lp[Y'>hPc(i.(dV5-bK=S/e0&Y=4!\#Pm[![b/9P\bcJX4p1.lKAZ
%p'$+If="Q#mOF3uk_=-3E!d78U`]_!0aCgk9=]ha>UDOrA3A7?Adc(=0Q13_.kPgD2(@GqAjFh6s(sZQl--e[>Inm(r6bG<F\)sm
%HSCVP[&E[D8>4uYPi^K4d5(`*N8oP5[sV6*8\j;8[A'O=UP?LYiX9Y#@_TEi4m_a<g@!,#Q9K0"*9=p-]ue_oCYpo?US#!&SE=8I
%HCjt8*2+4m[M["O(VJnRMKoO(i&J^ERX(j],?"BV`Fm%/MO_?36<Jo2%QV>r0Y#WkD4Z"6q$5r#.UamO(ocR]e%Wn6m43D$O5?Vp
%iU##i4Co4rltG5dc]#PQo!,ZI$\8]YdUcoN2kI*7gVS4JT@IRKgu^%ZX3^NW5.8e,K;\qOf-[*I`+6[@Rod,L;6`,:D[X^`bogg@
%dWc'jOt6<0/7t`5<*/'PBjSHP!HM_mloDQp/:%Y_C:&L%T'Dn%;\TR,N(>%^T5R_i'Wb67%ok%7YXRjSWFd9'QlD.dCkaOq%gB[e
%5K</t?[^h&!*!7hQT8#UBMQS^MKP?i+DV=X-uA]AL#P[(.9f`LE.%n2Y:6giV,T*HBKu+qdhJh\jHHSm<$/1me1l[BWN$Q3.Fd32
%Mka),r=C&4L#5g4i0qr7$k5SBQ0io;IZ..L9HG9AP&uu%D5*h4bR)q&<T0*,\[ccU8>PZ-DH=--&GBoV\4q*'A.T,!O<U*>]3?kL
%gQ$\`:i_u5MH<;(.@akJQViB*]EKg%3STFs.1>?k;4!+(6i]XbiAt_!e[,/'Z$.fj3e1D(HQAljlt9$i!+Z;!QNqrfYD3VaUWfC7
%2[#<RM!)-%!uH(FA5Z9D?mP&Uo%O5\k/GRI-iWo'i<-2omSj`$d1,3`<o=8/$QDCE3!E);TaI<I(/1+l])/0,FbKrJ"'n!\o%DPL
%7lJ[Y`'\'4m](\L.6a[a14Wb49r8AuJm5Roqc"OU!gL+ZdGnqFi?o(nq!Mi!*`-n3ale?rN4rDW)_bJQ*tl/`@VmL9iPA+nMoLr/
%\CVu[O_2PdT7:in?MMm^rtll\+?Fd=T&7A6H80_q`-Z[TNRrc9P"P`;^**TsI7.Fd1IKPsLB[2[p3(@raKFl>Iq,'D.,dOoZJ,1E
%i/Q!l",uj'jq)s0CdiCWE*thj)4ftaP`%#0#rl4Z_P%f55p;]E<<c[$hc9:72IU;Ki*\7GWP>kVL4RI>kb^YAK0Zl>fh5l$A,Sbu
%nI2dhnVI$EUo,[Eq^LBclg*ZXpAUt0BD\IB[LP<^:4+iKU,$r))HmhcdH)I\i,b@\0;[[t@<UZ]L,l,T"]["Hm9:5Ri3lS346b)5
%OS".=U9US,3Y@+G@3Z!\-jia'M&/W[Q^[WQ-H<4YponI*DZpO1]3]+,/Epo&@:>");bK&(MJm>T4bD)4I+[kRZ/E8ZhRnN(VEepY
%_it:#"OGr5d1uC?eK>LNECD;<"AOLJE:Qs/`SVmu#,9kN&ZjV>b7>F>Beqia+\/l!KpQHj4<oHF<!@?^r8ICQ1cJ>3+GhT$P6CH$
%ci$3Vjik[k5^fE\VQaj"LBSf.o;hCEBb4N1eOb9lM5\06W=sj=6:,>,<%I0%_]_%,";0e:jNFp"C&:YpEnsoGIJs^*g<%]#[uF!`
%Rmm%E<=JAME;U)j&j7e0-36n"d"Y\6qV8(Lc+8T[X[3#m;-im,\>LUFC_6s&!NPGu:I9AS,#G6iOFqmXZl0DSl:-j&'^:>b:gZl)
%XErVh*<>^UPg8t'dSSjfGiIX%V@[$)[`CGOVAqi`=0m(U?N^,0#d2`C8@k4l?,&B77eltMTS)Tn1Ag+rAV+ITEZTDPo0G\Gq.B<W
%h,@'5o*S`EVVl*[>V=0qHF"IG\j?/=\XA*Nl.p=0>,2h@NO42bIs4[KrTjd+V']WUKI7`t`?UFk*Z""ZWPK/Orr!3=7!CSGSOM7s
%%Z70pS\B7DD7_M9X\"N-;ifM2T6bUo1u(4Q4<n4+*'N"Ieg'OtgZ_qOhnJdi,C-\S3:$0oo^^R8?[IW_!]8Nee0e!lQ=Y2R[=.rJ
%D`94TWLO%`op98tK[\l1C7b_)'"dqu^-k!d\!)2YCCdMTDa49S_4=A=U&bQ*Q3qLVW1>3DLFJ#`2R^.>Ff"&e)<;_2j6R]"rC"(S
%79]]Tp\V:HJmU&Ai@[jrTGCLOD9CB$NV,D`Z?icHHS<'hgO["C1@iccM_K*E(a0.qY&8,],V81l?mT3)$ATEGJ?/r:",>>IJ:r(J
%>SP;tgeK;O!?O#)%95LZXE^BhVimef6Y(S+2EYQ^b/iMNRJI.$&l[.25>Mm8FkK@4-^##!Mu-@7mthC1*&q4jPGMo,+.js]UK"I<
%:<gEtjk6[;lb%I^Ze3J\V))qfPb=QlbqX$rf$,#1"T\f<+nY)gT7H/iQ*:-$@X4`V0O(8`"TE%^`3<O)coem^A#f=C+b/%eWQh',
%RjJ""'Q+BB38[;\#Bblj9'rIP["%u>4<RaYif2<iC=>r"1ceCMHZOi;4uRo!l,[C6S6kHo9%88<are*Hp*ur.ib[AECW:2pk[c3`
%ZOc-ah6JUCaY3;ZP'qfmjnesEiY"/FF80@;RkjT&#g?8E/d(t.V@>FM'.U;B5Xp>tENhP.e\b>bD"C'BN7/`2kkVmmVCe+W2h7Vt
%rTFIMA>:3Z>gGSFs+s:jW%m1d<(RGR>@l$"h=_@X<i)s"XD\1/Bhteq!4DHD%*kJ^3]-d-`gWIK^m`'f2ggKa0@gK3?67E2aP6T7
%]<\EqLbPBY/$C!.j&P1N*5"m'mL?A*O3bJ=&n`RuD2.Luk#Lj4B3qFQj,$i;.cSUO'Z`9*C,)g8SQCm8`N+o;imgJ$]LnqH?KJLP
%]Lp5i]LjloR9/"m:;"a=cb-8Sm=SI@H8W^tH'KgBn`j;/`N/>#`2hL$47arPKl2-XOVSb?cZH?q9L@\#%Blf,fSNZa-(R$#=d>sB
%Y7aBQGpB+@Y;0rR]Lj%(R9-FhT\=b'Skm#181._,8B(h6e\rj#_^@WOI9Wf8?!j,3#']',+9(ebc-F^e:#P+PRc:(Y[K<Lra7ITW
%2s^/=Y@:D*oZt@S-]3-`P9d(ecDrg+jk^ZSasKr.<oq1gg=kORapaD+F^in4ffn5!+o,nh40MO9#[F2^YEFdpo"h@/]D9:Cqr?[8
%-_)%(.>puWe^/>#<Jdq6c?uWuc'_ga=uWK;YaBAOfYOI(HU#2qGr+!A;45+8-e)U)c#644;>9=!7bs[I7_Ms2';JG1+eIB:$,6@L
%!7(n:@T$P<\8r5GkG6`^-E@V+\!W73"2Aqe;p9pLop#tKQG!V#`PU^e_J7.^8+>lt>$+;Ho>.=dl/:#(8K=tDl5[*Zpu%jZDpDsA
%hjk5Ni>mlgcbT(.c-Xj+>C,N''q=C:&R0t>c1SHroX\cj0e$PcTq.VDTGWl%rRo'5Ue5JD(FGtFC8qN*.f!Ib^k2)0??e:G>0-\8
%[KNFt8$aA0STpCb%R/L`UD++]K6&d3l.NUhV]9NaPFPFNdBW;BQVTg:.Ih+n&p?I8kGRom+5D]KM]#^m="61"n_d><_^oN[I**.Y
%Z1I3`J]4PQq8B2_ANTK4a`Y:&3-C?!$W&4n`.G6bYt@,k/lL';E?J_^#Ang#6t-%I$a5kAa55hO'buMZRpbMN^O.?Vqf$X&;_;Dt
%*F6u=?<s??Y9"s!K%9-qOnIZH(TkD'7U(:JN4=Udimfmga"'&87h[e;Q`o%(YE#],=<0PrGCI5.]b`XD7p*9?m"lpHV0#p)34:!B
%XrQ2HGW9]EMWZ#H#X6fK`t$"&h-Zl4m[7QVID"N@pA^Ojacnl.m.%_JG#;!S]1@iie`aiSS^R.3NpTkhIHT6k&a)5;Y/)+uX3mP!
%QJ&5bNb&:XQ")\j#KQ6_i#K?n*uoX6CaY7><"nIb-]["Sc3R.$NX*T_jc3\-(-c.gF"FJq1WKPfHGd#?Mp<<#DtM8Y9\g/u%Vgci
%30o5W1WQZ]'?;`RM.7'Z0u@[J1!9@^M3h9#(;$]_06UU<4)sVU!@R7jjA#!)G^O(pBCEpU%c5U^oA\EWeU*-_M.tf:R:?bbEGPY/
%U?rqY"=rTNYok%)FDu&f'Aa8EQaZ/+M.[\bhQd"o(%iS/cSgrMmJe!K''UOVN:Ul'FdqF:Z_qI!fq!0QlqVSm<MQBCT%.ID3:e[a
%$Sh!1X.Hf\9"GQ$`3TT%Q[HH/Xm#&qZe8`PcTE`-XKqHa>(af#lhSK*f7c<XXC*j4KkD39nLR8m-6eC]#rHT=Z$81#7Fn$gfN,eT
%/;@]i27lp@SsAcVp[]nl]"P!g@WRaLnWcqqC1&&*"M'blU[.a6fq!6Sm"o8SYZb>6Z9EZqVU`/pE3&Gc+kQ2nT&"&;Gf=9.26eLu
%oT_;[X!;C#<_&56SS)kAmj4PG.R.l]fpuLj9<R']1MWhf53\JFqe'(+p;O:IlF#YOAK0c2/f`V"!M>aJd$e,JN`B)kE8fH\9.]+*
%!hSC23;.T'*4mUHNa8I"Yr$28/<1J?CqFX;Fpr9=Mdu!s%0ntt_4<QOB[@F1p>&,Q%*K'>G[X_:fHc.felQ8LX$<3.os/1BDC'P(
%N!m*IdUE8D)jZ+JE,]_s4p(B'O3;?P?DA"gcAE'Uf6lOX$E[T@8`9E9RYWmH!Ap?r3p?\4c/ImLH9O(L,+Y+o+;k]k<YphlG>DJN
%HF=Z-omALR)Vg0NfD(D.CjoCuCC3jE=gPd;YuY<+o6B,;ok*S$?@;k0JAil.*F2u/S;2f47>`N6V!!B[bTZ_.r9g.sqUtdg:Yo44
%R'SWHln:Eaq*\u;Qd;QO^-F`.a;4oj/*g4?As4kR<k%Fkk7`\Go;mb*rJ*%fNZ\7(S2-aH$M8iMC(A\I,!DPh!8Le4fDUIXOP15$
%C`q/a0K[g6cN=$u8VP$)KBW_nBbAiC#Olc:qQnq(LgaX9I&4cZXsWjTs,&mK71p5jbX?1I(bCokh7`+"I)S1Q^Too3R^a6YmU"^u
%E;[g]@g.c$_oQXnfGRIjogIWb)N!QQ#,RY+J/.65dSXC'/==pXn8:=a%1J#0Dk48I]!gusbiJ"?i\fn23k%PX&n)NQ04OUi"+G@X
%VXN-MI2W]3qQZsI:B_h=cHVP/LJ.El$%1nq6V^qC)a=PVK_9_<#s>cLc:r<Pi2\ngOO]c"Fm@INc_"PbkBr7U.O1)L!:5T++u\Dk
%-:&E%SlE9]/bG=g+2g>Z$Orjb1>#8'2lA"i7)?&,N@ij#PGStRj.I!t)*%o`:9G;#4:&jcnQUJ(Zp<&D0f8]Y#dCXselLg0Dg/"_
%eV0Rbp=.]b88I&A_iEVtH03k\rLL7*6#2CgqYS7"[Ka-ChhQVA?Z04:Gr"1d9_dJb954$1eHMUWU)b!Y66*m:#[9B^"8G7k<*c;J
%T[-\CZ5UI60GIhSB%mW1cBIWP>*;cO`p3CD+ifS`fY-Z.-1#J/EV8u"9O"8pNUObj4]m@r0?hmCbWPFT->ee$hgjOq$EQj4dm4)'
%,^LJXr+H4m(F$:<#UR%J"?p&ki@)`>cUO*rEr;"kS3<L5?3L;B>.UCjT4t=>@Pt<jl!^F-Npf%q/ZjI_mFc/2R/MeU\9l[`F7SII
%H$[1bDI.Me;^jd=U9uqFP;-c<eTlbeM1*[EXRV/`^dW*0!i^_B*$O3NX/RZfbs6$FP/_,2M0ak!6lg[7@oC3!8Hr(=f7L#%+JHkT
%Y1,7]!pR[R\.`Etaf5nIbS(#M""a'@!PS"?a,`[h,8m0V!k5&brL'N:I4N7189jLsGJqcH&MfB[g1l6re,X_XW<3KF-Ca!W=nme_
%gZR'Ql!#L)rL!>KY.`MRYTK=b7$B'_,Hrnrfu+j,+]rjV]V)j;.R[^sA&:Y[`.nbK!co6SL/6qjR0Ojp?=o$)]QrJ2.mEV2VlJ/(
%8BG%/I10=;0W@VifX.W+K4jemJ?Pq7TElrSj#KXIYGN($MZY6L<9En@E7`DN=cLYIBi,i#^\$Zb52GN;-6?0N]duOp.(0CHn!1E3
%Skh1>?b6?mn%X:-G5CU09e*$O4;$m8h;m>P1JT1#1tuSXs6WIdgWuN1LN3+uGEj4%YO46/[?=hWpYW\Q]D2j>8GCs\TBW42?U!L,
%n6lpac_o[77(`DV0%KdgR3qFYbH!^a@/Xurkkf:*U0U"TnHk'masj)'+^6[iX/FUci&!3V2iH?7=bsX'qhmXa'r-8@\@0(aUnRJO
%,456eg]#uHs$L/m?3ntO;(aD"fjtqc$/bk-EPl!A@s9GC$IR7CfW^'-D9\6RU.$!=B^gGocI>mQ;J97=Ue'TK;(iYMQ`;gR(:Ner
%Q:Y[=$S6O$C9QmT&.sQA.!G39/]uXeFqoThL=2F.7WoMUEt$6hS)8*1K81UL.Qn>29>Q[+h$."^U0@i0/G+pI'f)[d8<,<OSufEY
%(-tZo8]LSk&mW4qP;YQghgp7);@Go:L1W<HaG6A!cobUaPJD*`I2SGB$QN:"j]lKSI]'tm1/o:Mi9,sGa.=il,`GXm!i_E$^Zf\d
%,j#dZ]AX-eaDDum:SZiTl08d:3X#3&3XCXYXtKN@ahSC;MJ:l(JE.nNR>-GOIgPn1_lF<031tj)_*FtQoCL>^-g*-\hTj7[$J_t(
%_PXbg:9#X2luLeGEf"BRePN?Caoq<bX:Qpi5\QVgLF/3q0;?f-=VUF5@ppD[&7Y6F->^:D%'#A)BK6M(#n\p,N7OHlW*f39b?Epd
%QVtB7V?B"m+Z6Uh_\jT6Rb)^tBQcVYjbF^[.@;Zu1(!,E!tGhak$Zb'=Uf,Q9N]\71E*7&49I(MZdS^oFR1#-/Bm1nk6H_;.!\XS
%LBtb>&g9ak"&EKg0RU-.>_>Z8$717@L3hCi13e+JMFL3c<>fT<+&E(WGR+f#%`f+oFELs/h,:q3k[++7&t%)IgX*qNPQlGPZqc!"
%1o_7H5;HgsZ*eK:0C[/=Vr!lH#WO)#FQqJTS;MiTnI,(j8X,<qdfh/8r_r)W+oAJ0HP/.MBJ#]%!\kVs%ru#E2Yd$*kRhX\YW<&Q
%(TK-!>oKLp"Bh7XgI_Yb"u/qD-K^.d$M!`?-,O857[GQM.-lM^SWTR.=uFIs:'8!0>,f499E>n]-CXm*^F=o5_m*=a"de,1\S'gR
%Z5"kGK8tXoba4J$%S^"`n>=4eJB<eiC(US$U7cLgr259!`Mbi))R:6^QqSgrn[BpBVjPiP3=Uns7q`loI'FLu'r^i;G&pJ^Xqi:Z
%<_t3;)F.8g4pg^`H+KK>8'Ba2>`2!pk)-'F:bHgiJ]V!LgtUP_XYlq`G&3NI&W,/9(&DEQHV&:>+Z$\E@aUTGOp1)lF$P8A<<<%&
%+d+Wa1ec,_@LP`8$)Q4"OBEqD"t<Y+9'BD'hpZGW+1n9M-E+I["mgC'<bTf&;TK1(/9s-Nd#5lPQ!F%Q%Bq_r6AUr3HIq$FA&Ta/
%WrW'KlOa';E%]'sJKQ'Zd(iTiepm*u`#.1ci7ZfB6Pt9]EY$S\^a,f8i#C_4a:/qh2)brf@gQWS[4mGcVmJ!9OBOA*A!,,oZ^#T^
%QATrh`iuO`G$ICBK#b3COUst.!@b*S/U+mj1m3TGqMh%DOka5U?@>O?&)%7J0&:;ro^"2c.]>i'RSg/c`.^/DX,pku0?K*oniP\%
%3Gi>7!^@.u:XIYoecAU@"e#%q)r%$*UOqY(La[KcZPg`+U)2Xb`0^X`]5cQJ0i3#`b`SC[J,^/.@TAGOdYl^9ReJ4o0f@VX)+`+G
%0NY;,)lejEGWd`##U^j$Z='hT)/.8>/kE<-G%$dG:rF:<Fa!4sfL'lQ3GWpnS<Uo?E@I<[WI4=L"p*mr[N"GT5:"L,aHr-tT276!
%gGZ%p]jPiG[C-ZAMSt7O4'Rdu==%<0CA@B.XaTMcIh"0fe2:Q<:jTYS51W=s3=,8OVn@lNK`G4<D8h0ffKpl<5r-YZiuFj)oqoQs
%>1j@sO'%N$Fdq(Y/8oj=*`BhGFA'E^M?2*6[!?)S3]^I(\BTp-Y[\J;1]1@C,c#&AAM(-jAO3L#1Ik/TWngk#6QrX%$AN*o;H&:/
%5m9i1#_F3HcDsCo=&\Ghq\?>m?*nLg8\@6tq%sPmoeN[g4b.uf<(a!9NtVeP8PT]]Jmm-*+IiFKWg?a!@kOWb!l)XRLC=b/$0r7d
%>#@=sDoj^4'%/C2e?g*lACoHpk/anV+G$YZ;([\L)\u=D+B2eA.8cs0kf)OJ39M4[c<fKMJgq`Vp5ktT?AA.:=^u'4;Z?rlI;aO3
%_'S2i2QOe/&H#p\jC3ej$l5QRe$?)PD&4e_GS4H-9(Eg/[e[un.JH[p`.pSJS4NQR,C0e2CagX$QYaW,VWt3h-$.^+8mJ(2Lub3@
%)"$[WneJ9Ma3CP(4)(ng-f785I'eS]@Z]_Y(F[6h3#PAClBpYdE$B>%HM(Sq<82#mk9A=#.LLpi*DNV*J9M-&2rAFc1Dp[?;2XKO
%L^q$0M,p'S#44W%J$7nt#c?g(p1]q6Z>_!cg=h78<@5<R\pfRNCU7jGonb<-`3h+Qc&1+:F-hrgb<@n;i]nVKcN8[/(2'u"<[A`_
%qdfN0SnW^q!SMMiBgH3glPGX4,@<JU_!7C!j+ZZRFWOZQL<b)d5Ci[d\B`QtS`b(mp,qg0)s?lsICZGSp\D,QCM]?>Z0'uMM=1)q
%\"2u;ED%]UJ+:!TIe32Ehu)g/h`44*R>POIs)VYdcbKD&(]0+qVre/l:>Q9J5P)ZQ^%qBXQf#IQlG('1dBC=[mFui7rT166]=:Ao
%7<n*eEE'f$cHZ@VX"W@Yoad\plF29<HG,@k*WWjhH;l""0<N"diqIdY!9387.PD407b#oOc/3t1S,UBFhliBA9"a^q*N;gL^2A,s
%r2%0`I3QH*mB>AprP8]HgQ)7'earBnhgGFR2sY="jlY&g&LfYFl/uLQmLS2[L@H;5oCXh$@;UcQrp]#RVeo3*og/GWEIE7oC]=16
%IeUH--?45/n*&F#eG@')^4,fP?iAs>AOWADdh_hQNkL97$:KFD`BV$4I/`om^]48@4uN*3=.c[EIerg(_WA,eceSQZgNMM#;Z?Vf
%mD&RSbCe,Jp0lT,!TE-PF.urhoU#<ir*p-eIV8lKPsak9oM/EG1:4%7EW>ltLR(.]K(?LHbmStg0g#t`CD8V-5PEIhLITWs3OF@f
%D4HA)KX]T`m#grO%:Hh`A4b@IIT[dT\)NH3ZLD9Onk(Y-_Q*9>G-E'8C`a?9iK\HE"_PY."K;<\4gkmDOmkt/nq)fG=!`VD?&jRK
%$BjmN8b0aG7NqgkarbtH*u$$[Fg<8*d?8;B$*IM1TIbr'PU0>Gks%IWM]WWZnWfi%.oN<1755ZE-q`JL77m"XZCg"D(-a3>i[[I>
%$g[L";+fgQ77hm'.(O!"T8G+d4t'%O.n.Pf@e-p.JA7V@^AWq&pXZa]FkKtXebS'OH2%$%hgP0YDnl/9s*XR!IsfL(qIL&o0E6Yc
%o?eV<e(GN]eM<Vg3$=D$MZ8_MnZqVN?J9DLE::upCeJRdeTm3XNKdOV0*gcb$cGr5I=8L:0OnM/Vfi@H.]N3TWs_OZ2:osL^BNe(
%?13q=*%aVOoIcfTdI8PZm8c4tlEq."GuVR)?i%Ck]aSarpLYII-dHdV5JJDcg@`X=a8b#aMSK#bb9HE;K7.P2![W5Gr?2"#W,=uj
%a(@;2:*g1F=`!54<B,@\U4oC]BjW#u[1J\M+ECf+(mHY7E=^6">R_3Ac(]fP)`a\-Ss`^JKP@];hURGiE,H&m/`983@GH6j!0qZ=
%l[<9.gSgHI9EoAhKUW!<I6c1]f?#0`[C;^l1J+I\-u0mT[,4^16G.#`0[QrYIZ;$>%&`(61U*VgUO!d[E('o3?,m>K'1$Zj\LEeG
%U3nbXMgCf_]nOZ+lsIA-bgj+jV-i8mfdLX_f0-Mgkdpf^p@*8\_;BWLJko)0Dk7:7q<r5((]Nj_]RSOZ'&1lbRfE6APP-Z9X&&ck
%l+d2kmHI\:Rt(>@HhE`?qUqLj;[K'<R[Fgh1P9cf.]k$$]<UAt;;NeiYZ[&X<2Hg4ffJ1jMb$PsAOR2Bn(@&jW'j&o;M_)b:2H6H
%85`FjZf;p*EkH]9C!\CT8OP8G#dCuR#E`0LqK(X5H6/C`6-MJtH8KgsfhV4gpCrGu+P?WLaqT])W+2G0d/oRl"tmKkeT.>qqj"i?
%p\LunPl8ek,=J&7.iu.n`Y+l\\_#)91XDg@HFelZR0EgAH``,^?d/sGSL=,!gK3>*gO6%rhq6QQe<bUR:L2h$a_>GcDE:Jm;GAR.
%VlABaV^]=6M9heVO.SOqT0/1,4HH*sO.SOqT0/1,4HH*sNt3;d-dUg#cf7f;h*-**5C"<"@`R4Ncf6D!j8XJPA"^d'2SM7olBB-U
%PJcpSYN:tOjo8[pb9nY3`!$,&RG_Y3it$A3I>kr26`?\-i%cM,T"Nc$rSaDH\tFhV'^2XWgfMjbd[%\3O#qn$;"-At@CD)KVeWAZ
%g7().riNZlc4Y!n\rql\2a`=)T^^/(Z(:HO5'iQUf2f(V96Wb0K[\SZ@k/ND5%l&TJ^XXqkV/P+$G8It/N$-B3.\dG=m4L;p/3''
%d+sOnAga*<]P':L.&aU6,H*te@dP8l.K"(+l$.(<H>i%kBK"kF9!LY[5@OkpaX:f&Ujt^P(?tdc-@da-7jUU7$K%=&Ce2g6(Ikp.
%S3U$K76h936\Z-WK2L'@'-X`_b2F4+ZT%S.UK-S*pZ5)n>XPdM;(DW5'E$2kAbbj-_Ye"(R,0W9DBJUT.n`!PL_bQ`\Bob'S?e:i
%gC_k",s:q8>6ao6mmsNVgp+LhTd%6Bj0t$lRl4(X]@mX8NfbP6;`'OfbQU)"]piK5713)IW_^!b\':ceN%D\"h\Hk%BYH)A*SKE]
%P$B0k/6EWqBW^,7\VZc"F*(No9d[==Ak0QEm`/-[)s&Eb@3&10K9/AZ*nJ]4_7?/ub;=U.k1fAl"8Af*)f9B-1`IS5m+he>.\AfZ
%`b3ILmq[#@dB<st;TkVe,Z)\Sl!OP+?0]lZT.K'i?`^6+A)E:7ca7/#=:bf^#"!k*H1*jf78N*lF5n.(oujNWGY):hYnBR=jT"E4
%FSBe@fJ1N>iKA#*=u?##gLk$'+^>q*O!5J(C!Z):4Q;4UbPKf-*CSqB(%%j.4!Z140HBMps(3obnT!gh$IKE6<j#IL!EDBML5Qh`
%4l3L&bI6-j'1qIsRgZfhZ9)tUE?.Sq_]:V^TOdaj.#?7_J09hh(htqJH0!5^CY%ScI-4U#(noYMQXOak8c]Ti8pS[%bX&H[boLni
%jsf732CE0O,'-]1o;J6>nC;6#NRnIt2V:UsG\>mG2t0_"ma&4t"dq^B3gDk&FU:bNFNHsu519LT-oPDI=TIWuV6s]o?$I\-8f(b!
%7VSEa0TW3aq`7=cW?=.n<mZHGh"FN<6C@(]l/n_2]*[Ut8tKGZ6bLcn*WU=,/8.c-jP`_EVL:39iN6sgWG@OC9+A+ED;<L9hPg[^
%7=.2K[D3LPgS>,:lsKpA00>c"@u@O<JGB<B&3r2\);IVFa[/`HCd=(+=+H3.l]m;=0[oON%F@?jf6baEI6d=h,U\+pblSPZ4U7'1
%Nr_=."-/*lI_6AFBf9q3Ucesm@;btt^@>o8WKGYWn$M[iNCbYnNWrsV(-X$]fR\@EXT:Q.M6Ln?-Y\Jrrt2AH'@,@Kri*;(ceU_P
%hOSiDq.kd&Ra2';+_rJ#9HA087ejWE$*<lS:=SF2>HEe#i;U(iL(TqH+Vm*-?*,USY^s;EAY2saR@8#3^g^'T)?<p:hT5sW=>mC>
%9%C^6-mXnN=_*Q@Ugcam&*lJpJh;n<_b7ch-"&lV12$stLF%J#HSP0Q/Mtr!J<pt[(NC_MjdfSpe4>4YZiG)(K07)W$mgEEo7h]-
%n<]VJlTj]H2%,@S&<:jY\f]\9Jom_VNHr[[(,k;M2_Hh9PHQG_?1U03L,sD<Q.5e"\[J;`KL%HN`dk;Ag*LUa:Y2s!E0=\]7_uNS
%[K<MHV1jcNTQ!6VR+(+4n;J!!/-'tTGG&\51C\j^R"irfn_43$@otJW%nmd(#KUj^3c\'gSA7g<3sg^C6'2K$0!eK`L_;r`U6%oS
%_"o$Ym.7(s@Rm-Ue.HASTMLF2qscgkI8"4HaHdB8Jr8aE/JU@"ebVg9-D+S;JC%+-!*q5>"t*M-(E[;I_OAF.B(3U(Soe799*#^=
%(^5?)8e+8@N$kn#D+k=9$aJ8UXG/,dk!aAi#c,o1<MJ=a2$?u&LA;H1@$$K5(7:"T1D_ft?.\Hbd"D@Ya@ub[6$\ifS5]i6)qm1M
%'gLO#bX6$8NMG4^3/G#iRgBj*dq1$+*C.$FJMW#\5h$2f#8\*Yrut+Obk19Z[Ud!m*p#t6U,OT/;=eCOA)86$/VRVTlXrB5Ssrg$
%U=SKN$`*nGaM^m-'t(!*&hD[i)7WR=1\FnJ?9Od]W,YKI3nIoX\c,hQL+'tt)S\\#frT$(EABeY.aJ,N@5W=RSXINUV13qr;sSZ7
%FXtEarKJTE@Qab4Wn4RPQ.pfDgRStW5,C#:ZlBi;lI]pANXSAoPa%V@ihG'6`C'+<<A5q`+c0F*P/qbh)8a&"1bYM!Pa&JuFLSk]
%'!1+I,lBjX6>uO52S0/u+AI%nNK^uT@G]Fd-:gqLcNA3s9/%X)Q?os!?cVnCQ9qBXp,jI<\A6$\!u"L0^IF^a^hZt_J,qB?m+pMu
%>_\&T6NbWF>(MZ,pQL&^?rfXW8q9$B(dqf2@]5gdCX:NTqn_.MV,dl[8$#4/CN?SC7ENZ9hlN[Il7&!-7<GhdJ;*W`RRMV8+5K:3
%0*tTaG2,Wb1HS9Qea+3J!#4)oL&.cFUkC*L6DI3KNS0P$`kAAZ:B?hPHd2789kA59K%1>TN+>pZZpjN1HEin#o%XKg,]*<[7kr.W
%l[+/rWn,B.-95\O-6,1n(3M"n#P_\Pc7`-:XI1JbDsJ=Q-:]2?n^p2D$OTdW:(XX\daOq)cQ[DM0HltR[<YlC&2#h#-"Ld`pL!l\
%l](%8?D+oZL^]8D88B0#f1ctj\gS-rlSmDlNU$^3S<rGbn3@j2OYk%JpjRl,k$Aej152HR+mK`N7FP_h(6+lr]F^8>aG3&YCVYFX
%GD</0&A\a?16(]TS\57)iDdI\ZJ"t5B;\O5Z]\5:l7?SK2e=eK,11LSg\cloS*Sf?/'0lH=qOns7o]Qk.3+gU/gG`t#@kD#9d,I4
%5<MQ<Q2iblJL]VA!9RAU%ZlKT\k('`-om]a.:V`=g71_r/EZs[8'"&!kebFU+];5'N?(*_]-<ES6.K[,>&k$8*<T[l>CENRfTm>u
%16oX:D#P3IF))*,kB;@dSj)6$Q;-J:Wl'/s/1Ci?&>^X_c!RU@1?h.Hj^?Iu6u%=?,lpMXbu@Fp.(pSb+AnkZ:9NTB3msJ2Jcc'`
%UD+q9#VF`p6nnN&W%`Csi7RlIVtIX^D!Nt/[a5Q^e,97g/-*5/<n$EQYc:_D>'Y?uSScjS'a7T=iF^`L*1<[^"5k5iZ-u[!>I.Qo
%E61O>WaO;3?]:]bg)o.)%';I3Ah->>$3luh%]$D[)=77mF42":/8O-!r,o4Cdj4st6>T\I-tDt`+5gY4@unAH:[Pm'@Rk6lQHgoU
%!AtW07DoUbb-(q80TgJ]VuWOg<hdC)D@4K\Bl0H!lUfW:\mO1L$t5t/`!/TNeV-hbeHgIFhbEjbW0;r[Y-OTlYu?r2Y2'N@\>85a
%6_;0]8acPR3(Yj<)rF"!j;-0em]=7d<`KQtp4eur'K!6q$-'c_Ve@/0]V+0J"RT5E)['tK(^cC9o8aC4QMYDCLeo^cai>-llV1r,
%a07UN;gY?q9N$GJW0\3QV&F7i1u^nP7d5uF2l=*\9?%TqN<;.aB!B9m;T`m6!(9cXaDQE9h:W^s^Jrr9)[kaiA-38UaQM</IHs5t
%*+.eUgT,>@mjq%5PpSC/Q'br.?orLY'e6A=4aa8-)qVJJ:'IYN%p5!6gNa7K7-R]PL+/qncG7HD8QLs^<nE%m%p#A?Zd6Y(N@"<T
%QNPOQ3VQ<@Y(t8;70=AZojPQDfWUW(0\+;Tc"5N9-RsqnY))Lrr`cLn?L#@$<]E4!(%O_fl=*eLei+d5m`5"QKlIc(n3TT\,"d^*
%2qqSqa]u+dFE(S,E4X1kdHlD+=HlfGU;j%N#>F?=qa&A$PsI\E89X&!-fdh((tWHOLhKuB?om<hc'4aPXK4kB)7l5]^5$jXDRKlh
%gL923N1u4,8EF_mmJ5k;WY_/N3*TkMJ5NGjTF'3:Ot]F7bO6h=Yqn!?;(#%ph!L2i3BBY\MR.luN:>%j]'N<=W`e/80l4^bY2+a0
%&lfo$C4W<:[TRA94:8+pNCsWo[-$>ZjK]ZiZWWK:WO/X5b$C$p"tRF2@Gc+YNLdTZY[#Et:-&CPPsQSF;=3ur<`CHXKaF'$EckCI
%`_1SXV%U.X^W'Vmik[D5_e,Y3h:BU_8[u#=O^tW)XTU/BVVeUmAGHrHQ'VA(7)RI0-k->QDUb5nf2C\GPg9@:8u8RP%j;2ZcNY[M
%,.`)1a06&@1#0-(/54\1"k)o^bF,WO(=YMR7A&kF]3'&sR&s6Io85<Wq(WnmPk;dPbSB5W<0-13@X`gL[+&iLK?@]6"nQ?XUf1=h
%"!I[,335!f)%gmHUF@*\8QIXFEV)m7_.A\'T\cl2qe3*6^Jc]L<rihulIG]q^/F#aF,upn4h*s57N_cqXkcM1,pDcYT#CoQM?)R_
%1H"qgXN+(>K"5W_+1uEbY+8Tc&ib?<(l^Eh8dB>[4V#T^apf5RN@[elgp(?l<SBk&;@!_a0a4q'b,&*KPTs[e1bR,-gkX^7(5m>B
%nQ26/>=,c.)6j186HtoWf'A-O9gM/;XiRrP@47`HDHr6hdZc8O41S2&h=m@KhUJO"MPrr00p6hR">S)HV7I:Z$-Arc&>H.[Yr6?J
%6Kgbn5V&.q"<E"_<82!\83!8eV3Iht1,WbdTcMaE6n)^2W1gS$7<E5id@r'fPG*\ncs:,uB\U"+HM!/);mK"&EUIq<1,m3Dhsrdc
%dAl#69X?EV;nW/@SJ]pddtYj#7/S%a7]U</YtW7'6-4@`5+#*@,Esr]LcHq=A.-Ei+_FGPq^cLj;06;NR0[(q#Z)WcKBJ%SN!p3-
%[GHl-_;#>E;Cr;;'2i1p=038)(W7s,Vm+gL^.:/W/2^"\3C<Iq;9YgM46]BS05`%iW%=%C@3c[%>shIIMqglR``DaF/h0G@Kr:kO
%QLeiI/[eTHGIcS/qaY/s[qVB8MS2:\hWu5lN9\e7NU"$]>Of"detdF^@(=sTCP*(96S'9&^3Ma24tQQoNEmI6dUe0pU5RB8lD#s;
%9a+onW/*F"K4A"k9iESp%Vm&2(9(_sTpR`\V@JXhUb3n2af$JAHV^CRgbUuTZMnr)X@Mkp25`8Ca.<^9!t,Ql3$0Utl&=Z2:MDR.
%n^D/`.]#U<>^C#bdDh',<]M".f!F?YK?,uNaZ2>O_TAs`1d/$adar9$qM,K`KIKV;4j;_KI,`_IXjL0>[a7Q;3oM/2+^#ttS=]/g
%p#$5+j0,IR.&dXVA$+Js<9I8-9Z,@0;bYYNbr]Uf<GUn",,?:XdNninf8Q#52lj)jRomh-qpIL_EQ6><[=4D-r!=2nPAWmJH^P55
%)1`Ln`GnTA5dqbVerEBDPFsu>"m8kM'Zk>VW5l'XSL'&ARqC&4F"j)1C:D?mWrf/2#.@Ed4F=o-'2_qg$H+g']$:d)=VSe2%0ROP
%/D5/7Qc(mX,,MR[E[$SSDP6D+"h@1C^hB%4B9+,Lfg5#n7!.:iqSCo!f9@q+8fC6:FgtqGTn(RKjNS9fDKQ[aZ7+rWdD.XT'^m#2
%3G*rd'4qXen@Lu7LH,f"@fH]Yc:=aFhJl$(LGcJ'%[:E43,"R[`"574Z:'7V``B#6V7igaTCZ?O!K=S\UN#0D*-T6&!V7d@=P?&D
%0'9WQZRD3oL+-GkORK0"&mCZYY9H;KrXTZ+<N77[L0i5,S[L,dQG$sQVs5sf]]+Y(9G/<$NpEC^@O@U*$1a'RaIO1BpNF3gRZr]:
%8P\SVN`LX9<eXlI;PKZ91,0F;@gPgY%qe`ERkh37M+6]t,aA]/:k\nebVa+s;oTV7&%+`MWk?AOB:@PAGbOI>S;IY\0Qu[ZW,rah
%@gm%LM.4tFa&)7SR<^bhceH37"%MAIO2P_36Aa^Nh-<'a]!V\q!jE3_1u=^M23VHQ<=IJsJj!=dh+YgRZ@!%LOLdc-k&m)*2Spb[
%ca&[t.u_<R)F7T?iDCG/"oQFHVaN)C_0OVoSpbO&Qk^ZDPq2>#NM>B*T(4H(FkLP@/";`Yr1:crbDd/*6FDK0*!s+86]0a^Z(RFm
%<g.1YFs\7\D8%UEkPI.0U&;&tRnPOI]srR%=t/($<Cu)2`H[,L22[T3aJ9Kn`N#:cRi>oe8j@OuUhrI\&u30E;,@GB;g/faD7F38
%RUn6pr?WRiJTd$d_ZFY?^W<<2$5R*VKL=Xc1>3q?jPk:i9+CZ*'I;SYe(q5Lb71t%W]o==BD:7R't&]CDK&2^:cX6n4J`CR)hu2O
%EE*<fC*'G)9s%@H^@m#p[.pH,raa11S/m#,6k_Z/1jprZ-$!m=2B1=;Q=:tge_]?!IVZSWFaI-)Rg7>;<+oe]F(6Dml?5i3SM1F%
%DL="o$[Q`,37#jc0SYPD/1148;j;<dT;$5J#g'r2TbX_Bh!9d7&qTq9Cc?$J,]=eqW:r79=BD)UCdLJDOrJE'p0c$&727\JW<u<9
%]mgDn:O6aC_IgX3X9)ZT[-Vs<&)Lhh!YdJ(Xd1-4Qs<C5DPIhYS$K_LaJLB_LT5DsbIMG7#sr4"@;Eh#-pl@'LUCYF,YNrNas#kX
%,RCs`Tsf.3BB;-l(4/aL#heGF#FeU>&eP/moCSO*7^1sQBHF[Q0g0d$#V`>X5uK1]8-RFgMeEH0+eE@'ot]p^E6Znk!>r\,m,9dA
%eMd=Z*XtVe0=oCTq^NmmVeg.sRG++6H*`d-dJIPDJU)ZAokBG-\ed%DZ4%n$!#+5Mai'1SVeRkR:;'+r!E[%j5s:_mAR%`PR-0uZ
%B#_.YWGol:)\Vd@-+k`=\X8Uh`Xu>/:("+"[N8u[@kn2TYZ2b:.`/jW(TC'LZSuOG)1t$9c*j%n7ji:Nk+%clA"M'.^W)Y,D087l
%$jt0e9@[9I&a&=ggjC!iKBE[7pmd,=6tbj4lcA.a>)6KN@HTJKH7f6a#\"miJPaNBbQ'r*+l.bo7'8RYTdUll6;$W:](EE=1GDk%
%PgI9!RBqo5MooTsG3gC<%pFJ=qRV!H;k]U:fu:0R2N;,n5P91r&!pkM^oju[R[KE8FHg9KV&F,Mm2,oV<PKKLI'Vg<f0Zpq*\,h7
%X)7F07C*'K68PU/$$;rP3I44I*qrAPgUU65=a8pp_OK2&78f'S(;e6Ep=$UK=j[s#!MMcq8`4+[/SU0A]0SURK(Jbq-C4L;MY5Jq
%h#tXHS'0&=FBRmK+gELbm1=`+>6e`-4^#,G@#-(sdoL!`mkVFQM$RQ('lJd)H'A6XHcbTfe?_or:kM3F2X7j5@8iWiORAg[TmQQ0
%7XA,GOP,'*,)F2j!`d,%G#/]TKFa?*If?DDp](#tja[4$QbRkGr*S?0p%+eO_Opi+kJ)<::LAPLgFqE3os6mYc.ATfT6F)'J,(BB
%^\e!-e'i6LHM@(k^\d<Pe(=WcGQ._u+72;fdm*fs^\aLmrQ5'CU@85K~>
%AI9_PrivateDataEnd
